package com.framework.webClient.service;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Set;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import com.framework.jt808.handler.LedMsgProcessService;import com.framework.webClient.dao.LedCsszbDao;import com.framework.webClient.dao.LedLedDao;import com.framework.webClient.dao.LedParaDao;import com.framework.webClient.dao.LedStateDao;import com.framework.webClient.dao.LedStationDao;import com.framework.webClient.dao.LedTemplateRelationDao;import com.framework.webClient.dao.LedUploadParaDao;import com.framework.webClient.entity.LedCsszb;import com.framework.webClient.util.StringUtils;import com.framework.webClient.util.UUIDTools;/** * @author 吉庆 * @date Wed Aug 29 00:00:00 CST 2018 */@Servicepublic class LedLedManageServiceImpl implements ILedLedManageService {	@Autowired(required = true)	private LedLedDao   ledLedDao;		@Autowired(required = true)	private LedStationDao ledStationDao;		@Autowired(required = true)	private LedCsszbDao ledCsszbDao;		@Autowired(required = true)	private LedParaDao ledParaDao;		@Autowired(required = true)	private LedTemplateRelationDao ledTemplateRelationDao;		@Autowired(required = true)	private LedStateDao ledStateDao;		@Autowired	private LedUploadParaDao ledUploadParaDao;		@Autowired	private LedMsgProcessService ledMsgProcessService;		private SimpleDateFormat monthDateFormat = new SimpleDateFormat("MMdd");				/**	 * 	 * 查询电子站牌列表	 * @param paramMap	 * @return	 */	@Override	public List<Map<String, Object>> selectLedList(Map<String, Object> paramMap) {		// 拼接LED_STATE表名		paramMap.put("TABLENAME", "LED_STATE"+monthDateFormat.format(new Date()));		// 电子站牌数据		List<Map<String, Object>> ledList = ledLedDao.selectLedList(paramMap);		// 站点数据		List<Map<String, Object>> ledStationList = ledStationDao.selectLedStationInfo(paramMap);		String xlbh = String.valueOf(paramMap.get("xlbh"));		String zdbh = String.valueOf(paramMap.get("zdbh"));		// 带线路或站点的时候，返回到前台的站点集合		List<String> returnLedList = new ArrayList<>();		if (!StringUtils.isEmpty(zdbh) || !StringUtils.isEmpty(xlbh)) {			if (ledStationList != null && !ledStationList.isEmpty()) {				for (Map<String, Object> temp : ledStationList) {					returnLedList.add(String.valueOf(temp.get("ledid")));				}			}		}		// 整合数据		for (Map<String, Object> temp : ledList) {			List<Map<String, Object>> stationList = new ArrayList<>();			for (Map<String, Object> stationTemp : ledStationList) {				if (temp.get("ledid").equals(stationTemp.get("ledid"))) {					stationList.add(stationTemp);				}			}			// 存放设备异常消息			Map<String, Object> ycStateMap = new HashMap<>();			// 拼接LED_STATE表名			temp.put("TABLENAME", "LED_STATE"+monthDateFormat.format(new Date()));						// 查询电子站牌最新心跳数据			Map<String, Object> ledStateMap = ledStateDao.selectLedStateNewByLedbh(temp);			if (ledStateMap != null && !ledStateMap.isEmpty()) {				for (Map.Entry<String, Object> entry : ledStateMap.entrySet()) {					// 震动传感器采集值					if (entry.getKey().equals("zdcgqcjz")) {						if (entry.getValue().equals("1")) {							ycStateMap.put(entry.getKey(), entry.getValue());						}					}					// 门禁传感器					if (entry.getKey().equals("mjcgq")) {						if (entry.getValue().equals("1")) {							ycStateMap.put(entry.getKey(), entry.getValue());						}					}					// 水位传感器					if (entry.getKey().equals("swcgq")) {						if (entry.getValue().equals("1")) {							ycStateMap.put(entry.getKey(), entry.getValue());						}					}					// 加温模块状态					if (entry.getKey().equals("jwmkzt")) {						if (entry.getValue().equals("0")) {							ycStateMap.put(entry.getKey(), entry.getValue());						}					}					// 液晶开启状态					if (entry.getKey().equals("yjkqzt")) {						if (entry.getValue().equals("0")) {							ycStateMap.put(entry.getKey(), entry.getValue());						}					}					// LED开启状态					if (entry.getKey().equals("ledkqzt")) {						if (entry.getValue().equals("0")) {							ycStateMap.put(entry.getKey(), entry.getValue());						}					}					// 风扇开启状态					if (entry.getKey().equals("fskqzt")) {						if (entry.getValue().equals("0")) {							ycStateMap.put(entry.getKey(), entry.getValue());						}					}					// 照明开启状态					if (entry.getKey().equals("zmkqzt")) {						if (entry.getValue().equals("0")) {							ycStateMap.put(entry.getKey(), entry.getValue());						}					}					// DVR开启状态					if (entry.getKey().equals("dvrkqzt")) {						if (entry.getValue().equals("0")) {							ycStateMap.put(entry.getKey(), entry.getValue());						}					}					// 4G路由器开启状态					if (entry.getKey().equals("glyqkqzt")) {						if (entry.getValue().equals("0")) {							ycStateMap.put(entry.getKey(), entry.getValue());						}					}				}			}			if (ycStateMap != null && !ycStateMap.isEmpty()) {				temp.put("sbzt", "异常");				temp.put("ycStateMap", ycStateMap);			} else {				temp.put("sbzt", "正常");			}			temp.put("ledStateMap", ledStateMap);			temp.put("stationList", stationList);			temp.put("zdsm", stationList.size());		}		// 返回到前台的电子站牌		List<Map<String, Object>> resultLedList = new ArrayList<>();		// 判断是否有站点或线路做条件查询		if (!StringUtils.isEmpty(zdbh) || !StringUtils.isEmpty(xlbh)) {			if (returnLedList != null && !returnLedList.isEmpty()) {				for (String temp : returnLedList) {					for (Map<String, Object> map : ledList) {						if (map.get("ledid").equals(temp)) {							resultLedList.add(map);						}					}				}			}		} else {			resultLedList.addAll(ledList);		}		// 返回到controller的数据集合		List<Map<String, Object>> trueLedList = new ArrayList<>();		// 筛选设备状态的数据显示 sbzt: 0:正常， 1:异常		if (paramMap.containsKey("sbzt") && paramMap.get("sbzt").equals("0")) {			for (Map<String, Object> temp : resultLedList) {				if (!temp.containsKey("ycStateMap")) {					trueLedList.add(temp);				}			}		} else if (paramMap.containsKey("sbzt") && paramMap.get("sbzt").equals("1")) {			for (Map<String, Object> temp : resultLedList) {				if (temp.containsKey("ycStateMap")) {					trueLedList.add(temp);				}			}		} else {			trueLedList.addAll(resultLedList);		}		return trueLedList;	}		/**	 * 	 * 查询电子站牌列表(公交处 增加站牌用)	 * @param paramMap	 * @return	 */	@Override	public List<Map<String, Object>> selectLedListAdd(Map<String, Object> paramMap) {		// 拼接LED_STATE表名		paramMap.put("TABLENAME", "LED_STATE"+monthDateFormat.format(new Date()));				// 电子站牌数据		List<Map<String, Object>> ledList = ledLedDao.selectLedListAdd(paramMap);				// 返回到前台的电子站牌		List<Map<String, Object>> resultLedList = new ArrayList<>();		resultLedList.addAll(ledList);				// 返回到controller的数据集合		List<Map<String, Object>> trueLedList = new ArrayList<>();		trueLedList.addAll(resultLedList);		return trueLedList;	}		/**	 * 	 * 添加电子站牌数据	 * @param paramMap	 * @return	 */	@SuppressWarnings("unchecked")	@Override	public int saveLedList(Map<String, Object> paramMap) {			String ledid = String.valueOf(paramMap.get("ledid"));			// 操作ledPara表			// ledid不为空，调用0x0903协议，更新ledPara表			if (!StringUtils.isEmpty(ledid)) {				// 调用0x0903协议				//List<String> ledidList = new ArrayList<>();				//ledidList.add(ledid);				//try {				//	ledMsgProcessService.service0903ToLed(ledidList);				//} catch (Exception e1) {				//	e1.printStackTrace();				//}				// 延时5秒后执行，防止调用0x0903协议后，查询upload库中的数据为空，出现数据异常情况				//try {				//	Thread.sleep(5000);				//} catch (InterruptedException e) {				//	e.printStackTrace();				//}				// 调用0x0903协议后，查询ledUploadPara表进行查询，写入数据				Map<String, Object> ledMap = ledUploadParaDao.selectLedUploadParaInfoByLedid(paramMap);				// 写入数据到ledpara表				if (ledMap != null && !ledMap.isEmpty()) {					ledParaDao.updateLedParaByLedid(ledMap);				}				// 校验电子站牌名称和站牌编号是否存在				Map<String, Object> valMap = new HashMap<>();//				valMap.put("ledmc", paramMap.get("ledmc"));//				valMap.put("tag", "1");//				List<Map<String, Object>> ledmcList = ledLedDao.selectLedidAndLedmcBymcobh(valMap);//				if (ledmcList != null && ledmcList.size() > 1) {//					return 0;//				}//				valMap.clear();				valMap.put("ledbh", paramMap.get("ledbh"));				valMap.put("tag", "1");				List<Map<String, Object>> ledbhList = ledLedDao.selectLedidAndLedmcBymcobh(valMap);				if (ledbhList != null && ledbhList.size() > 1) {					return 0;				}				// 操作ledStation表				List<Map<String, Object>> addList = (List<Map<String, Object>>) paramMap.get("addList");				// 判断是否有数据变化				if (addList != null && addList.size() > 0) {					for (Map<String, Object> temp : addList) {						temp.put("ledid", paramMap.get("ledid"));					}					// 添加电子站牌与站点关联表					ledStationDao.insertLedStation(addList);				}				List<Map<String, Object>> delList = (List<Map<String, Object>>) paramMap.get("delList");				if (delList != null && delList.size() > 0) {					// 删除电子站牌与站点关联表					for (Map<String, Object> temp : delList) {						ledStationDao.deleteLedStationByLedid(temp);					}				}				List<Map<String, Object>> updateList = (List<Map<String, Object>>) paramMap.get("updateList");				if (updateList != null && updateList.size() > 0) {					// 更新电子站牌与站点关联表					for (Map<String, Object> temp : updateList) {						ledStationDao.updateLedStationByLedid(temp);					}				}				// 操作ledTemplateRalation表				ledTemplateRelationDao.updateLedTempRalByLedid(paramMap);				// 操作ledled表				ledLedDao.updateLedList(paramMap);			} else {				// 校验电子站牌名称和站牌编号是否存在				Map<String, Object> valMap = new HashMap<>();//				valMap.put("ledmc", paramMap.get("ledmc"));//				valMap.put("tag", "1");//				List<Map<String, Object>> ledmcList = ledLedDao.selectLedidAndLedmcBymcobh(valMap);//				if (ledmcList != null && ledmcList.size() > 0) {//					return 0;//				}//				valMap.clear();				valMap.put("ledbh", paramMap.get("ledbh"));				valMap.put("tag", "1");				List<Map<String, Object>> ledbhList = ledLedDao.selectLedidAndLedmcBymcobh(valMap);				if (ledbhList != null && ledbhList.size() > 0) {					return 0;				}				// 根据参数模版id查询参数模版数据				List<LedCsszb> ledCsszb = ledCsszbDao.selectLedCsszbByMbinfo(paramMap);				ledid = UUIDTools.getUUID();				for (LedCsszb ledcss : ledCsszb) {					Map<String, Object> ledParaMap = new HashMap<>();					ledParaMap.put("ledid", ledid);					ledParaMap.put("tcpycfwqipdz", ledcss.getTcpip());					ledParaMap.put("yctcpfwdk", ledcss.getTcpport());					ledParaMap.put("sbyxksrq", ledcss.getSbyxsjks());					ledParaMap.put("sbyxjzrq", ledcss.getSbyxsjjs());					ledParaMap.put("xhsjdkssj", ledcss.getMtxhsjd1());					ledParaMap.put("xhsjdjzsj", ledcss.getMtxhsjd2());					ledParaMap.put("sbwdfwks", ledcss.getSbwkfw().substring(0, ledcss.getSbwkfw().indexOf(",")));					ledParaMap.put("sbwdfwjz", ledcss.getSbwkfw().substring(ledcss.getSbwkfw().indexOf(",") + 1));					ledParaMap.put("wbfsks", ledcss.getWbfs().substring(0,ledcss.getWbfs().indexOf(",")));					ledParaMap.put("wbfsjz", ledcss.getWbfs().substring(ledcss.getWbfs().indexOf(",") + 1));					ledParaMap.put("hlfsks", ledcss.getHlfs().substring(0,ledcss.getHlfs().indexOf(",")));					ledParaMap.put("hlfsjz", ledcss.getHlfs().substring(ledcss.getHlfs().indexOf(",") + 1));					ledParaMap.put("jwmkks", ledcss.getJwmk().substring(0,ledcss.getJwmk().indexOf(",")));					ledParaMap.put("jwmkjz", ledcss.getJwmk().substring(ledcss.getJwmk().indexOf(",") + 1));					ledParaMap.put("kzms", ledcss.getKzms());					ledParaMap.put("dwfw", ledcss.getDwfw());					ledParaMap.put("sbglbhks", ledcss.getSbglbh().substring(0,ledcss.getSbglbh().indexOf(",")));					ledParaMap.put("sbglbhjz", ledcss.getSbglbh().substring(ledcss.getSbglbh().indexOf(",") + 1));					ledParaMap.put("sbsjbh", ledcss.getSbsjbh());					ledParaMap.put("sbfwzq", ledcss.getSbfwcq());					// 将查询到是数据插入到ledPara表中					ledParaDao.insertLedPara(ledParaMap);				}				paramMap.put("ledid", ledid);				// 操作ledStation表				List<Map<String, Object>> addList = (List<Map<String, Object>>) paramMap.get("addList");				// 判断是否有数据变化				if (addList != null && addList.size() > 0) {					// 添加ledid					for (Map<String, Object> temp : addList) {						temp.put("ledid", ledid);					}					// 添加电子站牌与站点关联表					ledStationDao.insertLedStation(addList);				}				// 操作ledTemplateRalation表				ledTemplateRelationDao.insertLedTemplateRelation(paramMap);				// 操作ledled表				ledLedDao.insertLedList(paramMap);			}		return 1;	}	/**	 * 删除电子站牌	 */	@Override	public int delLedList(Map<String, Object> paramMap) {		// 删除LedTemplateRalation表中数据		ledTemplateRelationDao.delLedTempRalByLedid(paramMap);		// 删除LedPara表中数据		ledParaDao.delLedParamByLedid(paramMap);		// 删除LedStation表中数据 LED_STATION 改成视图了，无法操作		//ledStationDao.delLedStationByLedids(paramMap);		// 拼接LED_STATE表名		paramMap.put("TABLENAME", "LED_STATE"+monthDateFormat.format(new Date()));		// 删除LedState表中数据		ledStateDao.delStateByLedbh(paramMap);		// 删除LedLed表中数据		ledLedDao.deleteLedByLedid(paramMap);		return 1;	}	/**	 * 查询电子站牌ID和名称	 */	@Override	public Map<String, Object> selectLedidAndLedmcBymcobh(Map<String, Object> paramMap) {		Map<String, Object> resultMap = new HashMap<>();		// 查询站牌列表		List<Map<String, Object>> ledList = ledLedDao.selectLedidAndLedmcBymcobh(paramMap);		// 查询已分配站牌列表		List<Map<String, Object>> usedLedList = ledTemplateRelationDao.selectUsedLedListByLedmcOrLedbh(paramMap);		// 查询电子站牌和站点，线路的关联数据		List<Map<String, Object>> xlzdLedList = ledStationDao.selectLedStationInfo(paramMap);		// 判断是否传来了xlbh和zdbh，用来筛选出存在的电子站牌		String zdbh = String.valueOf(paramMap.get("zdbh"));		String xlbh = String.valueOf(paramMap.get("xlbh"));		// 存放返回到前台的站牌列表		List<Map<String, Object>> resultLedList = new ArrayList<>();		// 判断是否有站点或线路做条件查询，返回		if (!StringUtils.isEmpty(zdbh) || !StringUtils.isEmpty(xlbh)) {			if (xlzdLedList != null && !xlzdLedList.isEmpty()) {				for (Map<String, Object> temp : xlzdLedList) {					for (Map<String, Object> map : ledList) {						if (map.get("ledid").equals(temp.get("ledid"))) {							resultLedList.add(map);						}					}				}			}		} else {			resultLedList.addAll(ledList);		}				// 存放返回到前台的已分配站牌列表		List<Map<String, Object>> resultUsedLedList = new ArrayList<>();		// 判断是否有站点或线路做条件查询，返回 注意：被注释的代码是不需要匹配已使用的电子站牌，防止查询后保存只保存筛选出来的数据//		if (!StringUtils.isEmpty(zdbh) || !StringUtils.isEmpty(xlbh)) {//			if (xlzdLedList != null && !xlzdLedList.isEmpty()) {//				for (Map<String, Object> temp : xlzdLedList) {//					for (Map<String, Object> map : usedLedList) {//						if (map.get("ledid").equals(temp.get("ledid"))) {//							resultUsedLedList.add(map);//						}//					}//				}//			}//		} else {			resultUsedLedList.addAll(usedLedList);//		}		if (resultUsedLedList != null && !resultUsedLedList.isEmpty()) {			// 移除站牌列表中已经分配的电子站牌			Iterator<Map<String, Object>> it = resultLedList.iterator();			while(it.hasNext()){				Map<String, Object> x = it.next();				for (Map<String, Object> temp : resultUsedLedList) {					if(x.get("ledid").equals(temp.get("ledid"))){						it.remove();					}				}			}		}				// 去重		List<Map<String, Object>> rightLedList = new ArrayList<>();		Set<Map<String, Object>> set1 = new HashSet<Map<String, Object>>(resultLedList);		rightLedList.addAll(set1);		// 去重		List<Map<String, Object>> rightUsedLedList = new ArrayList<>();		Set<Map<String, Object>> set2 = new HashSet<Map<String, Object>>(resultUsedLedList);		rightUsedLedList.addAll(set2);				resultMap.put("ledList", rightLedList);		resultMap.put("usedLedList", rightUsedLedList);		return resultMap;	}	@Override	public List<Map<String, Object>> validateLedMcAndLecBh(Map<String, Object> paramMap) {		return ledLedDao.selectLedidAndLedmcBymcobh(paramMap);	}	@Override	public List<String> selectLedbhByLedidList(List<String> ledidlist) {		return ledLedDao.selectLedbhByLedidList(ledidlist);	}	/**	 * 根据站牌编号查询站牌编号和id	 */	@Override	public Map<String, Object> selectLedbhAndIdByLedbhList(List<String> ledbhList) {		Map<String, Object> reslultMap = new HashMap<>();		List<Map<String, Object>> ledbhLedidList = ledLedDao.selectLedbhAndIdByLedbhList(ledbhList); 		if (ledbhLedidList != null && !ledbhLedidList.isEmpty()) {			for (Map<String, Object> temp : ledbhLedidList) {				reslultMap.put(String.valueOf(temp.get("ledbh")), temp.get("ledid"));			} 		}		return reslultMap;	}	/**	 * 导入数据保存	 */	@Override	@Transactional	public int saveInLedList(Map<String, Object> paramMap) throws Exception {		// 先批量删除，如果没有数据就不用删除		@SuppressWarnings("unchecked")		List<String> ledidList = (List<String>) paramMap.get("ledidList");		if (ledidList != null && !ledidList.isEmpty()) {			// 删除LedTemplateRalation表中数据			ledTemplateRelationDao.delLedTempRalInLedid(ledidList);			// 删除LedPara表中数据			ledParaDao.delLedParamInLedid(ledidList);			// 删除LedStation表中数据			ledStationDao.delLedStationInLedid(ledidList);			// 删除LedLed表中数据			ledLedDao.deleteLedInLedid(ledidList);		}		// 再分不同的表批量保存		@SuppressWarnings("unchecked")		List<Map<String, Object>> paramList = (List<Map<String, Object>>) paramMap.get("data");		// 根据参数模版id批量查询		@SuppressWarnings("unchecked")		List<String> csmbList = (List<String>) paramMap.get("csmbList");		// 去重		Set<String> set = new HashSet<>();		csmbList.stream().forEach(p -> {	        set.add(p);	    });		// 清空，重新存储参数模版id		csmbList.clear();		csmbList.addAll(set);		// 查询参数模版信息		List<LedCsszb> ledCsszb = ledCsszbDao.selectCsmbInCsmbid(csmbList);		// 存储ledPara参数集合		List<Map<String, Object>> ledParaList = new ArrayList<>();		// 存储ledStation参数集合		List<Map<String, Object>> ledStationList = new ArrayList<>();		// 遍历数据		for (Map<String, Object> temp : paramList) {			// 处理ledpara数据			for (LedCsszb ledcss : ledCsszb) {				Map<String, Object> ledParaMap = new HashMap<>();				ledParaMap.put("ledid", temp.get("ledid"));				ledParaMap.put("tcpycfwqipdz", ledcss.getTcpip());				ledParaMap.put("yctcpfwdk", ledcss.getTcpport());				ledParaMap.put("sbyxksrq", ledcss.getSbyxsjks());				ledParaMap.put("sbyxjzrq", ledcss.getSbyxsjjs());				ledParaMap.put("xhsjdkssj", ledcss.getMtxhsjd1());				ledParaMap.put("xhsjdjzsj", ledcss.getMtxhsjd2());				ledParaMap.put("sbwdfwks", ledcss.getSbwkfw().substring(0, ledcss.getSbwkfw().indexOf(",")));				ledParaMap.put("sbwdfwjz", ledcss.getSbwkfw().substring(ledcss.getSbwkfw().indexOf(",") + 1));				ledParaMap.put("wbfsks", ledcss.getWbfs().substring(0,ledcss.getWbfs().indexOf(",")));				ledParaMap.put("wbfsjz", ledcss.getWbfs().substring(ledcss.getWbfs().indexOf(",") + 1));				ledParaMap.put("hlfsks", ledcss.getHlfs().substring(0,ledcss.getHlfs().indexOf(",")));				ledParaMap.put("hlfsjz", ledcss.getHlfs().substring(ledcss.getHlfs().indexOf(",") + 1));				ledParaMap.put("jwmkks", ledcss.getJwmk().substring(0,ledcss.getJwmk().indexOf(",")));				ledParaMap.put("jwmkjz", ledcss.getJwmk().substring(ledcss.getJwmk().indexOf(",") + 1));				ledParaMap.put("kzms", ledcss.getKzms());				ledParaMap.put("dwfw", ledcss.getDwfw());				ledParaMap.put("sbglbhks", ledcss.getSbglbh().substring(0,ledcss.getSbglbh().indexOf(",")));				ledParaMap.put("sbglbhjz", ledcss.getSbglbh().substring(ledcss.getSbglbh().indexOf(",") + 1));				ledParaMap.put("sbsjbh", ledcss.getSbsjbh());				ledParaMap.put("sbfwzq", ledcss.getSbfwcq());				ledParaList.add(ledParaMap);			} 			// 处理ledStation数据			@SuppressWarnings("unchecked")			List<Map<String, Object>> addList = (List<Map<String, Object>>) temp.get("addList");			// 判断是否有数据变化			if (addList != null && addList.size() > 0) {				// 添加ledid				for (Map<String, Object> temps : addList) {					temps.put("ledid", temp.get("ledid"));					ledStationList.add(temps);				}			}		}		// 批量存储将数据插入到ledPara表中		int a = ledParaDao.insertInLedPara(ledParaList);		// 批量存储添加电子站牌与站点关联表		int b = ledStationDao.insertLedStation(ledStationList);		// 批量存储操作ledTemplateRalation表		int c = ledTemplateRelationDao.insertAllLedTemplateRelation(paramList);		// 批量存储操作ledled表		int d = ledLedDao.insertInLedList(paramList);		if (a+b+c+d > 0) {			return 1;		} else {			return 0;		}	}	}