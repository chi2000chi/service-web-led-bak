package com.framework.webClient.service;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.framework.webClient.dao.LedStateDao;import com.framework.webClient.dao.LedStationDao;import com.framework.webClient.util.StringUtils;/** * @author 吉庆 * @date Mon Sep 03 00:00:00 CST 2018 */@Servicepublic class LedStateManageServiceImpl implements ILedStateManageService {	@Autowired(required = true)	private LedStateDao   ledstatedao;		@Autowired(required = true)	private LedStationDao ledStationDao; 		private SimpleDateFormat monthDateFormat = new SimpleDateFormat("MMdd");	@Override	public List<Map<String, Object>> selectLedStateInfo(Map<String, Object> paramMap) {		// 拼接LED_STATE表名		paramMap.put("TABLENAME", "LED_STATE"+monthDateFormat.format(new Date()));		// 查询展示数据		List<Map<String, Object>> ledStateList = ledstatedao.selectLedStateInfo(paramMap);		// 站点数据		List<Map<String, Object>> ledStationList = ledStationDao.selectLedStationInfo(paramMap);		String xlbh = String.valueOf(paramMap.get("xlbh"));		String zdbh = String.valueOf(paramMap.get("zdbh"));		// 带线路或站点的时候，返回到前台的站点集合		List<String> returnLedList = new ArrayList<>();		if (!StringUtils.isEmpty(zdbh) || !StringUtils.isEmpty(xlbh)) {			if (ledStationList != null && !ledStationList.isEmpty()) {				for (Map<String, Object> temp : ledStationList) {					returnLedList.add(String.valueOf(temp.get("ledid")));				}			}		}		// 整合数据		for (Map<String, Object> temp : ledStateList) {			List<Map<String, Object>> stationList = new ArrayList<>();			for (Map<String, Object> stationTemp : ledStationList) {				if (temp.get("ledid").equals(stationTemp.get("ledid"))) {					stationList.add(stationTemp);				}			}			// 存放设备异常消息			Map<String, Object> ycStateMap = new HashMap<>();			// 拼接LED_STATE表名			temp.put("TABLENAME", "LED_STATE"+monthDateFormat.format(new Date()));			// 查询电子站牌最新心跳数据			Map<String, Object> ledStateMap = ledstatedao.selectExceptionPoint(temp);			if (ledStateMap != null && !ledStateMap.isEmpty()) {				for (Map.Entry<String, Object> entry : ledStateMap.entrySet()) {					// 震动传感器采集值					if (entry.getKey().equals("zdcgqcjz")) {						if (entry.getValue().equals("1")) {							ycStateMap.put(entry.getKey(), entry.getValue());						}					}					// 门禁传感器					if (entry.getKey().equals("mjcgq")) {						if (entry.getValue().equals("1")) {							ycStateMap.put(entry.getKey(), entry.getValue());						}					}					// 水位传感器					if (entry.getKey().equals("swcgq")) {						if (entry.getValue().equals("1")) {							ycStateMap.put(entry.getKey(), entry.getValue());						}					}					// 加温模块状态					if (entry.getKey().equals("jwmkzt")) {						if (entry.getValue().equals("0")) {							ycStateMap.put(entry.getKey(), entry.getValue());						}					}					// 液晶开启状态					if (entry.getKey().equals("yjkqzt")) {						if (entry.getValue().equals("0")) {							ycStateMap.put(entry.getKey(), entry.getValue());						}					}					// LED开启状态					if (entry.getKey().equals("ledkqzt")) {						if (entry.getValue().equals("0")) {							ycStateMap.put(entry.getKey(), entry.getValue());						}					}					// 风扇开启状态					if (entry.getKey().equals("fskqzt")) {						if (entry.getValue().equals("0")) {							ycStateMap.put(entry.getKey(), entry.getValue());						}					}					// 照明开启状态					if (entry.getKey().equals("zmkqzt")) {						if (entry.getValue().equals("0")) {							ycStateMap.put(entry.getKey(), entry.getValue());						}					}					// DVR开启状态					if (entry.getKey().equals("dvrkqzt")) {						if (entry.getValue().equals("0")) {							ycStateMap.put(entry.getKey(), entry.getValue());						}					}					// 4G路由器开启状态					if (entry.getKey().equals("glyqkqzt")) {						if (entry.getValue().equals("0")) {							ycStateMap.put(entry.getKey(), entry.getValue());						}					}				}			}			if (ycStateMap != null && !ycStateMap.isEmpty()) {				temp.put("sbzt", "异常");				temp.put("ycStateMap", ycStateMap);			} else {				temp.put("sbzt", "正常");			}			temp.put("ledStateMap", ledStateMap);			temp.put("stationList", stationList);		}		// 返回到前台的电子站牌		List<Map<String, Object>> resultLedList = new ArrayList<>();		// 判断是否有站点或线路做条件查询		if (!StringUtils.isEmpty(zdbh) || !StringUtils.isEmpty(xlbh)) {			if (returnLedList != null && !returnLedList.isEmpty()) {				for (String temp : returnLedList) {					for (Map<String, Object> map : ledStateList) {						if (map.get("ledid").equals(temp)) {							resultLedList.add(map);						}					}				}			}		} else {			resultLedList.addAll(ledStateList);		}		// 返回到controller的数据集合		List<Map<String, Object>> trueLedList = new ArrayList<>();		// 筛选设备状态的数据显示 sbzt: 0:正常， 1:异常		if (paramMap.containsKey("sbzt") && paramMap.get("sbzt").equals("0")) {			for (Map<String, Object> temp : resultLedList) {				if (!temp.containsKey("ycStateMap")) {					trueLedList.add(temp);				}			}		} else if (paramMap.containsKey("sbzt") && paramMap.get("sbzt").equals("1")) {			for (Map<String, Object> temp : resultLedList) {				if (temp.containsKey("ycStateMap")) {					trueLedList.add(temp);				}			}		} else {			trueLedList.addAll(resultLedList);		}		return trueLedList;	}}