package com.framework.webClient.service;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Map.Entry;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.framework.webClient.service.ILedTemplateManageService;import com.framework.webClient.util.ConstantUtil;import com.framework.webClient.util.StringUtils;import com.framework.webClient.dao.LedAreaAttrDao;import com.framework.webClient.dao.LedAreaCommonsetDao;import com.framework.webClient.dao.LedAreaDao;import com.framework.webClient.dao.LedAreaFileAttrDao;import com.framework.webClient.dao.LedAreaFileDao;import com.framework.webClient.dao.LedTemplateAreaDao;import com.framework.webClient.dao.LedTemplateDao;/** * @author 吉庆 * @date Fri Aug 17 00:00:00 CST 2018 */@Servicepublic class LedTemplateManageServiceImpl implements ILedTemplateManageService {	@Autowired(required = true)	private LedTemplateDao ledtemplatedao;		@Autowired(required = true)	private LedTemplateAreaDao ledTemplateAreaDao;		@Autowired(required = true)	private LedAreaDao ledAreaDao;		@Autowired(required = true)	private LedAreaAttrDao ledAreaAttrDao;	@Autowired(required = true)	private LedAreaCommonsetDao ledAreaCommonsetDao;		@Autowired(required = true)	private LedAreaFileDao ledAreaFileDao;		@Autowired(required = true)	private LedAreaFileAttrDao ledAreaFileAttrDao;		/**	 * 通过Id查询详细信息	 * 	 * @param id	 *            id编号	 */	@Override	public List<Map<String, Object>> selectLedTemplateByInfo(Map<String, Object> paramMap) {		return ledtemplatedao.selectLedTemplateByInfo(paramMap);	}	/**	 * 通过Id删除该条数据	 * 	 * @param id	 *            id编号	 */	@Override	public int deleteLedTemplateById(String mbid) {		Map<String, Object> paramMap = new HashMap<>();		paramMap.put("mbid", mbid);		// 根据模版ID分区文件		ledAreaFileDao.deleteLedAreaFileById(paramMap);		// 根据模版ID分区文件属性		ledAreaFileAttrDao.deleteLedAreaFileAttrById(paramMap);		// 根据模版ID分区属性表		ledAreaAttrDao.deleteLedAreaAttrById(paramMap);		// 根据模版ID分区通用配置		ledAreaCommonsetDao.deleteLedAreaCommonsetById(paramMap);		// 根据模版ID分区表		ledAreaDao.deleteLedAreaById(paramMap);		// 根据模版ID删除模版分区关联表		ledTemplateAreaDao.deleteLedTemplateAreaById(paramMap);		// 删除模版表数据		int flag = ledtemplatedao.deleteLedTemplateById(mbid);		return flag;	}	/**	 * 通过Id修改该条数据	 * 	 * @param model	 *            实体封装类	 */	@Override	public int updateLedTemplateById(Map<String, Object> paramMap) {		return ledtemplatedao.updateLedTemplateById(paramMap);	}	/**	 * 新增一条数据	 * 	 * @param model	 *            实体封装类	 */	@Override	public int insertLedTemplate(Map<String, Object> paramMap) {		return ledtemplatedao.insertLedTemplate(paramMap);	}	/**	 * 	 * 分居模版ID和分区类型查询分区区域设置信息)	 * 	 * @param mbid 模版ID	 * @param fqlx 分区类型	 * @return	 */	@Override	public Map<String, Object> selectQyszByMbidAndFqlx(Map<String, Object> paramMap) {		Map<String, Object> returnMap = new HashMap<>();		List<Map<String, Object>> returnList = new ArrayList<>();		if (paramMap == null || paramMap.isEmpty()) {			returnMap.put("dataList", returnList);			returnMap.put(ConstantUtil.STATUS, ConstantUtil.STATUS_ZERO);			return returnMap;		} 		// 根据模版ID查询分区列表		List<String> fqidList = ledtemplatedao.selectFqidByMbidOrMcOrBh(paramMap);		if (fqidList == null || fqidList.isEmpty()) {			returnMap.put("dataList", returnList);			returnMap.put(ConstantUtil.STATUS, ConstantUtil.STATUS_FUONE);			return returnMap;		}		for (String fqid : fqidList) {			// 拦截查询到的fqid是null的情况			if (fqid == null) {				break;			}			paramMap.put("fqid", fqid);			Map<String, Object> resultMap = new HashMap<>();			// 查询区域信息和区域样式信息			List<Map<String, Object>> dataList = ledtemplatedao.selectQyszByMbidAndFqlx(paramMap);			if (dataList != null && !dataList.isEmpty()) {				int i = 0;				for (Map<String, Object> tempMap : dataList) {					if (i == 0) {						resultMap.putAll(tempMap);						resultMap.remove("csmc");						resultMap.remove("cssz");						resultMap.put(String.valueOf(tempMap.get("csmc")), tempMap.get("cssz"));						i++;					} else {						resultMap.put(String.valueOf(tempMap.get("csmc")), tempMap.get("cssz"));					}				}			}			// 查询文件，图片，视频上传信息			Map<String, Object> fileIdMap = new HashMap<>();			List<String> fileIdList = ledtemplatedao.selectFileidByMbidAndFqlx(paramMap);			List<Map<String, Object>> fileList = ledtemplatedao.selectFileInfoByMbidAndFqlx(paramMap);			if (fileIdList != null && !fileIdList.isEmpty() && fileList != null && !fileList.isEmpty()) {				for (String key : fileIdList) {					List<Map<String, Object>> resultList = new ArrayList<>();					for (Map<String, Object> temp : fileList) {						if (key.equals(temp.get("fileid"))) {							resultList.add(temp);						}					}					fileIdMap.put(key, resultList);				}				// 行转列				List<Map<String, Object>> showFileList = new ArrayList<>();				for (Entry<String, Object> entry : fileIdMap.entrySet()) {					@SuppressWarnings("unchecked")					List<Map<String, Object>> tempList = (List<Map<String, Object>>) entry.getValue();					int j = 0;					Map<String, Object> fileMaps = new HashMap<>();					for (Map<String, Object> tempMap : tempList) {						if (j == 0) {							fileMaps.putAll(tempMap);							fileMaps.remove("csmc");							fileMaps.remove("cssz");							fileMaps.put(String.valueOf(tempMap.get("csmc")), tempMap.get("cssz"));							j++;						} else {							fileMaps.put(String.valueOf(tempMap.get("csmc")), tempMap.get("cssz"));						}					}					showFileList.add(fileMaps);				}				resultMap.put("fileList", showFileList);			}			returnList.add(resultMap);		}		returnMap.put("dataList", returnList);		returnMap.put(ConstantUtil.STATUS, ConstantUtil.STATUS_ONE);		return returnMap;	}	/**	 * 	 * 保存模版详情设置数据	 * 	 * @param mbid 模版ID	 * @return	 */	@SuppressWarnings("unchecked")	@Override	public Map<String, Object> saveMbinfo(Map<String, Object> paramMap) {		Map<String, Object> resultMap = new HashMap<>();		try {			Map<String, Object> valMap = new HashMap<>();			// 校验是否重复模版名称和模版编号			valMap.put("tag", "tag");			valMap.put("mbmc", paramMap.get("mbmc"));			List<Map<String, Object>> mbmcList = ledtemplatedao.selectLedTemplateByInfo(valMap);			valMap.remove("mbmc");			valMap.put("mbbh", paramMap.get("mbbh"));			List<Map<String, Object>> mbbhList = ledtemplatedao.selectLedTemplateByInfo(valMap);			// 1、执行数据删除			// 判断是更新还是删除			if (paramMap.containsKey("addType")) {				if (mbmcList != null && !mbmcList.isEmpty()) {					resultMap.put(ConstantUtil.STATUS, ConstantUtil.STATUS_ZERO);					resultMap.put(ConstantUtil.MSG, "模版名称已存在，请更换！");					return resultMap;				}				if (mbbhList != null && !mbbhList.isEmpty()) {					resultMap.put(ConstantUtil.STATUS, ConstantUtil.STATUS_ZERO);					resultMap.put(ConstantUtil.MSG, "模版编号已存在，请更换！");					return resultMap;				}				ledtemplatedao.insertLedTemplate(paramMap);			} else {				if (mbmcList != null && !mbmcList.isEmpty()) {					for (Map<String, Object> temp : mbmcList) {						if (!temp.get("mbid").equals(paramMap.get("mbid"))) {							resultMap.put(ConstantUtil.STATUS, ConstantUtil.STATUS_ZERO);							resultMap.put(ConstantUtil.MSG, "模版名称已存在，请更换！");							return resultMap;						}					}				}				if (mbbhList != null && !mbbhList.isEmpty()) {					for (Map<String, Object> temp : mbbhList) {						if (!temp.get("mbid").equals(paramMap.get("mbid"))) {							resultMap.put(ConstantUtil.STATUS, ConstantUtil.STATUS_ZERO);							resultMap.put(ConstantUtil.MSG, "模版编号已存在，请更换！");							return resultMap;						}					}				}				// 更新模版表				ledtemplatedao.updateLedTemplateById(paramMap);			}			// 根据模版ID分区属性表			ledAreaAttrDao.deleteLedAreaAttrById(paramMap);			// 根据模版ID分区通用配置			ledAreaCommonsetDao.deleteLedAreaCommonsetById(paramMap);			// 根据模版ID分区文件属性			ledAreaFileAttrDao.deleteLedAreaFileAttrById(paramMap);			// 根据模版ID分区文件			ledAreaFileDao.deleteLedAreaFileById(paramMap);			// 根据模版ID分区表			ledAreaDao.deleteLedAreaById(paramMap);			// 根据模版ID删除模版分区关联表			ledTemplateAreaDao.deleteLedTemplateAreaById(paramMap);						// 2、整理数据，用来进行执行新增操作 			// 存放分区表数据			List<Map<String, Object>> ledAreaList = new ArrayList<>();			// 存放模版分区关联表数据			List<Map<String, Object>> ledTempAreaList = new ArrayList<>();			// 分区数据			List<Map<String, Object>> dataList = (List<Map<String, Object>>) paramMap.get("dataList");			for (Map<String, Object> temp : dataList) {				// 整理分区表数据				Map<String, Object> ledAreaMap = new HashMap<>();				ledAreaMap.put("fqid", temp.get("fqid"));				ledAreaMap.put("fqlx", temp.get("fqlx"));				ledAreaMap.put("wjid", "4");				ledAreaList.add(ledAreaMap);				// 整理分区模版关联表数据				Map<String, Object> ledTempAreaMap = new HashMap<>();				ledTempAreaMap.put("fqid", temp.get("fqid"));				ledTempAreaMap.put("mbid", paramMap.get("mbid"));				ledTempAreaList.add(ledTempAreaMap);				// 整理分区属性表数据				Map<String, Object> ledAttrMap = (Map<String, Object>) temp.get("ledAttr");				List<Map<String, Object>> ledAttrList = new ArrayList<>();				for(Map.Entry<String, Object> entry : ledAttrMap.entrySet()){					Map<String, Object> tempMap = new HashMap<>();					tempMap.put("sxmc", entry.getKey());					tempMap.put("sxz",  entry.getValue());					tempMap.put("fqid", temp.get("fqid"));					if (ConstantUtil.LED_ATTR_COMMONSET_MAP.containsKey(entry.getKey())) {						tempMap.put("wjid", ConstantUtil.LED_ATTR_COMMONSET_MAP.get(entry.getKey()));					}					ledAttrList.add(tempMap);				}				if (ledAttrList != null && !ledAttrList.isEmpty()) {					// 新建分区属性表数据 					ledAreaAttrDao.insertLedAreaAttr(ledAttrList);				}				// 整理分区通用表数据				Map<String, Object> ledCommonsetMap = (Map<String, Object>) temp.get("ledCommonset");				List<Map<String, Object>> ledCommonsetList = new ArrayList<>();				for(Map.Entry<String, Object> entry : ledCommonsetMap.entrySet()){					Map<String, Object> tempMap = new HashMap<>();					tempMap.put("pzmc", entry.getKey());					tempMap.put("pzz",  entry.getValue());					tempMap.put("fqid", temp.get("fqid"));					if (ConstantUtil.LED_ATTR_COMMONSET_MAP.containsKey(entry.getKey())) {						tempMap.put("wjid", ConstantUtil.LED_ATTR_COMMONSET_MAP.get(entry.getKey()));					}					ledCommonsetList.add(tempMap);				}				if (ledCommonsetList != null && !ledCommonsetList.isEmpty()) {					// 新建分区通用配置数据 					ledAreaCommonsetDao.insertLedAreaCommonset(ledCommonsetList);				}				// 整理分区文件和分区文件属性数据				List<Map<String, Object>> ledFile = (List<Map<String, Object>>) temp.get("ledFile");				List<Map<String, Object>> ledFileList = new ArrayList<>();				List<Map<String, Object>> ledFileAttrList = new ArrayList<>();				for (Map<String, Object> fileTempMap : ledFile) {					Map<String, Object> fileMap = new HashMap<>();					String fileid = null;					if (fileTempMap.containsKey("fileid")) {						fileid = String.valueOf(fileTempMap.get("fileid"));					} else {						String filepath = String.valueOf(fileTempMap.get("file-path"));						fileid = filepath.substring(filepath.lastIndexOf("/") + 1, filepath.lastIndexOf("."));					}					fileMap.put("wjid", fileid);					fileMap.put("fqid", temp.get("fqid"));					fileMap.put("xh", fileTempMap.get("xh"));					if (!StringUtils.isEmpty(String.valueOf(fileTempMap.get("text")))) {						Map<String, Object> fileAttrMap = new HashMap<>();						fileAttrMap.put("wjid", fileid);						fileAttrMap.put("fqid", temp.get("fqid"));						fileAttrMap.put("sxmc", "text");						fileAttrMap.put("sxz", String.valueOf(fileTempMap.get("text")));						ledFileAttrList.add(fileAttrMap);					}					if (!StringUtils.isEmpty(String.valueOf(fileTempMap.get("file-path")))) {						Map<String, Object> fileAttrMap = new HashMap<>();						fileAttrMap.put("wjid", fileid);						fileAttrMap.put("fqid", temp.get("fqid"));						fileAttrMap.put("sxmc", "file-path");						fileAttrMap.put("sxz", String.valueOf(fileTempMap.get("file-path")));						ledFileAttrList.add(fileAttrMap);					}					if (!StringUtils.isEmpty(String.valueOf(fileTempMap.get("fileSize")))) {						Map<String, Object> fileAttrMap = new HashMap<>();						fileAttrMap.put("wjid", fileid);						fileAttrMap.put("fqid", temp.get("fqid"));						fileAttrMap.put("sxmc", "fileSize");						fileAttrMap.put("sxz", String.valueOf(fileTempMap.get("fileSize")));						ledFileAttrList.add(fileAttrMap);					}					if (!StringUtils.isEmpty(String.valueOf(fileTempMap.get("cron")))) {						Map<String, Object> fileAttrMap = new HashMap<>();						fileAttrMap.put("wjid", fileid);						fileAttrMap.put("fqid", temp.get("fqid"));						fileAttrMap.put("sxmc", "cron");						fileAttrMap.put("sxz", String.valueOf(fileTempMap.get("cron")));						ledFileAttrList.add(fileAttrMap);					}					if (!StringUtils.isEmpty(String.valueOf(fileTempMap.get("font-color")))) {						Map<String, Object> fileAttrMap = new HashMap<>();						fileAttrMap.put("wjid", fileid);						fileAttrMap.put("fqid", temp.get("fqid"));						fileAttrMap.put("sxmc", "font-color");						fileAttrMap.put("sxz", String.valueOf(fileTempMap.get("font-color")));						ledFileAttrList.add(fileAttrMap);					}					if (!StringUtils.isEmpty(String.valueOf(fileTempMap.get("font-size")))) {						Map<String, Object> fileAttrMap = new HashMap<>();						fileAttrMap.put("wjid", fileid);						fileAttrMap.put("fqid", temp.get("fqid"));						fileAttrMap.put("sxmc", "font-size");						fileAttrMap.put("sxz", String.valueOf(fileTempMap.get("font-size")));						fileAttrMap.put("wjidz", ConstantUtil.LED_ATTR_COMMONSET_MAP.get("font-size"));						ledFileAttrList.add(fileAttrMap);					}					if (!StringUtils.isEmpty(String.valueOf(fileTempMap.get("font-style")))) {						Map<String, Object> fileAttrMap = new HashMap<>();						fileAttrMap.put("wjid", fileid);						fileAttrMap.put("fqid", temp.get("fqid"));						fileAttrMap.put("sxmc", "font-style");						fileAttrMap.put("sxz", String.valueOf(fileTempMap.get("font-style")));						fileAttrMap.put("wjidz", ConstantUtil.LED_ATTR_COMMONSET_MAP.get("font-style"));						ledFileAttrList.add(fileAttrMap);					}					if (!StringUtils.isEmpty(String.valueOf(fileTempMap.get("font-weight")))) {						Map<String, Object> fileAttrMap = new HashMap<>();						fileAttrMap.put("wjid", fileid);						fileAttrMap.put("fqid", temp.get("fqid"));						fileAttrMap.put("sxmc", "font-weight");						fileAttrMap.put("sxz", String.valueOf(fileTempMap.get("font-weight")));						fileAttrMap.put("wjidz", ConstantUtil.LED_ATTR_COMMONSET_MAP.get("font-weight"));						ledFileAttrList.add(fileAttrMap);					}					if (!StringUtils.isEmpty(String.valueOf(fileTempMap.get("move-speed")))) {						Map<String, Object> fileAttrMap = new HashMap<>();						fileAttrMap.put("wjid", fileid);						fileAttrMap.put("fqid", temp.get("fqid"));						fileAttrMap.put("sxmc", "move-speed");						fileAttrMap.put("sxz", String.valueOf(fileTempMap.get("move-speed")));						fileAttrMap.put("wjidz", ConstantUtil.LED_ATTR_COMMONSET_MAP.get("move-speed"));						ledFileAttrList.add(fileAttrMap);					}					if (!StringUtils.isEmpty(String.valueOf(fileTempMap.get("replay-count")))) {						Map<String, Object> fileAttrMap = new HashMap<>();						fileAttrMap.put("wjid", fileid);						fileAttrMap.put("fqid", temp.get("fqid"));						fileAttrMap.put("sxmc", "replay-count");						fileAttrMap.put("sxz", String.valueOf(fileTempMap.get("replay-count")));						fileAttrMap.put("wjidz", ConstantUtil.LED_ATTR_COMMONSET_MAP.get("replay-count"));						ledFileAttrList.add(fileAttrMap);					}					if (!StringUtils.isEmpty(String.valueOf(fileTempMap.get("show-style")))) {						Map<String, Object> fileAttrMap = new HashMap<>();						fileAttrMap.put("wjid", fileid);						fileAttrMap.put("fqid", temp.get("fqid"));						fileAttrMap.put("sxmc", "show-style");						fileAttrMap.put("sxz", String.valueOf(fileTempMap.get("show-style")));						fileAttrMap.put("wjidz", ConstantUtil.LED_ATTR_COMMONSET_MAP.get("show-style"));						ledFileAttrList.add(fileAttrMap);					}					if (!StringUtils.isEmpty(String.valueOf(fileTempMap.get("show-time")))) {						Map<String, Object> fileAttrMap = new HashMap<>();						fileAttrMap.put("wjid", fileid);						fileAttrMap.put("fqid", temp.get("fqid"));						fileAttrMap.put("sxmc", "show-time");						fileAttrMap.put("sxz", String.valueOf(fileTempMap.get("show-time")));						ledFileAttrList.add(fileAttrMap);					}					if (!StringUtils.isEmpty(String.valueOf(fileTempMap.get("sound-count")))) {						Map<String, Object> fileAttrMap = new HashMap<>();						fileAttrMap.put("wjid", fileid);						fileAttrMap.put("fqid", temp.get("fqid"));						fileAttrMap.put("sxmc", "sound-count");						fileAttrMap.put("sxz", String.valueOf(fileTempMap.get("sound-count")));						fileAttrMap.put("wjidz", ConstantUtil.LED_ATTR_COMMONSET_MAP.get("sound-count"));						ledFileAttrList.add(fileAttrMap);					}					if (!StringUtils.isEmpty(String.valueOf(fileTempMap.get("sound-flag")))) {						Map<String, Object> fileAttrMap = new HashMap<>();						fileAttrMap.put("wjid", fileid);						fileAttrMap.put("fqid", temp.get("fqid"));						fileAttrMap.put("sxmc", "sound-flag");						fileAttrMap.put("sxz", String.valueOf(fileTempMap.get("sound-flag")));						fileAttrMap.put("wjidz", ConstantUtil.LED_ATTR_COMMONSET_MAP.get("sound-flag"));						ledFileAttrList.add(fileAttrMap);					}					if (!StringUtils.isEmpty(String.valueOf(fileTempMap.get("sound-speed")))) {						Map<String, Object> fileAttrMap = new HashMap<>();						fileAttrMap.put("wjid", fileid);						fileAttrMap.put("fqid", temp.get("fqid"));						fileAttrMap.put("sxmc", "sound-speed");						fileAttrMap.put("sxz", String.valueOf(fileTempMap.get("sound-speed")));						fileAttrMap.put("wjidz", ConstantUtil.LED_ATTR_COMMONSET_MAP.get("sound-speed"));						ledFileAttrList.add(fileAttrMap);					}					if (!StringUtils.isEmpty(String.valueOf(fileTempMap.get("sound-volume")))) {						Map<String, Object> fileAttrMap = new HashMap<>();						fileAttrMap.put("wjid", fileid);						fileAttrMap.put("fqid", temp.get("fqid"));						fileAttrMap.put("sxmc", "sound-volume");						fileAttrMap.put("sxz", String.valueOf(fileTempMap.get("sound-volume")));						fileAttrMap.put("wjidz", ConstantUtil.LED_ATTR_COMMONSET_MAP.get("sound-volume"));						ledFileAttrList.add(fileAttrMap);					}					ledFileList.add(fileMap);				}				if (ledFileList != null && !ledFileList.isEmpty()) {					// 新建分区文件数据 					ledAreaFileDao.insertLedAreaFile(ledFileList);					if (ledFileAttrList != null && !ledFileAttrList.isEmpty()) {						// 新建分区文件属性数据 						ledAreaFileAttrDao.insertLedAreaFileAttr(ledFileAttrList);					}				}			}			if (ledTempAreaList != null && !ledTempAreaList.isEmpty()) {				// 新建模版分区关联表数据 				ledTemplateAreaDao.insertLedTemplateArea(ledTempAreaList);				if (ledAreaList != null && !ledAreaList.isEmpty()) {					// 新建分区表数据					ledAreaDao.insertLedArea(ledAreaList);				}			}			resultMap.put(ConstantUtil.STATUS, ConstantUtil.STATUS_ONE);		} catch (Exception e) {			resultMap.put(ConstantUtil.STATUS, ConstantUtil.STATUS_FUONE);		}		return resultMap;	}	/**	 * 查询分区模版下拉列表	 */	@Override	public List<Map<String, Object>> selectTemplateList() {		return ledtemplatedao.selectTemplateList();	}}