/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.framework.webClient.dispatch.up.bean;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-04-24")
public class KLSJNEWDTO implements org.apache.thrift.TBase<KLSJNEWDTO, KLSJNEWDTO._Fields>, java.io.Serializable, Cloneable, Comparable<KLSJNEWDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KLSJNEWDTO");

  private static final org.apache.thrift.protocol.TField ACTION_CMDTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("actionCMDType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField XLID_FIELD_DESC = new org.apache.thrift.protocol.TField("xlid", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField XLBH_FIELD_DESC = new org.apache.thrift.protocol.TField("xlbh", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField XLMC_FIELD_DESC = new org.apache.thrift.protocol.TField("xlmc", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CLID_FIELD_DESC = new org.apache.thrift.protocol.TField("clid", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField EMP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("empId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SBSXZCH_FIELD_DESC = new org.apache.thrift.protocol.TField("sbsxzch", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SCSJ_FIELD_DESC = new org.apache.thrift.protocol.TField("scsj", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField SXXBS_FIELD_DESC = new org.apache.thrift.protocol.TField("sxxbs", org.apache.thrift.protocol.TType.BYTE, (short)9);
  private static final org.apache.thrift.protocol.TField DQZH_FIELD_DESC = new org.apache.thrift.protocol.TField("dqzh", org.apache.thrift.protocol.TType.I16, (short)10);
  private static final org.apache.thrift.protocol.TField DQCKS_FIELD_DESC = new org.apache.thrift.protocol.TField("dqcks", org.apache.thrift.protocol.TType.I16, (short)11);
  private static final org.apache.thrift.protocol.TField ZDDL_FIELD_DESC = new org.apache.thrift.protocol.TField("zddl", org.apache.thrift.protocol.TType.I16, (short)12);
  private static final org.apache.thrift.protocol.TField ZDJL_FIELD_DESC = new org.apache.thrift.protocol.TField("zdjl", org.apache.thrift.protocol.TType.I16, (short)13);
  private static final org.apache.thrift.protocol.TField BFBS_FIELD_DESC = new org.apache.thrift.protocol.TField("bfbs", org.apache.thrift.protocol.TType.BYTE, (short)14);
  private static final org.apache.thrift.protocol.TField KLSJZS_FIELD_DESC = new org.apache.thrift.protocol.TField("klsjzs", org.apache.thrift.protocol.TType.BYTE, (short)15);
  private static final org.apache.thrift.protocol.TField KLSJNEW_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("KLSJNewList", org.apache.thrift.protocol.TType.LIST, (short)16);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new KLSJNEWDTOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new KLSJNEWDTOTupleSchemeFactory();

  /**
   * 
   * @see ActionCMDType
   */
  public ActionCMDType actionCMDType; // required
  public java.lang.String xlid; // required
  public java.lang.String xlbh; // required
  public java.lang.String xlmc; // required
  public java.lang.String clid; // required
  public java.lang.String empId; // required
  public java.lang.String sbsxzch; // required
  public int scsj; // required
  public byte sxxbs; // required
  public short dqzh; // required
  public short dqcks; // required
  public short zddl; // required
  public short zdjl; // required
  public byte bfbs; // required
  public byte klsjzs; // required
  public java.util.List<KLNEWDTO> KLSJNewList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see ActionCMDType
     */
    ACTION_CMDTYPE((short)1, "actionCMDType"),
    XLID((short)2, "xlid"),
    XLBH((short)3, "xlbh"),
    XLMC((short)4, "xlmc"),
    CLID((short)5, "clid"),
    EMP_ID((short)6, "empId"),
    SBSXZCH((short)7, "sbsxzch"),
    SCSJ((short)8, "scsj"),
    SXXBS((short)9, "sxxbs"),
    DQZH((short)10, "dqzh"),
    DQCKS((short)11, "dqcks"),
    ZDDL((short)12, "zddl"),
    ZDJL((short)13, "zdjl"),
    BFBS((short)14, "bfbs"),
    KLSJZS((short)15, "klsjzs"),
    KLSJNEW_LIST((short)16, "KLSJNewList");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACTION_CMDTYPE
          return ACTION_CMDTYPE;
        case 2: // XLID
          return XLID;
        case 3: // XLBH
          return XLBH;
        case 4: // XLMC
          return XLMC;
        case 5: // CLID
          return CLID;
        case 6: // EMP_ID
          return EMP_ID;
        case 7: // SBSXZCH
          return SBSXZCH;
        case 8: // SCSJ
          return SCSJ;
        case 9: // SXXBS
          return SXXBS;
        case 10: // DQZH
          return DQZH;
        case 11: // DQCKS
          return DQCKS;
        case 12: // ZDDL
          return ZDDL;
        case 13: // ZDJL
          return ZDJL;
        case 14: // BFBS
          return BFBS;
        case 15: // KLSJZS
          return KLSJZS;
        case 16: // KLSJNEW_LIST
          return KLSJNEW_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SCSJ_ISSET_ID = 0;
  private static final int __SXXBS_ISSET_ID = 1;
  private static final int __DQZH_ISSET_ID = 2;
  private static final int __DQCKS_ISSET_ID = 3;
  private static final int __ZDDL_ISSET_ID = 4;
  private static final int __ZDJL_ISSET_ID = 5;
  private static final int __BFBS_ISSET_ID = 6;
  private static final int __KLSJZS_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACTION_CMDTYPE, new org.apache.thrift.meta_data.FieldMetaData("actionCMDType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ActionCMDType.class)));
    tmpMap.put(_Fields.XLID, new org.apache.thrift.meta_data.FieldMetaData("xlid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.XLBH, new org.apache.thrift.meta_data.FieldMetaData("xlbh", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.XLMC, new org.apache.thrift.meta_data.FieldMetaData("xlmc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLID, new org.apache.thrift.meta_data.FieldMetaData("clid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMP_ID, new org.apache.thrift.meta_data.FieldMetaData("empId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SBSXZCH, new org.apache.thrift.meta_data.FieldMetaData("sbsxzch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCSJ, new org.apache.thrift.meta_data.FieldMetaData("scsj", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SXXBS, new org.apache.thrift.meta_data.FieldMetaData("sxxbs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.DQZH, new org.apache.thrift.meta_data.FieldMetaData("dqzh", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.DQCKS, new org.apache.thrift.meta_data.FieldMetaData("dqcks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.ZDDL, new org.apache.thrift.meta_data.FieldMetaData("zddl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.ZDJL, new org.apache.thrift.meta_data.FieldMetaData("zdjl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.BFBS, new org.apache.thrift.meta_data.FieldMetaData("bfbs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.KLSJZS, new org.apache.thrift.meta_data.FieldMetaData("klsjzs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.KLSJNEW_LIST, new org.apache.thrift.meta_data.FieldMetaData("KLSJNewList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KLNEWDTO.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KLSJNEWDTO.class, metaDataMap);
  }

  public KLSJNEWDTO() {
  }

  public KLSJNEWDTO(
    ActionCMDType actionCMDType,
    java.lang.String xlid,
    java.lang.String xlbh,
    java.lang.String xlmc,
    java.lang.String clid,
    java.lang.String empId,
    java.lang.String sbsxzch,
    int scsj,
    byte sxxbs,
    short dqzh,
    short dqcks,
    short zddl,
    short zdjl,
    byte bfbs,
    byte klsjzs,
    java.util.List<KLNEWDTO> KLSJNewList)
  {
    this();
    this.actionCMDType = actionCMDType;
    this.xlid = xlid;
    this.xlbh = xlbh;
    this.xlmc = xlmc;
    this.clid = clid;
    this.empId = empId;
    this.sbsxzch = sbsxzch;
    this.scsj = scsj;
    setScsjIsSet(true);
    this.sxxbs = sxxbs;
    setSxxbsIsSet(true);
    this.dqzh = dqzh;
    setDqzhIsSet(true);
    this.dqcks = dqcks;
    setDqcksIsSet(true);
    this.zddl = zddl;
    setZddlIsSet(true);
    this.zdjl = zdjl;
    setZdjlIsSet(true);
    this.bfbs = bfbs;
    setBfbsIsSet(true);
    this.klsjzs = klsjzs;
    setKlsjzsIsSet(true);
    this.KLSJNewList = KLSJNewList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public KLSJNEWDTO(KLSJNEWDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetActionCMDType()) {
      this.actionCMDType = other.actionCMDType;
    }
    if (other.isSetXlid()) {
      this.xlid = other.xlid;
    }
    if (other.isSetXlbh()) {
      this.xlbh = other.xlbh;
    }
    if (other.isSetXlmc()) {
      this.xlmc = other.xlmc;
    }
    if (other.isSetClid()) {
      this.clid = other.clid;
    }
    if (other.isSetEmpId()) {
      this.empId = other.empId;
    }
    if (other.isSetSbsxzch()) {
      this.sbsxzch = other.sbsxzch;
    }
    this.scsj = other.scsj;
    this.sxxbs = other.sxxbs;
    this.dqzh = other.dqzh;
    this.dqcks = other.dqcks;
    this.zddl = other.zddl;
    this.zdjl = other.zdjl;
    this.bfbs = other.bfbs;
    this.klsjzs = other.klsjzs;
    if (other.isSetKLSJNewList()) {
      java.util.List<KLNEWDTO> __this__KLSJNewList = new java.util.ArrayList<KLNEWDTO>(other.KLSJNewList.size());
      for (KLNEWDTO other_element : other.KLSJNewList) {
        __this__KLSJNewList.add(new KLNEWDTO(other_element));
      }
      this.KLSJNewList = __this__KLSJNewList;
    }
  }

  public KLSJNEWDTO deepCopy() {
    return new KLSJNEWDTO(this);
  }

  @Override
  public void clear() {
    this.actionCMDType = null;
    this.xlid = null;
    this.xlbh = null;
    this.xlmc = null;
    this.clid = null;
    this.empId = null;
    this.sbsxzch = null;
    setScsjIsSet(false);
    this.scsj = 0;
    setSxxbsIsSet(false);
    this.sxxbs = 0;
    setDqzhIsSet(false);
    this.dqzh = 0;
    setDqcksIsSet(false);
    this.dqcks = 0;
    setZddlIsSet(false);
    this.zddl = 0;
    setZdjlIsSet(false);
    this.zdjl = 0;
    setBfbsIsSet(false);
    this.bfbs = 0;
    setKlsjzsIsSet(false);
    this.klsjzs = 0;
    this.KLSJNewList = null;
  }

  /**
   * 
   * @see ActionCMDType
   */
  public ActionCMDType getActionCMDType() {
    return this.actionCMDType;
  }

  /**
   * 
   * @see ActionCMDType
   */
  public KLSJNEWDTO setActionCMDType(ActionCMDType actionCMDType) {
    this.actionCMDType = actionCMDType;
    return this;
  }

  public void unsetActionCMDType() {
    this.actionCMDType = null;
  }

  /** Returns true if field actionCMDType is set (has been assigned a value) and false otherwise */
  public boolean isSetActionCMDType() {
    return this.actionCMDType != null;
  }

  public void setActionCMDTypeIsSet(boolean value) {
    if (!value) {
      this.actionCMDType = null;
    }
  }

  public java.lang.String getXlid() {
    return this.xlid;
  }

  public KLSJNEWDTO setXlid(java.lang.String xlid) {
    this.xlid = xlid;
    return this;
  }

  public void unsetXlid() {
    this.xlid = null;
  }

  /** Returns true if field xlid is set (has been assigned a value) and false otherwise */
  public boolean isSetXlid() {
    return this.xlid != null;
  }

  public void setXlidIsSet(boolean value) {
    if (!value) {
      this.xlid = null;
    }
  }

  public java.lang.String getXlbh() {
    return this.xlbh;
  }

  public KLSJNEWDTO setXlbh(java.lang.String xlbh) {
    this.xlbh = xlbh;
    return this;
  }

  public void unsetXlbh() {
    this.xlbh = null;
  }

  /** Returns true if field xlbh is set (has been assigned a value) and false otherwise */
  public boolean isSetXlbh() {
    return this.xlbh != null;
  }

  public void setXlbhIsSet(boolean value) {
    if (!value) {
      this.xlbh = null;
    }
  }

  public java.lang.String getXlmc() {
    return this.xlmc;
  }

  public KLSJNEWDTO setXlmc(java.lang.String xlmc) {
    this.xlmc = xlmc;
    return this;
  }

  public void unsetXlmc() {
    this.xlmc = null;
  }

  /** Returns true if field xlmc is set (has been assigned a value) and false otherwise */
  public boolean isSetXlmc() {
    return this.xlmc != null;
  }

  public void setXlmcIsSet(boolean value) {
    if (!value) {
      this.xlmc = null;
    }
  }

  public java.lang.String getClid() {
    return this.clid;
  }

  public KLSJNEWDTO setClid(java.lang.String clid) {
    this.clid = clid;
    return this;
  }

  public void unsetClid() {
    this.clid = null;
  }

  /** Returns true if field clid is set (has been assigned a value) and false otherwise */
  public boolean isSetClid() {
    return this.clid != null;
  }

  public void setClidIsSet(boolean value) {
    if (!value) {
      this.clid = null;
    }
  }

  public java.lang.String getEmpId() {
    return this.empId;
  }

  public KLSJNEWDTO setEmpId(java.lang.String empId) {
    this.empId = empId;
    return this;
  }

  public void unsetEmpId() {
    this.empId = null;
  }

  /** Returns true if field empId is set (has been assigned a value) and false otherwise */
  public boolean isSetEmpId() {
    return this.empId != null;
  }

  public void setEmpIdIsSet(boolean value) {
    if (!value) {
      this.empId = null;
    }
  }

  public java.lang.String getSbsxzch() {
    return this.sbsxzch;
  }

  public KLSJNEWDTO setSbsxzch(java.lang.String sbsxzch) {
    this.sbsxzch = sbsxzch;
    return this;
  }

  public void unsetSbsxzch() {
    this.sbsxzch = null;
  }

  /** Returns true if field sbsxzch is set (has been assigned a value) and false otherwise */
  public boolean isSetSbsxzch() {
    return this.sbsxzch != null;
  }

  public void setSbsxzchIsSet(boolean value) {
    if (!value) {
      this.sbsxzch = null;
    }
  }

  public int getScsj() {
    return this.scsj;
  }

  public KLSJNEWDTO setScsj(int scsj) {
    this.scsj = scsj;
    setScsjIsSet(true);
    return this;
  }

  public void unsetScsj() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCSJ_ISSET_ID);
  }

  /** Returns true if field scsj is set (has been assigned a value) and false otherwise */
  public boolean isSetScsj() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCSJ_ISSET_ID);
  }

  public void setScsjIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCSJ_ISSET_ID, value);
  }

  public byte getSxxbs() {
    return this.sxxbs;
  }

  public KLSJNEWDTO setSxxbs(byte sxxbs) {
    this.sxxbs = sxxbs;
    setSxxbsIsSet(true);
    return this;
  }

  public void unsetSxxbs() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SXXBS_ISSET_ID);
  }

  /** Returns true if field sxxbs is set (has been assigned a value) and false otherwise */
  public boolean isSetSxxbs() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SXXBS_ISSET_ID);
  }

  public void setSxxbsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SXXBS_ISSET_ID, value);
  }

  public short getDqzh() {
    return this.dqzh;
  }

  public KLSJNEWDTO setDqzh(short dqzh) {
    this.dqzh = dqzh;
    setDqzhIsSet(true);
    return this;
  }

  public void unsetDqzh() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DQZH_ISSET_ID);
  }

  /** Returns true if field dqzh is set (has been assigned a value) and false otherwise */
  public boolean isSetDqzh() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DQZH_ISSET_ID);
  }

  public void setDqzhIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DQZH_ISSET_ID, value);
  }

  public short getDqcks() {
    return this.dqcks;
  }

  public KLSJNEWDTO setDqcks(short dqcks) {
    this.dqcks = dqcks;
    setDqcksIsSet(true);
    return this;
  }

  public void unsetDqcks() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DQCKS_ISSET_ID);
  }

  /** Returns true if field dqcks is set (has been assigned a value) and false otherwise */
  public boolean isSetDqcks() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DQCKS_ISSET_ID);
  }

  public void setDqcksIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DQCKS_ISSET_ID, value);
  }

  public short getZddl() {
    return this.zddl;
  }

  public KLSJNEWDTO setZddl(short zddl) {
    this.zddl = zddl;
    setZddlIsSet(true);
    return this;
  }

  public void unsetZddl() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ZDDL_ISSET_ID);
  }

  /** Returns true if field zddl is set (has been assigned a value) and false otherwise */
  public boolean isSetZddl() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ZDDL_ISSET_ID);
  }

  public void setZddlIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ZDDL_ISSET_ID, value);
  }

  public short getZdjl() {
    return this.zdjl;
  }

  public KLSJNEWDTO setZdjl(short zdjl) {
    this.zdjl = zdjl;
    setZdjlIsSet(true);
    return this;
  }

  public void unsetZdjl() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ZDJL_ISSET_ID);
  }

  /** Returns true if field zdjl is set (has been assigned a value) and false otherwise */
  public boolean isSetZdjl() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ZDJL_ISSET_ID);
  }

  public void setZdjlIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ZDJL_ISSET_ID, value);
  }

  public byte getBfbs() {
    return this.bfbs;
  }

  public KLSJNEWDTO setBfbs(byte bfbs) {
    this.bfbs = bfbs;
    setBfbsIsSet(true);
    return this;
  }

  public void unsetBfbs() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BFBS_ISSET_ID);
  }

  /** Returns true if field bfbs is set (has been assigned a value) and false otherwise */
  public boolean isSetBfbs() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BFBS_ISSET_ID);
  }

  public void setBfbsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BFBS_ISSET_ID, value);
  }

  public byte getKlsjzs() {
    return this.klsjzs;
  }

  public KLSJNEWDTO setKlsjzs(byte klsjzs) {
    this.klsjzs = klsjzs;
    setKlsjzsIsSet(true);
    return this;
  }

  public void unsetKlsjzs() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __KLSJZS_ISSET_ID);
  }

  /** Returns true if field klsjzs is set (has been assigned a value) and false otherwise */
  public boolean isSetKlsjzs() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __KLSJZS_ISSET_ID);
  }

  public void setKlsjzsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __KLSJZS_ISSET_ID, value);
  }

  public int getKLSJNewListSize() {
    return (this.KLSJNewList == null) ? 0 : this.KLSJNewList.size();
  }

  public java.util.Iterator<KLNEWDTO> getKLSJNewListIterator() {
    return (this.KLSJNewList == null) ? null : this.KLSJNewList.iterator();
  }

  public void addToKLSJNewList(KLNEWDTO elem) {
    if (this.KLSJNewList == null) {
      this.KLSJNewList = new java.util.ArrayList<KLNEWDTO>();
    }
    this.KLSJNewList.add(elem);
  }

  public java.util.List<KLNEWDTO> getKLSJNewList() {
    return this.KLSJNewList;
  }

  public KLSJNEWDTO setKLSJNewList(java.util.List<KLNEWDTO> KLSJNewList) {
    this.KLSJNewList = KLSJNewList;
    return this;
  }

  public void unsetKLSJNewList() {
    this.KLSJNewList = null;
  }

  /** Returns true if field KLSJNewList is set (has been assigned a value) and false otherwise */
  public boolean isSetKLSJNewList() {
    return this.KLSJNewList != null;
  }

  public void setKLSJNewListIsSet(boolean value) {
    if (!value) {
      this.KLSJNewList = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ACTION_CMDTYPE:
      if (value == null) {
        unsetActionCMDType();
      } else {
        setActionCMDType((ActionCMDType)value);
      }
      break;

    case XLID:
      if (value == null) {
        unsetXlid();
      } else {
        setXlid((java.lang.String)value);
      }
      break;

    case XLBH:
      if (value == null) {
        unsetXlbh();
      } else {
        setXlbh((java.lang.String)value);
      }
      break;

    case XLMC:
      if (value == null) {
        unsetXlmc();
      } else {
        setXlmc((java.lang.String)value);
      }
      break;

    case CLID:
      if (value == null) {
        unsetClid();
      } else {
        setClid((java.lang.String)value);
      }
      break;

    case EMP_ID:
      if (value == null) {
        unsetEmpId();
      } else {
        setEmpId((java.lang.String)value);
      }
      break;

    case SBSXZCH:
      if (value == null) {
        unsetSbsxzch();
      } else {
        setSbsxzch((java.lang.String)value);
      }
      break;

    case SCSJ:
      if (value == null) {
        unsetScsj();
      } else {
        setScsj((java.lang.Integer)value);
      }
      break;

    case SXXBS:
      if (value == null) {
        unsetSxxbs();
      } else {
        setSxxbs((java.lang.Byte)value);
      }
      break;

    case DQZH:
      if (value == null) {
        unsetDqzh();
      } else {
        setDqzh((java.lang.Short)value);
      }
      break;

    case DQCKS:
      if (value == null) {
        unsetDqcks();
      } else {
        setDqcks((java.lang.Short)value);
      }
      break;

    case ZDDL:
      if (value == null) {
        unsetZddl();
      } else {
        setZddl((java.lang.Short)value);
      }
      break;

    case ZDJL:
      if (value == null) {
        unsetZdjl();
      } else {
        setZdjl((java.lang.Short)value);
      }
      break;

    case BFBS:
      if (value == null) {
        unsetBfbs();
      } else {
        setBfbs((java.lang.Byte)value);
      }
      break;

    case KLSJZS:
      if (value == null) {
        unsetKlsjzs();
      } else {
        setKlsjzs((java.lang.Byte)value);
      }
      break;

    case KLSJNEW_LIST:
      if (value == null) {
        unsetKLSJNewList();
      } else {
        setKLSJNewList((java.util.List<KLNEWDTO>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ACTION_CMDTYPE:
      return getActionCMDType();

    case XLID:
      return getXlid();

    case XLBH:
      return getXlbh();

    case XLMC:
      return getXlmc();

    case CLID:
      return getClid();

    case EMP_ID:
      return getEmpId();

    case SBSXZCH:
      return getSbsxzch();

    case SCSJ:
      return getScsj();

    case SXXBS:
      return getSxxbs();

    case DQZH:
      return getDqzh();

    case DQCKS:
      return getDqcks();

    case ZDDL:
      return getZddl();

    case ZDJL:
      return getZdjl();

    case BFBS:
      return getBfbs();

    case KLSJZS:
      return getKlsjzs();

    case KLSJNEW_LIST:
      return getKLSJNewList();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ACTION_CMDTYPE:
      return isSetActionCMDType();
    case XLID:
      return isSetXlid();
    case XLBH:
      return isSetXlbh();
    case XLMC:
      return isSetXlmc();
    case CLID:
      return isSetClid();
    case EMP_ID:
      return isSetEmpId();
    case SBSXZCH:
      return isSetSbsxzch();
    case SCSJ:
      return isSetScsj();
    case SXXBS:
      return isSetSxxbs();
    case DQZH:
      return isSetDqzh();
    case DQCKS:
      return isSetDqcks();
    case ZDDL:
      return isSetZddl();
    case ZDJL:
      return isSetZdjl();
    case BFBS:
      return isSetBfbs();
    case KLSJZS:
      return isSetKlsjzs();
    case KLSJNEW_LIST:
      return isSetKLSJNewList();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof KLSJNEWDTO)
      return this.equals((KLSJNEWDTO)that);
    return false;
  }

  public boolean equals(KLSJNEWDTO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_actionCMDType = true && this.isSetActionCMDType();
    boolean that_present_actionCMDType = true && that.isSetActionCMDType();
    if (this_present_actionCMDType || that_present_actionCMDType) {
      if (!(this_present_actionCMDType && that_present_actionCMDType))
        return false;
      if (!this.actionCMDType.equals(that.actionCMDType))
        return false;
    }

    boolean this_present_xlid = true && this.isSetXlid();
    boolean that_present_xlid = true && that.isSetXlid();
    if (this_present_xlid || that_present_xlid) {
      if (!(this_present_xlid && that_present_xlid))
        return false;
      if (!this.xlid.equals(that.xlid))
        return false;
    }

    boolean this_present_xlbh = true && this.isSetXlbh();
    boolean that_present_xlbh = true && that.isSetXlbh();
    if (this_present_xlbh || that_present_xlbh) {
      if (!(this_present_xlbh && that_present_xlbh))
        return false;
      if (!this.xlbh.equals(that.xlbh))
        return false;
    }

    boolean this_present_xlmc = true && this.isSetXlmc();
    boolean that_present_xlmc = true && that.isSetXlmc();
    if (this_present_xlmc || that_present_xlmc) {
      if (!(this_present_xlmc && that_present_xlmc))
        return false;
      if (!this.xlmc.equals(that.xlmc))
        return false;
    }

    boolean this_present_clid = true && this.isSetClid();
    boolean that_present_clid = true && that.isSetClid();
    if (this_present_clid || that_present_clid) {
      if (!(this_present_clid && that_present_clid))
        return false;
      if (!this.clid.equals(that.clid))
        return false;
    }

    boolean this_present_empId = true && this.isSetEmpId();
    boolean that_present_empId = true && that.isSetEmpId();
    if (this_present_empId || that_present_empId) {
      if (!(this_present_empId && that_present_empId))
        return false;
      if (!this.empId.equals(that.empId))
        return false;
    }

    boolean this_present_sbsxzch = true && this.isSetSbsxzch();
    boolean that_present_sbsxzch = true && that.isSetSbsxzch();
    if (this_present_sbsxzch || that_present_sbsxzch) {
      if (!(this_present_sbsxzch && that_present_sbsxzch))
        return false;
      if (!this.sbsxzch.equals(that.sbsxzch))
        return false;
    }

    boolean this_present_scsj = true;
    boolean that_present_scsj = true;
    if (this_present_scsj || that_present_scsj) {
      if (!(this_present_scsj && that_present_scsj))
        return false;
      if (this.scsj != that.scsj)
        return false;
    }

    boolean this_present_sxxbs = true;
    boolean that_present_sxxbs = true;
    if (this_present_sxxbs || that_present_sxxbs) {
      if (!(this_present_sxxbs && that_present_sxxbs))
        return false;
      if (this.sxxbs != that.sxxbs)
        return false;
    }

    boolean this_present_dqzh = true;
    boolean that_present_dqzh = true;
    if (this_present_dqzh || that_present_dqzh) {
      if (!(this_present_dqzh && that_present_dqzh))
        return false;
      if (this.dqzh != that.dqzh)
        return false;
    }

    boolean this_present_dqcks = true;
    boolean that_present_dqcks = true;
    if (this_present_dqcks || that_present_dqcks) {
      if (!(this_present_dqcks && that_present_dqcks))
        return false;
      if (this.dqcks != that.dqcks)
        return false;
    }

    boolean this_present_zddl = true;
    boolean that_present_zddl = true;
    if (this_present_zddl || that_present_zddl) {
      if (!(this_present_zddl && that_present_zddl))
        return false;
      if (this.zddl != that.zddl)
        return false;
    }

    boolean this_present_zdjl = true;
    boolean that_present_zdjl = true;
    if (this_present_zdjl || that_present_zdjl) {
      if (!(this_present_zdjl && that_present_zdjl))
        return false;
      if (this.zdjl != that.zdjl)
        return false;
    }

    boolean this_present_bfbs = true;
    boolean that_present_bfbs = true;
    if (this_present_bfbs || that_present_bfbs) {
      if (!(this_present_bfbs && that_present_bfbs))
        return false;
      if (this.bfbs != that.bfbs)
        return false;
    }

    boolean this_present_klsjzs = true;
    boolean that_present_klsjzs = true;
    if (this_present_klsjzs || that_present_klsjzs) {
      if (!(this_present_klsjzs && that_present_klsjzs))
        return false;
      if (this.klsjzs != that.klsjzs)
        return false;
    }

    boolean this_present_KLSJNewList = true && this.isSetKLSJNewList();
    boolean that_present_KLSJNewList = true && that.isSetKLSJNewList();
    if (this_present_KLSJNewList || that_present_KLSJNewList) {
      if (!(this_present_KLSJNewList && that_present_KLSJNewList))
        return false;
      if (!this.KLSJNewList.equals(that.KLSJNewList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetActionCMDType()) ? 131071 : 524287);
    if (isSetActionCMDType())
      hashCode = hashCode * 8191 + actionCMDType.getValue();

    hashCode = hashCode * 8191 + ((isSetXlid()) ? 131071 : 524287);
    if (isSetXlid())
      hashCode = hashCode * 8191 + xlid.hashCode();

    hashCode = hashCode * 8191 + ((isSetXlbh()) ? 131071 : 524287);
    if (isSetXlbh())
      hashCode = hashCode * 8191 + xlbh.hashCode();

    hashCode = hashCode * 8191 + ((isSetXlmc()) ? 131071 : 524287);
    if (isSetXlmc())
      hashCode = hashCode * 8191 + xlmc.hashCode();

    hashCode = hashCode * 8191 + ((isSetClid()) ? 131071 : 524287);
    if (isSetClid())
      hashCode = hashCode * 8191 + clid.hashCode();

    hashCode = hashCode * 8191 + ((isSetEmpId()) ? 131071 : 524287);
    if (isSetEmpId())
      hashCode = hashCode * 8191 + empId.hashCode();

    hashCode = hashCode * 8191 + ((isSetSbsxzch()) ? 131071 : 524287);
    if (isSetSbsxzch())
      hashCode = hashCode * 8191 + sbsxzch.hashCode();

    hashCode = hashCode * 8191 + scsj;

    hashCode = hashCode * 8191 + (int) (sxxbs);

    hashCode = hashCode * 8191 + dqzh;

    hashCode = hashCode * 8191 + dqcks;

    hashCode = hashCode * 8191 + zddl;

    hashCode = hashCode * 8191 + zdjl;

    hashCode = hashCode * 8191 + (int) (bfbs);

    hashCode = hashCode * 8191 + (int) (klsjzs);

    hashCode = hashCode * 8191 + ((isSetKLSJNewList()) ? 131071 : 524287);
    if (isSetKLSJNewList())
      hashCode = hashCode * 8191 + KLSJNewList.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(KLSJNEWDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetActionCMDType()).compareTo(other.isSetActionCMDType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionCMDType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionCMDType, other.actionCMDType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetXlid()).compareTo(other.isSetXlid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXlid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xlid, other.xlid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetXlbh()).compareTo(other.isSetXlbh());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXlbh()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xlbh, other.xlbh);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetXlmc()).compareTo(other.isSetXlmc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXlmc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xlmc, other.xlmc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetClid()).compareTo(other.isSetClid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clid, other.clid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEmpId()).compareTo(other.isSetEmpId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmpId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.empId, other.empId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSbsxzch()).compareTo(other.isSetSbsxzch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSbsxzch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sbsxzch, other.sbsxzch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetScsj()).compareTo(other.isSetScsj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScsj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scsj, other.scsj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSxxbs()).compareTo(other.isSetSxxbs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSxxbs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sxxbs, other.sxxbs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDqzh()).compareTo(other.isSetDqzh());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDqzh()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dqzh, other.dqzh);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDqcks()).compareTo(other.isSetDqcks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDqcks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dqcks, other.dqcks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetZddl()).compareTo(other.isSetZddl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZddl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zddl, other.zddl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetZdjl()).compareTo(other.isSetZdjl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZdjl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zdjl, other.zdjl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBfbs()).compareTo(other.isSetBfbs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBfbs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bfbs, other.bfbs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKlsjzs()).compareTo(other.isSetKlsjzs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKlsjzs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.klsjzs, other.klsjzs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKLSJNewList()).compareTo(other.isSetKLSJNewList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKLSJNewList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.KLSJNewList, other.KLSJNewList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("KLSJNEWDTO(");
    boolean first = true;

    sb.append("actionCMDType:");
    if (this.actionCMDType == null) {
      sb.append("null");
    } else {
      sb.append(this.actionCMDType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("xlid:");
    if (this.xlid == null) {
      sb.append("null");
    } else {
      sb.append(this.xlid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("xlbh:");
    if (this.xlbh == null) {
      sb.append("null");
    } else {
      sb.append(this.xlbh);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("xlmc:");
    if (this.xlmc == null) {
      sb.append("null");
    } else {
      sb.append(this.xlmc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clid:");
    if (this.clid == null) {
      sb.append("null");
    } else {
      sb.append(this.clid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("empId:");
    if (this.empId == null) {
      sb.append("null");
    } else {
      sb.append(this.empId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sbsxzch:");
    if (this.sbsxzch == null) {
      sb.append("null");
    } else {
      sb.append(this.sbsxzch);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("scsj:");
    sb.append(this.scsj);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sxxbs:");
    sb.append(this.sxxbs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dqzh:");
    sb.append(this.dqzh);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dqcks:");
    sb.append(this.dqcks);
    first = false;
    if (!first) sb.append(", ");
    sb.append("zddl:");
    sb.append(this.zddl);
    first = false;
    if (!first) sb.append(", ");
    sb.append("zdjl:");
    sb.append(this.zdjl);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bfbs:");
    sb.append(this.bfbs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("klsjzs:");
    sb.append(this.klsjzs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("KLSJNewList:");
    if (this.KLSJNewList == null) {
      sb.append("null");
    } else {
      sb.append(this.KLSJNewList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class KLSJNEWDTOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public KLSJNEWDTOStandardScheme getScheme() {
      return new KLSJNEWDTOStandardScheme();
    }
  }

  private static class KLSJNEWDTOStandardScheme extends org.apache.thrift.scheme.StandardScheme<KLSJNEWDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, KLSJNEWDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACTION_CMDTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.actionCMDType = ActionCMDType.findByValue(iprot.readI32());
              struct.setActionCMDTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // XLID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.xlid = iprot.readString();
              struct.setXlidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // XLBH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.xlbh = iprot.readString();
              struct.setXlbhIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // XLMC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.xlmc = iprot.readString();
              struct.setXlmcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CLID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clid = iprot.readString();
              struct.setClidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EMP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.empId = iprot.readString();
              struct.setEmpIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SBSXZCH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sbsxzch = iprot.readString();
              struct.setSbsxzchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SCSJ
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.scsj = iprot.readI32();
              struct.setScsjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SXXBS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.sxxbs = iprot.readByte();
              struct.setSxxbsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DQZH
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.dqzh = iprot.readI16();
              struct.setDqzhIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DQCKS
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.dqcks = iprot.readI16();
              struct.setDqcksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ZDDL
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.zddl = iprot.readI16();
              struct.setZddlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ZDJL
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.zdjl = iprot.readI16();
              struct.setZdjlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // BFBS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.bfbs = iprot.readByte();
              struct.setBfbsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // KLSJZS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.klsjzs = iprot.readByte();
              struct.setKlsjzsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // KLSJNEW_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.KLSJNewList = new java.util.ArrayList<KLNEWDTO>(_list16.size);
                KLNEWDTO _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new KLNEWDTO();
                  _elem17.read(iprot);
                  struct.KLSJNewList.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setKLSJNewListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, KLSJNEWDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.actionCMDType != null) {
        oprot.writeFieldBegin(ACTION_CMDTYPE_FIELD_DESC);
        oprot.writeI32(struct.actionCMDType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.xlid != null) {
        oprot.writeFieldBegin(XLID_FIELD_DESC);
        oprot.writeString(struct.xlid);
        oprot.writeFieldEnd();
      }
      if (struct.xlbh != null) {
        oprot.writeFieldBegin(XLBH_FIELD_DESC);
        oprot.writeString(struct.xlbh);
        oprot.writeFieldEnd();
      }
      if (struct.xlmc != null) {
        oprot.writeFieldBegin(XLMC_FIELD_DESC);
        oprot.writeString(struct.xlmc);
        oprot.writeFieldEnd();
      }
      if (struct.clid != null) {
        oprot.writeFieldBegin(CLID_FIELD_DESC);
        oprot.writeString(struct.clid);
        oprot.writeFieldEnd();
      }
      if (struct.empId != null) {
        oprot.writeFieldBegin(EMP_ID_FIELD_DESC);
        oprot.writeString(struct.empId);
        oprot.writeFieldEnd();
      }
      if (struct.sbsxzch != null) {
        oprot.writeFieldBegin(SBSXZCH_FIELD_DESC);
        oprot.writeString(struct.sbsxzch);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SCSJ_FIELD_DESC);
      oprot.writeI32(struct.scsj);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SXXBS_FIELD_DESC);
      oprot.writeByte(struct.sxxbs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DQZH_FIELD_DESC);
      oprot.writeI16(struct.dqzh);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DQCKS_FIELD_DESC);
      oprot.writeI16(struct.dqcks);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ZDDL_FIELD_DESC);
      oprot.writeI16(struct.zddl);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ZDJL_FIELD_DESC);
      oprot.writeI16(struct.zdjl);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BFBS_FIELD_DESC);
      oprot.writeByte(struct.bfbs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(KLSJZS_FIELD_DESC);
      oprot.writeByte(struct.klsjzs);
      oprot.writeFieldEnd();
      if (struct.KLSJNewList != null) {
        oprot.writeFieldBegin(KLSJNEW_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.KLSJNewList.size()));
          for (KLNEWDTO _iter19 : struct.KLSJNewList)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class KLSJNEWDTOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public KLSJNEWDTOTupleScheme getScheme() {
      return new KLSJNEWDTOTupleScheme();
    }
  }

  private static class KLSJNEWDTOTupleScheme extends org.apache.thrift.scheme.TupleScheme<KLSJNEWDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, KLSJNEWDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetActionCMDType()) {
        optionals.set(0);
      }
      if (struct.isSetXlid()) {
        optionals.set(1);
      }
      if (struct.isSetXlbh()) {
        optionals.set(2);
      }
      if (struct.isSetXlmc()) {
        optionals.set(3);
      }
      if (struct.isSetClid()) {
        optionals.set(4);
      }
      if (struct.isSetEmpId()) {
        optionals.set(5);
      }
      if (struct.isSetSbsxzch()) {
        optionals.set(6);
      }
      if (struct.isSetScsj()) {
        optionals.set(7);
      }
      if (struct.isSetSxxbs()) {
        optionals.set(8);
      }
      if (struct.isSetDqzh()) {
        optionals.set(9);
      }
      if (struct.isSetDqcks()) {
        optionals.set(10);
      }
      if (struct.isSetZddl()) {
        optionals.set(11);
      }
      if (struct.isSetZdjl()) {
        optionals.set(12);
      }
      if (struct.isSetBfbs()) {
        optionals.set(13);
      }
      if (struct.isSetKlsjzs()) {
        optionals.set(14);
      }
      if (struct.isSetKLSJNewList()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetActionCMDType()) {
        oprot.writeI32(struct.actionCMDType.getValue());
      }
      if (struct.isSetXlid()) {
        oprot.writeString(struct.xlid);
      }
      if (struct.isSetXlbh()) {
        oprot.writeString(struct.xlbh);
      }
      if (struct.isSetXlmc()) {
        oprot.writeString(struct.xlmc);
      }
      if (struct.isSetClid()) {
        oprot.writeString(struct.clid);
      }
      if (struct.isSetEmpId()) {
        oprot.writeString(struct.empId);
      }
      if (struct.isSetSbsxzch()) {
        oprot.writeString(struct.sbsxzch);
      }
      if (struct.isSetScsj()) {
        oprot.writeI32(struct.scsj);
      }
      if (struct.isSetSxxbs()) {
        oprot.writeByte(struct.sxxbs);
      }
      if (struct.isSetDqzh()) {
        oprot.writeI16(struct.dqzh);
      }
      if (struct.isSetDqcks()) {
        oprot.writeI16(struct.dqcks);
      }
      if (struct.isSetZddl()) {
        oprot.writeI16(struct.zddl);
      }
      if (struct.isSetZdjl()) {
        oprot.writeI16(struct.zdjl);
      }
      if (struct.isSetBfbs()) {
        oprot.writeByte(struct.bfbs);
      }
      if (struct.isSetKlsjzs()) {
        oprot.writeByte(struct.klsjzs);
      }
      if (struct.isSetKLSJNewList()) {
        {
          oprot.writeI32(struct.KLSJNewList.size());
          for (KLNEWDTO _iter20 : struct.KLSJNewList)
          {
            _iter20.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, KLSJNEWDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.actionCMDType = ActionCMDType.findByValue(iprot.readI32());
        struct.setActionCMDTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.xlid = iprot.readString();
        struct.setXlidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.xlbh = iprot.readString();
        struct.setXlbhIsSet(true);
      }
      if (incoming.get(3)) {
        struct.xlmc = iprot.readString();
        struct.setXlmcIsSet(true);
      }
      if (incoming.get(4)) {
        struct.clid = iprot.readString();
        struct.setClidIsSet(true);
      }
      if (incoming.get(5)) {
        struct.empId = iprot.readString();
        struct.setEmpIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.sbsxzch = iprot.readString();
        struct.setSbsxzchIsSet(true);
      }
      if (incoming.get(7)) {
        struct.scsj = iprot.readI32();
        struct.setScsjIsSet(true);
      }
      if (incoming.get(8)) {
        struct.sxxbs = iprot.readByte();
        struct.setSxxbsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.dqzh = iprot.readI16();
        struct.setDqzhIsSet(true);
      }
      if (incoming.get(10)) {
        struct.dqcks = iprot.readI16();
        struct.setDqcksIsSet(true);
      }
      if (incoming.get(11)) {
        struct.zddl = iprot.readI16();
        struct.setZddlIsSet(true);
      }
      if (incoming.get(12)) {
        struct.zdjl = iprot.readI16();
        struct.setZdjlIsSet(true);
      }
      if (incoming.get(13)) {
        struct.bfbs = iprot.readByte();
        struct.setBfbsIsSet(true);
      }
      if (incoming.get(14)) {
        struct.klsjzs = iprot.readByte();
        struct.setKlsjzsIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.KLSJNewList = new java.util.ArrayList<KLNEWDTO>(_list21.size);
          KLNEWDTO _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new KLNEWDTO();
            _elem22.read(iprot);
            struct.KLSJNewList.add(_elem22);
          }
        }
        struct.setKLSJNewListIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

