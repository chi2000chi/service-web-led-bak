/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.framework.webClient.dispatch.up.bean;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-04-24")
public class GJSJDTO implements org.apache.thrift.TBase<GJSJDTO, GJSJDTO._Fields>, java.io.Serializable, Cloneable, Comparable<GJSJDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GJSJDTO");

  private static final org.apache.thrift.protocol.TField ACTION_CMDTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("actionCMDType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField XLID_FIELD_DESC = new org.apache.thrift.protocol.TField("xlid", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField XLBH_FIELD_DESC = new org.apache.thrift.protocol.TField("xlbh", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField XLMC_FIELD_DESC = new org.apache.thrift.protocol.TField("xlmc", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CLID_FIELD_DESC = new org.apache.thrift.protocol.TField("clid", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField EMP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("empId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SBSXZCH_FIELD_DESC = new org.apache.thrift.protocol.TField("sbsxzch", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField GJSJ_FIELD_DESC = new org.apache.thrift.protocol.TField("gjsj", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField JD_FIELD_DESC = new org.apache.thrift.protocol.TField("jd", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField WD_FIELD_DESC = new org.apache.thrift.protocol.TField("wd", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField SSSD_FIELD_DESC = new org.apache.thrift.protocol.TField("sssd", org.apache.thrift.protocol.TType.BYTE, (short)11);
  private static final org.apache.thrift.protocol.TField FXJ_FIELD_DESC = new org.apache.thrift.protocol.TField("fxj", org.apache.thrift.protocol.TType.I16, (short)12);
  private static final org.apache.thrift.protocol.TField YXFX_FIELD_DESC = new org.apache.thrift.protocol.TField("yxfx", org.apache.thrift.protocol.TType.BYTE, (short)13);
  private static final org.apache.thrift.protocol.TField YYZT_FIELD_DESC = new org.apache.thrift.protocol.TField("yyzt", org.apache.thrift.protocol.TType.BYTE, (short)14);
  private static final org.apache.thrift.protocol.TField GJLX_FIELD_DESC = new org.apache.thrift.protocol.TField("gjlx", org.apache.thrift.protocol.TType.BYTE, (short)15);
  private static final org.apache.thrift.protocol.TField YXBZ_FIELD_DESC = new org.apache.thrift.protocol.TField("yxbz", org.apache.thrift.protocol.TType.BYTE, (short)16);
  private static final org.apache.thrift.protocol.TField QSBS_FIELD_DESC = new org.apache.thrift.protocol.TField("qsbs", org.apache.thrift.protocol.TType.BYTE, (short)17);
  private static final org.apache.thrift.protocol.TField ZGSZ_FIELD_DESC = new org.apache.thrift.protocol.TField("zgsz", org.apache.thrift.protocol.TType.BYTE, (short)18);
  private static final org.apache.thrift.protocol.TField GJSC_FIELD_DESC = new org.apache.thrift.protocol.TField("gjsc", org.apache.thrift.protocol.TType.BYTE, (short)19);
  private static final org.apache.thrift.protocol.TField ZDXH_FIELD_DESC = new org.apache.thrift.protocol.TField("zdxh", org.apache.thrift.protocol.TType.BYTE, (short)20);
  private static final org.apache.thrift.protocol.TField GJYY_FIELD_DESC = new org.apache.thrift.protocol.TField("gjyy", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField BFBS_FIELD_DESC = new org.apache.thrift.protocol.TField("bfbs", org.apache.thrift.protocol.TType.BYTE, (short)22);
  private static final org.apache.thrift.protocol.TField PTBM_FIELD_DESC = new org.apache.thrift.protocol.TField("ptbm", org.apache.thrift.protocol.TType.BYTE, (short)23);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GJSJDTOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GJSJDTOTupleSchemeFactory();

  /**
   * 
   * @see ActionCMDType
   */
  public ActionCMDType actionCMDType; // required
  public java.lang.String xlid; // required
  public java.lang.String xlbh; // required
  public java.lang.String xlmc; // required
  public java.lang.String clid; // required
  public java.lang.String empId; // required
  public java.lang.String sbsxzch; // required
  public int gjsj; // required
  public int jd; // required
  public int wd; // required
  public byte sssd; // required
  public short fxj; // required
  public byte yxfx; // required
  public byte yyzt; // required
  public byte gjlx; // required
  public byte yxbz; // required
  public byte qsbs; // required
  public byte zgsz; // required
  public byte gjsc; // required
  public byte zdxh; // required
  public java.lang.String gjyy; // required
  public byte bfbs; // required
  public byte ptbm; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see ActionCMDType
     */
    ACTION_CMDTYPE((short)1, "actionCMDType"),
    XLID((short)2, "xlid"),
    XLBH((short)3, "xlbh"),
    XLMC((short)4, "xlmc"),
    CLID((short)5, "clid"),
    EMP_ID((short)6, "empId"),
    SBSXZCH((short)7, "sbsxzch"),
    GJSJ((short)8, "gjsj"),
    JD((short)9, "jd"),
    WD((short)10, "wd"),
    SSSD((short)11, "sssd"),
    FXJ((short)12, "fxj"),
    YXFX((short)13, "yxfx"),
    YYZT((short)14, "yyzt"),
    GJLX((short)15, "gjlx"),
    YXBZ((short)16, "yxbz"),
    QSBS((short)17, "qsbs"),
    ZGSZ((short)18, "zgsz"),
    GJSC((short)19, "gjsc"),
    ZDXH((short)20, "zdxh"),
    GJYY((short)21, "gjyy"),
    BFBS((short)22, "bfbs"),
    PTBM((short)23, "ptbm");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACTION_CMDTYPE
          return ACTION_CMDTYPE;
        case 2: // XLID
          return XLID;
        case 3: // XLBH
          return XLBH;
        case 4: // XLMC
          return XLMC;
        case 5: // CLID
          return CLID;
        case 6: // EMP_ID
          return EMP_ID;
        case 7: // SBSXZCH
          return SBSXZCH;
        case 8: // GJSJ
          return GJSJ;
        case 9: // JD
          return JD;
        case 10: // WD
          return WD;
        case 11: // SSSD
          return SSSD;
        case 12: // FXJ
          return FXJ;
        case 13: // YXFX
          return YXFX;
        case 14: // YYZT
          return YYZT;
        case 15: // GJLX
          return GJLX;
        case 16: // YXBZ
          return YXBZ;
        case 17: // QSBS
          return QSBS;
        case 18: // ZGSZ
          return ZGSZ;
        case 19: // GJSC
          return GJSC;
        case 20: // ZDXH
          return ZDXH;
        case 21: // GJYY
          return GJYY;
        case 22: // BFBS
          return BFBS;
        case 23: // PTBM
          return PTBM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GJSJ_ISSET_ID = 0;
  private static final int __JD_ISSET_ID = 1;
  private static final int __WD_ISSET_ID = 2;
  private static final int __SSSD_ISSET_ID = 3;
  private static final int __FXJ_ISSET_ID = 4;
  private static final int __YXFX_ISSET_ID = 5;
  private static final int __YYZT_ISSET_ID = 6;
  private static final int __GJLX_ISSET_ID = 7;
  private static final int __YXBZ_ISSET_ID = 8;
  private static final int __QSBS_ISSET_ID = 9;
  private static final int __ZGSZ_ISSET_ID = 10;
  private static final int __GJSC_ISSET_ID = 11;
  private static final int __ZDXH_ISSET_ID = 12;
  private static final int __BFBS_ISSET_ID = 13;
  private static final int __PTBM_ISSET_ID = 14;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACTION_CMDTYPE, new org.apache.thrift.meta_data.FieldMetaData("actionCMDType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ActionCMDType.class)));
    tmpMap.put(_Fields.XLID, new org.apache.thrift.meta_data.FieldMetaData("xlid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.XLBH, new org.apache.thrift.meta_data.FieldMetaData("xlbh", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.XLMC, new org.apache.thrift.meta_data.FieldMetaData("xlmc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLID, new org.apache.thrift.meta_data.FieldMetaData("clid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMP_ID, new org.apache.thrift.meta_data.FieldMetaData("empId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SBSXZCH, new org.apache.thrift.meta_data.FieldMetaData("sbsxzch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GJSJ, new org.apache.thrift.meta_data.FieldMetaData("gjsj", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.JD, new org.apache.thrift.meta_data.FieldMetaData("jd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WD, new org.apache.thrift.meta_data.FieldMetaData("wd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SSSD, new org.apache.thrift.meta_data.FieldMetaData("sssd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.FXJ, new org.apache.thrift.meta_data.FieldMetaData("fxj", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.YXFX, new org.apache.thrift.meta_data.FieldMetaData("yxfx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.YYZT, new org.apache.thrift.meta_data.FieldMetaData("yyzt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.GJLX, new org.apache.thrift.meta_data.FieldMetaData("gjlx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.YXBZ, new org.apache.thrift.meta_data.FieldMetaData("yxbz", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.QSBS, new org.apache.thrift.meta_data.FieldMetaData("qsbs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ZGSZ, new org.apache.thrift.meta_data.FieldMetaData("zgsz", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.GJSC, new org.apache.thrift.meta_data.FieldMetaData("gjsc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ZDXH, new org.apache.thrift.meta_data.FieldMetaData("zdxh", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.GJYY, new org.apache.thrift.meta_data.FieldMetaData("gjyy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BFBS, new org.apache.thrift.meta_data.FieldMetaData("bfbs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.PTBM, new org.apache.thrift.meta_data.FieldMetaData("ptbm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GJSJDTO.class, metaDataMap);
  }

  public GJSJDTO() {
  }

  public GJSJDTO(
    ActionCMDType actionCMDType,
    java.lang.String xlid,
    java.lang.String xlbh,
    java.lang.String xlmc,
    java.lang.String clid,
    java.lang.String empId,
    java.lang.String sbsxzch,
    int gjsj,
    int jd,
    int wd,
    byte sssd,
    short fxj,
    byte yxfx,
    byte yyzt,
    byte gjlx,
    byte yxbz,
    byte qsbs,
    byte zgsz,
    byte gjsc,
    byte zdxh,
    java.lang.String gjyy,
    byte bfbs,
    byte ptbm)
  {
    this();
    this.actionCMDType = actionCMDType;
    this.xlid = xlid;
    this.xlbh = xlbh;
    this.xlmc = xlmc;
    this.clid = clid;
    this.empId = empId;
    this.sbsxzch = sbsxzch;
    this.gjsj = gjsj;
    setGjsjIsSet(true);
    this.jd = jd;
    setJdIsSet(true);
    this.wd = wd;
    setWdIsSet(true);
    this.sssd = sssd;
    setSssdIsSet(true);
    this.fxj = fxj;
    setFxjIsSet(true);
    this.yxfx = yxfx;
    setYxfxIsSet(true);
    this.yyzt = yyzt;
    setYyztIsSet(true);
    this.gjlx = gjlx;
    setGjlxIsSet(true);
    this.yxbz = yxbz;
    setYxbzIsSet(true);
    this.qsbs = qsbs;
    setQsbsIsSet(true);
    this.zgsz = zgsz;
    setZgszIsSet(true);
    this.gjsc = gjsc;
    setGjscIsSet(true);
    this.zdxh = zdxh;
    setZdxhIsSet(true);
    this.gjyy = gjyy;
    this.bfbs = bfbs;
    setBfbsIsSet(true);
    this.ptbm = ptbm;
    setPtbmIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GJSJDTO(GJSJDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetActionCMDType()) {
      this.actionCMDType = other.actionCMDType;
    }
    if (other.isSetXlid()) {
      this.xlid = other.xlid;
    }
    if (other.isSetXlbh()) {
      this.xlbh = other.xlbh;
    }
    if (other.isSetXlmc()) {
      this.xlmc = other.xlmc;
    }
    if (other.isSetClid()) {
      this.clid = other.clid;
    }
    if (other.isSetEmpId()) {
      this.empId = other.empId;
    }
    if (other.isSetSbsxzch()) {
      this.sbsxzch = other.sbsxzch;
    }
    this.gjsj = other.gjsj;
    this.jd = other.jd;
    this.wd = other.wd;
    this.sssd = other.sssd;
    this.fxj = other.fxj;
    this.yxfx = other.yxfx;
    this.yyzt = other.yyzt;
    this.gjlx = other.gjlx;
    this.yxbz = other.yxbz;
    this.qsbs = other.qsbs;
    this.zgsz = other.zgsz;
    this.gjsc = other.gjsc;
    this.zdxh = other.zdxh;
    if (other.isSetGjyy()) {
      this.gjyy = other.gjyy;
    }
    this.bfbs = other.bfbs;
    this.ptbm = other.ptbm;
  }

  public GJSJDTO deepCopy() {
    return new GJSJDTO(this);
  }

  @Override
  public void clear() {
    this.actionCMDType = null;
    this.xlid = null;
    this.xlbh = null;
    this.xlmc = null;
    this.clid = null;
    this.empId = null;
    this.sbsxzch = null;
    setGjsjIsSet(false);
    this.gjsj = 0;
    setJdIsSet(false);
    this.jd = 0;
    setWdIsSet(false);
    this.wd = 0;
    setSssdIsSet(false);
    this.sssd = 0;
    setFxjIsSet(false);
    this.fxj = 0;
    setYxfxIsSet(false);
    this.yxfx = 0;
    setYyztIsSet(false);
    this.yyzt = 0;
    setGjlxIsSet(false);
    this.gjlx = 0;
    setYxbzIsSet(false);
    this.yxbz = 0;
    setQsbsIsSet(false);
    this.qsbs = 0;
    setZgszIsSet(false);
    this.zgsz = 0;
    setGjscIsSet(false);
    this.gjsc = 0;
    setZdxhIsSet(false);
    this.zdxh = 0;
    this.gjyy = null;
    setBfbsIsSet(false);
    this.bfbs = 0;
    setPtbmIsSet(false);
    this.ptbm = 0;
  }

  /**
   * 
   * @see ActionCMDType
   */
  public ActionCMDType getActionCMDType() {
    return this.actionCMDType;
  }

  /**
   * 
   * @see ActionCMDType
   */
  public GJSJDTO setActionCMDType(ActionCMDType actionCMDType) {
    this.actionCMDType = actionCMDType;
    return this;
  }

  public void unsetActionCMDType() {
    this.actionCMDType = null;
  }

  /** Returns true if field actionCMDType is set (has been assigned a value) and false otherwise */
  public boolean isSetActionCMDType() {
    return this.actionCMDType != null;
  }

  public void setActionCMDTypeIsSet(boolean value) {
    if (!value) {
      this.actionCMDType = null;
    }
  }

  public java.lang.String getXlid() {
    return this.xlid;
  }

  public GJSJDTO setXlid(java.lang.String xlid) {
    this.xlid = xlid;
    return this;
  }

  public void unsetXlid() {
    this.xlid = null;
  }

  /** Returns true if field xlid is set (has been assigned a value) and false otherwise */
  public boolean isSetXlid() {
    return this.xlid != null;
  }

  public void setXlidIsSet(boolean value) {
    if (!value) {
      this.xlid = null;
    }
  }

  public java.lang.String getXlbh() {
    return this.xlbh;
  }

  public GJSJDTO setXlbh(java.lang.String xlbh) {
    this.xlbh = xlbh;
    return this;
  }

  public void unsetXlbh() {
    this.xlbh = null;
  }

  /** Returns true if field xlbh is set (has been assigned a value) and false otherwise */
  public boolean isSetXlbh() {
    return this.xlbh != null;
  }

  public void setXlbhIsSet(boolean value) {
    if (!value) {
      this.xlbh = null;
    }
  }

  public java.lang.String getXlmc() {
    return this.xlmc;
  }

  public GJSJDTO setXlmc(java.lang.String xlmc) {
    this.xlmc = xlmc;
    return this;
  }

  public void unsetXlmc() {
    this.xlmc = null;
  }

  /** Returns true if field xlmc is set (has been assigned a value) and false otherwise */
  public boolean isSetXlmc() {
    return this.xlmc != null;
  }

  public void setXlmcIsSet(boolean value) {
    if (!value) {
      this.xlmc = null;
    }
  }

  public java.lang.String getClid() {
    return this.clid;
  }

  public GJSJDTO setClid(java.lang.String clid) {
    this.clid = clid;
    return this;
  }

  public void unsetClid() {
    this.clid = null;
  }

  /** Returns true if field clid is set (has been assigned a value) and false otherwise */
  public boolean isSetClid() {
    return this.clid != null;
  }

  public void setClidIsSet(boolean value) {
    if (!value) {
      this.clid = null;
    }
  }

  public java.lang.String getEmpId() {
    return this.empId;
  }

  public GJSJDTO setEmpId(java.lang.String empId) {
    this.empId = empId;
    return this;
  }

  public void unsetEmpId() {
    this.empId = null;
  }

  /** Returns true if field empId is set (has been assigned a value) and false otherwise */
  public boolean isSetEmpId() {
    return this.empId != null;
  }

  public void setEmpIdIsSet(boolean value) {
    if (!value) {
      this.empId = null;
    }
  }

  public java.lang.String getSbsxzch() {
    return this.sbsxzch;
  }

  public GJSJDTO setSbsxzch(java.lang.String sbsxzch) {
    this.sbsxzch = sbsxzch;
    return this;
  }

  public void unsetSbsxzch() {
    this.sbsxzch = null;
  }

  /** Returns true if field sbsxzch is set (has been assigned a value) and false otherwise */
  public boolean isSetSbsxzch() {
    return this.sbsxzch != null;
  }

  public void setSbsxzchIsSet(boolean value) {
    if (!value) {
      this.sbsxzch = null;
    }
  }

  public int getGjsj() {
    return this.gjsj;
  }

  public GJSJDTO setGjsj(int gjsj) {
    this.gjsj = gjsj;
    setGjsjIsSet(true);
    return this;
  }

  public void unsetGjsj() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GJSJ_ISSET_ID);
  }

  /** Returns true if field gjsj is set (has been assigned a value) and false otherwise */
  public boolean isSetGjsj() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GJSJ_ISSET_ID);
  }

  public void setGjsjIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GJSJ_ISSET_ID, value);
  }

  public int getJd() {
    return this.jd;
  }

  public GJSJDTO setJd(int jd) {
    this.jd = jd;
    setJdIsSet(true);
    return this;
  }

  public void unsetJd() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __JD_ISSET_ID);
  }

  /** Returns true if field jd is set (has been assigned a value) and false otherwise */
  public boolean isSetJd() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __JD_ISSET_ID);
  }

  public void setJdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __JD_ISSET_ID, value);
  }

  public int getWd() {
    return this.wd;
  }

  public GJSJDTO setWd(int wd) {
    this.wd = wd;
    setWdIsSet(true);
    return this;
  }

  public void unsetWd() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WD_ISSET_ID);
  }

  /** Returns true if field wd is set (has been assigned a value) and false otherwise */
  public boolean isSetWd() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WD_ISSET_ID);
  }

  public void setWdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WD_ISSET_ID, value);
  }

  public byte getSssd() {
    return this.sssd;
  }

  public GJSJDTO setSssd(byte sssd) {
    this.sssd = sssd;
    setSssdIsSet(true);
    return this;
  }

  public void unsetSssd() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SSSD_ISSET_ID);
  }

  /** Returns true if field sssd is set (has been assigned a value) and false otherwise */
  public boolean isSetSssd() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SSSD_ISSET_ID);
  }

  public void setSssdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SSSD_ISSET_ID, value);
  }

  public short getFxj() {
    return this.fxj;
  }

  public GJSJDTO setFxj(short fxj) {
    this.fxj = fxj;
    setFxjIsSet(true);
    return this;
  }

  public void unsetFxj() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FXJ_ISSET_ID);
  }

  /** Returns true if field fxj is set (has been assigned a value) and false otherwise */
  public boolean isSetFxj() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FXJ_ISSET_ID);
  }

  public void setFxjIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FXJ_ISSET_ID, value);
  }

  public byte getYxfx() {
    return this.yxfx;
  }

  public GJSJDTO setYxfx(byte yxfx) {
    this.yxfx = yxfx;
    setYxfxIsSet(true);
    return this;
  }

  public void unsetYxfx() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __YXFX_ISSET_ID);
  }

  /** Returns true if field yxfx is set (has been assigned a value) and false otherwise */
  public boolean isSetYxfx() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __YXFX_ISSET_ID);
  }

  public void setYxfxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __YXFX_ISSET_ID, value);
  }

  public byte getYyzt() {
    return this.yyzt;
  }

  public GJSJDTO setYyzt(byte yyzt) {
    this.yyzt = yyzt;
    setYyztIsSet(true);
    return this;
  }

  public void unsetYyzt() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __YYZT_ISSET_ID);
  }

  /** Returns true if field yyzt is set (has been assigned a value) and false otherwise */
  public boolean isSetYyzt() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __YYZT_ISSET_ID);
  }

  public void setYyztIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __YYZT_ISSET_ID, value);
  }

  public byte getGjlx() {
    return this.gjlx;
  }

  public GJSJDTO setGjlx(byte gjlx) {
    this.gjlx = gjlx;
    setGjlxIsSet(true);
    return this;
  }

  public void unsetGjlx() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GJLX_ISSET_ID);
  }

  /** Returns true if field gjlx is set (has been assigned a value) and false otherwise */
  public boolean isSetGjlx() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GJLX_ISSET_ID);
  }

  public void setGjlxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GJLX_ISSET_ID, value);
  }

  public byte getYxbz() {
    return this.yxbz;
  }

  public GJSJDTO setYxbz(byte yxbz) {
    this.yxbz = yxbz;
    setYxbzIsSet(true);
    return this;
  }

  public void unsetYxbz() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __YXBZ_ISSET_ID);
  }

  /** Returns true if field yxbz is set (has been assigned a value) and false otherwise */
  public boolean isSetYxbz() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __YXBZ_ISSET_ID);
  }

  public void setYxbzIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __YXBZ_ISSET_ID, value);
  }

  public byte getQsbs() {
    return this.qsbs;
  }

  public GJSJDTO setQsbs(byte qsbs) {
    this.qsbs = qsbs;
    setQsbsIsSet(true);
    return this;
  }

  public void unsetQsbs() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __QSBS_ISSET_ID);
  }

  /** Returns true if field qsbs is set (has been assigned a value) and false otherwise */
  public boolean isSetQsbs() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __QSBS_ISSET_ID);
  }

  public void setQsbsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __QSBS_ISSET_ID, value);
  }

  public byte getZgsz() {
    return this.zgsz;
  }

  public GJSJDTO setZgsz(byte zgsz) {
    this.zgsz = zgsz;
    setZgszIsSet(true);
    return this;
  }

  public void unsetZgsz() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ZGSZ_ISSET_ID);
  }

  /** Returns true if field zgsz is set (has been assigned a value) and false otherwise */
  public boolean isSetZgsz() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ZGSZ_ISSET_ID);
  }

  public void setZgszIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ZGSZ_ISSET_ID, value);
  }

  public byte getGjsc() {
    return this.gjsc;
  }

  public GJSJDTO setGjsc(byte gjsc) {
    this.gjsc = gjsc;
    setGjscIsSet(true);
    return this;
  }

  public void unsetGjsc() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GJSC_ISSET_ID);
  }

  /** Returns true if field gjsc is set (has been assigned a value) and false otherwise */
  public boolean isSetGjsc() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GJSC_ISSET_ID);
  }

  public void setGjscIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GJSC_ISSET_ID, value);
  }

  public byte getZdxh() {
    return this.zdxh;
  }

  public GJSJDTO setZdxh(byte zdxh) {
    this.zdxh = zdxh;
    setZdxhIsSet(true);
    return this;
  }

  public void unsetZdxh() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ZDXH_ISSET_ID);
  }

  /** Returns true if field zdxh is set (has been assigned a value) and false otherwise */
  public boolean isSetZdxh() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ZDXH_ISSET_ID);
  }

  public void setZdxhIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ZDXH_ISSET_ID, value);
  }

  public java.lang.String getGjyy() {
    return this.gjyy;
  }

  public GJSJDTO setGjyy(java.lang.String gjyy) {
    this.gjyy = gjyy;
    return this;
  }

  public void unsetGjyy() {
    this.gjyy = null;
  }

  /** Returns true if field gjyy is set (has been assigned a value) and false otherwise */
  public boolean isSetGjyy() {
    return this.gjyy != null;
  }

  public void setGjyyIsSet(boolean value) {
    if (!value) {
      this.gjyy = null;
    }
  }

  public byte getBfbs() {
    return this.bfbs;
  }

  public GJSJDTO setBfbs(byte bfbs) {
    this.bfbs = bfbs;
    setBfbsIsSet(true);
    return this;
  }

  public void unsetBfbs() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BFBS_ISSET_ID);
  }

  /** Returns true if field bfbs is set (has been assigned a value) and false otherwise */
  public boolean isSetBfbs() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BFBS_ISSET_ID);
  }

  public void setBfbsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BFBS_ISSET_ID, value);
  }

  public byte getPtbm() {
    return this.ptbm;
  }

  public GJSJDTO setPtbm(byte ptbm) {
    this.ptbm = ptbm;
    setPtbmIsSet(true);
    return this;
  }

  public void unsetPtbm() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PTBM_ISSET_ID);
  }

  /** Returns true if field ptbm is set (has been assigned a value) and false otherwise */
  public boolean isSetPtbm() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PTBM_ISSET_ID);
  }

  public void setPtbmIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PTBM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ACTION_CMDTYPE:
      if (value == null) {
        unsetActionCMDType();
      } else {
        setActionCMDType((ActionCMDType)value);
      }
      break;

    case XLID:
      if (value == null) {
        unsetXlid();
      } else {
        setXlid((java.lang.String)value);
      }
      break;

    case XLBH:
      if (value == null) {
        unsetXlbh();
      } else {
        setXlbh((java.lang.String)value);
      }
      break;

    case XLMC:
      if (value == null) {
        unsetXlmc();
      } else {
        setXlmc((java.lang.String)value);
      }
      break;

    case CLID:
      if (value == null) {
        unsetClid();
      } else {
        setClid((java.lang.String)value);
      }
      break;

    case EMP_ID:
      if (value == null) {
        unsetEmpId();
      } else {
        setEmpId((java.lang.String)value);
      }
      break;

    case SBSXZCH:
      if (value == null) {
        unsetSbsxzch();
      } else {
        setSbsxzch((java.lang.String)value);
      }
      break;

    case GJSJ:
      if (value == null) {
        unsetGjsj();
      } else {
        setGjsj((java.lang.Integer)value);
      }
      break;

    case JD:
      if (value == null) {
        unsetJd();
      } else {
        setJd((java.lang.Integer)value);
      }
      break;

    case WD:
      if (value == null) {
        unsetWd();
      } else {
        setWd((java.lang.Integer)value);
      }
      break;

    case SSSD:
      if (value == null) {
        unsetSssd();
      } else {
        setSssd((java.lang.Byte)value);
      }
      break;

    case FXJ:
      if (value == null) {
        unsetFxj();
      } else {
        setFxj((java.lang.Short)value);
      }
      break;

    case YXFX:
      if (value == null) {
        unsetYxfx();
      } else {
        setYxfx((java.lang.Byte)value);
      }
      break;

    case YYZT:
      if (value == null) {
        unsetYyzt();
      } else {
        setYyzt((java.lang.Byte)value);
      }
      break;

    case GJLX:
      if (value == null) {
        unsetGjlx();
      } else {
        setGjlx((java.lang.Byte)value);
      }
      break;

    case YXBZ:
      if (value == null) {
        unsetYxbz();
      } else {
        setYxbz((java.lang.Byte)value);
      }
      break;

    case QSBS:
      if (value == null) {
        unsetQsbs();
      } else {
        setQsbs((java.lang.Byte)value);
      }
      break;

    case ZGSZ:
      if (value == null) {
        unsetZgsz();
      } else {
        setZgsz((java.lang.Byte)value);
      }
      break;

    case GJSC:
      if (value == null) {
        unsetGjsc();
      } else {
        setGjsc((java.lang.Byte)value);
      }
      break;

    case ZDXH:
      if (value == null) {
        unsetZdxh();
      } else {
        setZdxh((java.lang.Byte)value);
      }
      break;

    case GJYY:
      if (value == null) {
        unsetGjyy();
      } else {
        setGjyy((java.lang.String)value);
      }
      break;

    case BFBS:
      if (value == null) {
        unsetBfbs();
      } else {
        setBfbs((java.lang.Byte)value);
      }
      break;

    case PTBM:
      if (value == null) {
        unsetPtbm();
      } else {
        setPtbm((java.lang.Byte)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ACTION_CMDTYPE:
      return getActionCMDType();

    case XLID:
      return getXlid();

    case XLBH:
      return getXlbh();

    case XLMC:
      return getXlmc();

    case CLID:
      return getClid();

    case EMP_ID:
      return getEmpId();

    case SBSXZCH:
      return getSbsxzch();

    case GJSJ:
      return getGjsj();

    case JD:
      return getJd();

    case WD:
      return getWd();

    case SSSD:
      return getSssd();

    case FXJ:
      return getFxj();

    case YXFX:
      return getYxfx();

    case YYZT:
      return getYyzt();

    case GJLX:
      return getGjlx();

    case YXBZ:
      return getYxbz();

    case QSBS:
      return getQsbs();

    case ZGSZ:
      return getZgsz();

    case GJSC:
      return getGjsc();

    case ZDXH:
      return getZdxh();

    case GJYY:
      return getGjyy();

    case BFBS:
      return getBfbs();

    case PTBM:
      return getPtbm();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ACTION_CMDTYPE:
      return isSetActionCMDType();
    case XLID:
      return isSetXlid();
    case XLBH:
      return isSetXlbh();
    case XLMC:
      return isSetXlmc();
    case CLID:
      return isSetClid();
    case EMP_ID:
      return isSetEmpId();
    case SBSXZCH:
      return isSetSbsxzch();
    case GJSJ:
      return isSetGjsj();
    case JD:
      return isSetJd();
    case WD:
      return isSetWd();
    case SSSD:
      return isSetSssd();
    case FXJ:
      return isSetFxj();
    case YXFX:
      return isSetYxfx();
    case YYZT:
      return isSetYyzt();
    case GJLX:
      return isSetGjlx();
    case YXBZ:
      return isSetYxbz();
    case QSBS:
      return isSetQsbs();
    case ZGSZ:
      return isSetZgsz();
    case GJSC:
      return isSetGjsc();
    case ZDXH:
      return isSetZdxh();
    case GJYY:
      return isSetGjyy();
    case BFBS:
      return isSetBfbs();
    case PTBM:
      return isSetPtbm();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof GJSJDTO)
      return this.equals((GJSJDTO)that);
    return false;
  }

  public boolean equals(GJSJDTO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_actionCMDType = true && this.isSetActionCMDType();
    boolean that_present_actionCMDType = true && that.isSetActionCMDType();
    if (this_present_actionCMDType || that_present_actionCMDType) {
      if (!(this_present_actionCMDType && that_present_actionCMDType))
        return false;
      if (!this.actionCMDType.equals(that.actionCMDType))
        return false;
    }

    boolean this_present_xlid = true && this.isSetXlid();
    boolean that_present_xlid = true && that.isSetXlid();
    if (this_present_xlid || that_present_xlid) {
      if (!(this_present_xlid && that_present_xlid))
        return false;
      if (!this.xlid.equals(that.xlid))
        return false;
    }

    boolean this_present_xlbh = true && this.isSetXlbh();
    boolean that_present_xlbh = true && that.isSetXlbh();
    if (this_present_xlbh || that_present_xlbh) {
      if (!(this_present_xlbh && that_present_xlbh))
        return false;
      if (!this.xlbh.equals(that.xlbh))
        return false;
    }

    boolean this_present_xlmc = true && this.isSetXlmc();
    boolean that_present_xlmc = true && that.isSetXlmc();
    if (this_present_xlmc || that_present_xlmc) {
      if (!(this_present_xlmc && that_present_xlmc))
        return false;
      if (!this.xlmc.equals(that.xlmc))
        return false;
    }

    boolean this_present_clid = true && this.isSetClid();
    boolean that_present_clid = true && that.isSetClid();
    if (this_present_clid || that_present_clid) {
      if (!(this_present_clid && that_present_clid))
        return false;
      if (!this.clid.equals(that.clid))
        return false;
    }

    boolean this_present_empId = true && this.isSetEmpId();
    boolean that_present_empId = true && that.isSetEmpId();
    if (this_present_empId || that_present_empId) {
      if (!(this_present_empId && that_present_empId))
        return false;
      if (!this.empId.equals(that.empId))
        return false;
    }

    boolean this_present_sbsxzch = true && this.isSetSbsxzch();
    boolean that_present_sbsxzch = true && that.isSetSbsxzch();
    if (this_present_sbsxzch || that_present_sbsxzch) {
      if (!(this_present_sbsxzch && that_present_sbsxzch))
        return false;
      if (!this.sbsxzch.equals(that.sbsxzch))
        return false;
    }

    boolean this_present_gjsj = true;
    boolean that_present_gjsj = true;
    if (this_present_gjsj || that_present_gjsj) {
      if (!(this_present_gjsj && that_present_gjsj))
        return false;
      if (this.gjsj != that.gjsj)
        return false;
    }

    boolean this_present_jd = true;
    boolean that_present_jd = true;
    if (this_present_jd || that_present_jd) {
      if (!(this_present_jd && that_present_jd))
        return false;
      if (this.jd != that.jd)
        return false;
    }

    boolean this_present_wd = true;
    boolean that_present_wd = true;
    if (this_present_wd || that_present_wd) {
      if (!(this_present_wd && that_present_wd))
        return false;
      if (this.wd != that.wd)
        return false;
    }

    boolean this_present_sssd = true;
    boolean that_present_sssd = true;
    if (this_present_sssd || that_present_sssd) {
      if (!(this_present_sssd && that_present_sssd))
        return false;
      if (this.sssd != that.sssd)
        return false;
    }

    boolean this_present_fxj = true;
    boolean that_present_fxj = true;
    if (this_present_fxj || that_present_fxj) {
      if (!(this_present_fxj && that_present_fxj))
        return false;
      if (this.fxj != that.fxj)
        return false;
    }

    boolean this_present_yxfx = true;
    boolean that_present_yxfx = true;
    if (this_present_yxfx || that_present_yxfx) {
      if (!(this_present_yxfx && that_present_yxfx))
        return false;
      if (this.yxfx != that.yxfx)
        return false;
    }

    boolean this_present_yyzt = true;
    boolean that_present_yyzt = true;
    if (this_present_yyzt || that_present_yyzt) {
      if (!(this_present_yyzt && that_present_yyzt))
        return false;
      if (this.yyzt != that.yyzt)
        return false;
    }

    boolean this_present_gjlx = true;
    boolean that_present_gjlx = true;
    if (this_present_gjlx || that_present_gjlx) {
      if (!(this_present_gjlx && that_present_gjlx))
        return false;
      if (this.gjlx != that.gjlx)
        return false;
    }

    boolean this_present_yxbz = true;
    boolean that_present_yxbz = true;
    if (this_present_yxbz || that_present_yxbz) {
      if (!(this_present_yxbz && that_present_yxbz))
        return false;
      if (this.yxbz != that.yxbz)
        return false;
    }

    boolean this_present_qsbs = true;
    boolean that_present_qsbs = true;
    if (this_present_qsbs || that_present_qsbs) {
      if (!(this_present_qsbs && that_present_qsbs))
        return false;
      if (this.qsbs != that.qsbs)
        return false;
    }

    boolean this_present_zgsz = true;
    boolean that_present_zgsz = true;
    if (this_present_zgsz || that_present_zgsz) {
      if (!(this_present_zgsz && that_present_zgsz))
        return false;
      if (this.zgsz != that.zgsz)
        return false;
    }

    boolean this_present_gjsc = true;
    boolean that_present_gjsc = true;
    if (this_present_gjsc || that_present_gjsc) {
      if (!(this_present_gjsc && that_present_gjsc))
        return false;
      if (this.gjsc != that.gjsc)
        return false;
    }

    boolean this_present_zdxh = true;
    boolean that_present_zdxh = true;
    if (this_present_zdxh || that_present_zdxh) {
      if (!(this_present_zdxh && that_present_zdxh))
        return false;
      if (this.zdxh != that.zdxh)
        return false;
    }

    boolean this_present_gjyy = true && this.isSetGjyy();
    boolean that_present_gjyy = true && that.isSetGjyy();
    if (this_present_gjyy || that_present_gjyy) {
      if (!(this_present_gjyy && that_present_gjyy))
        return false;
      if (!this.gjyy.equals(that.gjyy))
        return false;
    }

    boolean this_present_bfbs = true;
    boolean that_present_bfbs = true;
    if (this_present_bfbs || that_present_bfbs) {
      if (!(this_present_bfbs && that_present_bfbs))
        return false;
      if (this.bfbs != that.bfbs)
        return false;
    }

    boolean this_present_ptbm = true;
    boolean that_present_ptbm = true;
    if (this_present_ptbm || that_present_ptbm) {
      if (!(this_present_ptbm && that_present_ptbm))
        return false;
      if (this.ptbm != that.ptbm)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetActionCMDType()) ? 131071 : 524287);
    if (isSetActionCMDType())
      hashCode = hashCode * 8191 + actionCMDType.getValue();

    hashCode = hashCode * 8191 + ((isSetXlid()) ? 131071 : 524287);
    if (isSetXlid())
      hashCode = hashCode * 8191 + xlid.hashCode();

    hashCode = hashCode * 8191 + ((isSetXlbh()) ? 131071 : 524287);
    if (isSetXlbh())
      hashCode = hashCode * 8191 + xlbh.hashCode();

    hashCode = hashCode * 8191 + ((isSetXlmc()) ? 131071 : 524287);
    if (isSetXlmc())
      hashCode = hashCode * 8191 + xlmc.hashCode();

    hashCode = hashCode * 8191 + ((isSetClid()) ? 131071 : 524287);
    if (isSetClid())
      hashCode = hashCode * 8191 + clid.hashCode();

    hashCode = hashCode * 8191 + ((isSetEmpId()) ? 131071 : 524287);
    if (isSetEmpId())
      hashCode = hashCode * 8191 + empId.hashCode();

    hashCode = hashCode * 8191 + ((isSetSbsxzch()) ? 131071 : 524287);
    if (isSetSbsxzch())
      hashCode = hashCode * 8191 + sbsxzch.hashCode();

    hashCode = hashCode * 8191 + gjsj;

    hashCode = hashCode * 8191 + jd;

    hashCode = hashCode * 8191 + wd;

    hashCode = hashCode * 8191 + (int) (sssd);

    hashCode = hashCode * 8191 + fxj;

    hashCode = hashCode * 8191 + (int) (yxfx);

    hashCode = hashCode * 8191 + (int) (yyzt);

    hashCode = hashCode * 8191 + (int) (gjlx);

    hashCode = hashCode * 8191 + (int) (yxbz);

    hashCode = hashCode * 8191 + (int) (qsbs);

    hashCode = hashCode * 8191 + (int) (zgsz);

    hashCode = hashCode * 8191 + (int) (gjsc);

    hashCode = hashCode * 8191 + (int) (zdxh);

    hashCode = hashCode * 8191 + ((isSetGjyy()) ? 131071 : 524287);
    if (isSetGjyy())
      hashCode = hashCode * 8191 + gjyy.hashCode();

    hashCode = hashCode * 8191 + (int) (bfbs);

    hashCode = hashCode * 8191 + (int) (ptbm);

    return hashCode;
  }

  @Override
  public int compareTo(GJSJDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetActionCMDType()).compareTo(other.isSetActionCMDType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionCMDType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionCMDType, other.actionCMDType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetXlid()).compareTo(other.isSetXlid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXlid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xlid, other.xlid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetXlbh()).compareTo(other.isSetXlbh());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXlbh()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xlbh, other.xlbh);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetXlmc()).compareTo(other.isSetXlmc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXlmc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xlmc, other.xlmc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetClid()).compareTo(other.isSetClid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clid, other.clid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEmpId()).compareTo(other.isSetEmpId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmpId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.empId, other.empId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSbsxzch()).compareTo(other.isSetSbsxzch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSbsxzch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sbsxzch, other.sbsxzch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGjsj()).compareTo(other.isSetGjsj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGjsj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gjsj, other.gjsj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetJd()).compareTo(other.isSetJd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jd, other.jd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWd()).compareTo(other.isSetWd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wd, other.wd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSssd()).compareTo(other.isSetSssd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSssd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sssd, other.sssd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFxj()).compareTo(other.isSetFxj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFxj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fxj, other.fxj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetYxfx()).compareTo(other.isSetYxfx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYxfx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yxfx, other.yxfx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetYyzt()).compareTo(other.isSetYyzt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYyzt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yyzt, other.yyzt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGjlx()).compareTo(other.isSetGjlx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGjlx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gjlx, other.gjlx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetYxbz()).compareTo(other.isSetYxbz());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYxbz()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yxbz, other.yxbz);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetQsbs()).compareTo(other.isSetQsbs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQsbs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qsbs, other.qsbs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetZgsz()).compareTo(other.isSetZgsz());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZgsz()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zgsz, other.zgsz);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGjsc()).compareTo(other.isSetGjsc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGjsc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gjsc, other.gjsc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetZdxh()).compareTo(other.isSetZdxh());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZdxh()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zdxh, other.zdxh);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGjyy()).compareTo(other.isSetGjyy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGjyy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gjyy, other.gjyy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBfbs()).compareTo(other.isSetBfbs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBfbs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bfbs, other.bfbs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPtbm()).compareTo(other.isSetPtbm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPtbm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ptbm, other.ptbm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("GJSJDTO(");
    boolean first = true;

    sb.append("actionCMDType:");
    if (this.actionCMDType == null) {
      sb.append("null");
    } else {
      sb.append(this.actionCMDType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("xlid:");
    if (this.xlid == null) {
      sb.append("null");
    } else {
      sb.append(this.xlid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("xlbh:");
    if (this.xlbh == null) {
      sb.append("null");
    } else {
      sb.append(this.xlbh);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("xlmc:");
    if (this.xlmc == null) {
      sb.append("null");
    } else {
      sb.append(this.xlmc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clid:");
    if (this.clid == null) {
      sb.append("null");
    } else {
      sb.append(this.clid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("empId:");
    if (this.empId == null) {
      sb.append("null");
    } else {
      sb.append(this.empId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sbsxzch:");
    if (this.sbsxzch == null) {
      sb.append("null");
    } else {
      sb.append(this.sbsxzch);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gjsj:");
    sb.append(this.gjsj);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jd:");
    sb.append(this.jd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("wd:");
    sb.append(this.wd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sssd:");
    sb.append(this.sssd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fxj:");
    sb.append(this.fxj);
    first = false;
    if (!first) sb.append(", ");
    sb.append("yxfx:");
    sb.append(this.yxfx);
    first = false;
    if (!first) sb.append(", ");
    sb.append("yyzt:");
    sb.append(this.yyzt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gjlx:");
    sb.append(this.gjlx);
    first = false;
    if (!first) sb.append(", ");
    sb.append("yxbz:");
    sb.append(this.yxbz);
    first = false;
    if (!first) sb.append(", ");
    sb.append("qsbs:");
    sb.append(this.qsbs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("zgsz:");
    sb.append(this.zgsz);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gjsc:");
    sb.append(this.gjsc);
    first = false;
    if (!first) sb.append(", ");
    sb.append("zdxh:");
    sb.append(this.zdxh);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gjyy:");
    if (this.gjyy == null) {
      sb.append("null");
    } else {
      sb.append(this.gjyy);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bfbs:");
    sb.append(this.bfbs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ptbm:");
    sb.append(this.ptbm);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GJSJDTOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GJSJDTOStandardScheme getScheme() {
      return new GJSJDTOStandardScheme();
    }
  }

  private static class GJSJDTOStandardScheme extends org.apache.thrift.scheme.StandardScheme<GJSJDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GJSJDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACTION_CMDTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.actionCMDType = ActionCMDType.findByValue(iprot.readI32());
              struct.setActionCMDTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // XLID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.xlid = iprot.readString();
              struct.setXlidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // XLBH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.xlbh = iprot.readString();
              struct.setXlbhIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // XLMC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.xlmc = iprot.readString();
              struct.setXlmcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CLID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clid = iprot.readString();
              struct.setClidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EMP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.empId = iprot.readString();
              struct.setEmpIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SBSXZCH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sbsxzch = iprot.readString();
              struct.setSbsxzchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // GJSJ
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.gjsj = iprot.readI32();
              struct.setGjsjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // JD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.jd = iprot.readI32();
              struct.setJdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // WD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wd = iprot.readI32();
              struct.setWdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SSSD
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.sssd = iprot.readByte();
              struct.setSssdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FXJ
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.fxj = iprot.readI16();
              struct.setFxjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // YXFX
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.yxfx = iprot.readByte();
              struct.setYxfxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // YYZT
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.yyzt = iprot.readByte();
              struct.setYyztIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // GJLX
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.gjlx = iprot.readByte();
              struct.setGjlxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // YXBZ
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.yxbz = iprot.readByte();
              struct.setYxbzIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // QSBS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.qsbs = iprot.readByte();
              struct.setQsbsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // ZGSZ
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.zgsz = iprot.readByte();
              struct.setZgszIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // GJSC
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.gjsc = iprot.readByte();
              struct.setGjscIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // ZDXH
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.zdxh = iprot.readByte();
              struct.setZdxhIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // GJYY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gjyy = iprot.readString();
              struct.setGjyyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // BFBS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.bfbs = iprot.readByte();
              struct.setBfbsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // PTBM
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.ptbm = iprot.readByte();
              struct.setPtbmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GJSJDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.actionCMDType != null) {
        oprot.writeFieldBegin(ACTION_CMDTYPE_FIELD_DESC);
        oprot.writeI32(struct.actionCMDType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.xlid != null) {
        oprot.writeFieldBegin(XLID_FIELD_DESC);
        oprot.writeString(struct.xlid);
        oprot.writeFieldEnd();
      }
      if (struct.xlbh != null) {
        oprot.writeFieldBegin(XLBH_FIELD_DESC);
        oprot.writeString(struct.xlbh);
        oprot.writeFieldEnd();
      }
      if (struct.xlmc != null) {
        oprot.writeFieldBegin(XLMC_FIELD_DESC);
        oprot.writeString(struct.xlmc);
        oprot.writeFieldEnd();
      }
      if (struct.clid != null) {
        oprot.writeFieldBegin(CLID_FIELD_DESC);
        oprot.writeString(struct.clid);
        oprot.writeFieldEnd();
      }
      if (struct.empId != null) {
        oprot.writeFieldBegin(EMP_ID_FIELD_DESC);
        oprot.writeString(struct.empId);
        oprot.writeFieldEnd();
      }
      if (struct.sbsxzch != null) {
        oprot.writeFieldBegin(SBSXZCH_FIELD_DESC);
        oprot.writeString(struct.sbsxzch);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GJSJ_FIELD_DESC);
      oprot.writeI32(struct.gjsj);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JD_FIELD_DESC);
      oprot.writeI32(struct.jd);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WD_FIELD_DESC);
      oprot.writeI32(struct.wd);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SSSD_FIELD_DESC);
      oprot.writeByte(struct.sssd);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FXJ_FIELD_DESC);
      oprot.writeI16(struct.fxj);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(YXFX_FIELD_DESC);
      oprot.writeByte(struct.yxfx);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(YYZT_FIELD_DESC);
      oprot.writeByte(struct.yyzt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GJLX_FIELD_DESC);
      oprot.writeByte(struct.gjlx);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(YXBZ_FIELD_DESC);
      oprot.writeByte(struct.yxbz);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QSBS_FIELD_DESC);
      oprot.writeByte(struct.qsbs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ZGSZ_FIELD_DESC);
      oprot.writeByte(struct.zgsz);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GJSC_FIELD_DESC);
      oprot.writeByte(struct.gjsc);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ZDXH_FIELD_DESC);
      oprot.writeByte(struct.zdxh);
      oprot.writeFieldEnd();
      if (struct.gjyy != null) {
        oprot.writeFieldBegin(GJYY_FIELD_DESC);
        oprot.writeString(struct.gjyy);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BFBS_FIELD_DESC);
      oprot.writeByte(struct.bfbs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PTBM_FIELD_DESC);
      oprot.writeByte(struct.ptbm);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GJSJDTOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GJSJDTOTupleScheme getScheme() {
      return new GJSJDTOTupleScheme();
    }
  }

  private static class GJSJDTOTupleScheme extends org.apache.thrift.scheme.TupleScheme<GJSJDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GJSJDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetActionCMDType()) {
        optionals.set(0);
      }
      if (struct.isSetXlid()) {
        optionals.set(1);
      }
      if (struct.isSetXlbh()) {
        optionals.set(2);
      }
      if (struct.isSetXlmc()) {
        optionals.set(3);
      }
      if (struct.isSetClid()) {
        optionals.set(4);
      }
      if (struct.isSetEmpId()) {
        optionals.set(5);
      }
      if (struct.isSetSbsxzch()) {
        optionals.set(6);
      }
      if (struct.isSetGjsj()) {
        optionals.set(7);
      }
      if (struct.isSetJd()) {
        optionals.set(8);
      }
      if (struct.isSetWd()) {
        optionals.set(9);
      }
      if (struct.isSetSssd()) {
        optionals.set(10);
      }
      if (struct.isSetFxj()) {
        optionals.set(11);
      }
      if (struct.isSetYxfx()) {
        optionals.set(12);
      }
      if (struct.isSetYyzt()) {
        optionals.set(13);
      }
      if (struct.isSetGjlx()) {
        optionals.set(14);
      }
      if (struct.isSetYxbz()) {
        optionals.set(15);
      }
      if (struct.isSetQsbs()) {
        optionals.set(16);
      }
      if (struct.isSetZgsz()) {
        optionals.set(17);
      }
      if (struct.isSetGjsc()) {
        optionals.set(18);
      }
      if (struct.isSetZdxh()) {
        optionals.set(19);
      }
      if (struct.isSetGjyy()) {
        optionals.set(20);
      }
      if (struct.isSetBfbs()) {
        optionals.set(21);
      }
      if (struct.isSetPtbm()) {
        optionals.set(22);
      }
      oprot.writeBitSet(optionals, 23);
      if (struct.isSetActionCMDType()) {
        oprot.writeI32(struct.actionCMDType.getValue());
      }
      if (struct.isSetXlid()) {
        oprot.writeString(struct.xlid);
      }
      if (struct.isSetXlbh()) {
        oprot.writeString(struct.xlbh);
      }
      if (struct.isSetXlmc()) {
        oprot.writeString(struct.xlmc);
      }
      if (struct.isSetClid()) {
        oprot.writeString(struct.clid);
      }
      if (struct.isSetEmpId()) {
        oprot.writeString(struct.empId);
      }
      if (struct.isSetSbsxzch()) {
        oprot.writeString(struct.sbsxzch);
      }
      if (struct.isSetGjsj()) {
        oprot.writeI32(struct.gjsj);
      }
      if (struct.isSetJd()) {
        oprot.writeI32(struct.jd);
      }
      if (struct.isSetWd()) {
        oprot.writeI32(struct.wd);
      }
      if (struct.isSetSssd()) {
        oprot.writeByte(struct.sssd);
      }
      if (struct.isSetFxj()) {
        oprot.writeI16(struct.fxj);
      }
      if (struct.isSetYxfx()) {
        oprot.writeByte(struct.yxfx);
      }
      if (struct.isSetYyzt()) {
        oprot.writeByte(struct.yyzt);
      }
      if (struct.isSetGjlx()) {
        oprot.writeByte(struct.gjlx);
      }
      if (struct.isSetYxbz()) {
        oprot.writeByte(struct.yxbz);
      }
      if (struct.isSetQsbs()) {
        oprot.writeByte(struct.qsbs);
      }
      if (struct.isSetZgsz()) {
        oprot.writeByte(struct.zgsz);
      }
      if (struct.isSetGjsc()) {
        oprot.writeByte(struct.gjsc);
      }
      if (struct.isSetZdxh()) {
        oprot.writeByte(struct.zdxh);
      }
      if (struct.isSetGjyy()) {
        oprot.writeString(struct.gjyy);
      }
      if (struct.isSetBfbs()) {
        oprot.writeByte(struct.bfbs);
      }
      if (struct.isSetPtbm()) {
        oprot.writeByte(struct.ptbm);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GJSJDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(23);
      if (incoming.get(0)) {
        struct.actionCMDType = ActionCMDType.findByValue(iprot.readI32());
        struct.setActionCMDTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.xlid = iprot.readString();
        struct.setXlidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.xlbh = iprot.readString();
        struct.setXlbhIsSet(true);
      }
      if (incoming.get(3)) {
        struct.xlmc = iprot.readString();
        struct.setXlmcIsSet(true);
      }
      if (incoming.get(4)) {
        struct.clid = iprot.readString();
        struct.setClidIsSet(true);
      }
      if (incoming.get(5)) {
        struct.empId = iprot.readString();
        struct.setEmpIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.sbsxzch = iprot.readString();
        struct.setSbsxzchIsSet(true);
      }
      if (incoming.get(7)) {
        struct.gjsj = iprot.readI32();
        struct.setGjsjIsSet(true);
      }
      if (incoming.get(8)) {
        struct.jd = iprot.readI32();
        struct.setJdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.wd = iprot.readI32();
        struct.setWdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.sssd = iprot.readByte();
        struct.setSssdIsSet(true);
      }
      if (incoming.get(11)) {
        struct.fxj = iprot.readI16();
        struct.setFxjIsSet(true);
      }
      if (incoming.get(12)) {
        struct.yxfx = iprot.readByte();
        struct.setYxfxIsSet(true);
      }
      if (incoming.get(13)) {
        struct.yyzt = iprot.readByte();
        struct.setYyztIsSet(true);
      }
      if (incoming.get(14)) {
        struct.gjlx = iprot.readByte();
        struct.setGjlxIsSet(true);
      }
      if (incoming.get(15)) {
        struct.yxbz = iprot.readByte();
        struct.setYxbzIsSet(true);
      }
      if (incoming.get(16)) {
        struct.qsbs = iprot.readByte();
        struct.setQsbsIsSet(true);
      }
      if (incoming.get(17)) {
        struct.zgsz = iprot.readByte();
        struct.setZgszIsSet(true);
      }
      if (incoming.get(18)) {
        struct.gjsc = iprot.readByte();
        struct.setGjscIsSet(true);
      }
      if (incoming.get(19)) {
        struct.zdxh = iprot.readByte();
        struct.setZdxhIsSet(true);
      }
      if (incoming.get(20)) {
        struct.gjyy = iprot.readString();
        struct.setGjyyIsSet(true);
      }
      if (incoming.get(21)) {
        struct.bfbs = iprot.readByte();
        struct.setBfbsIsSet(true);
      }
      if (incoming.get(22)) {
        struct.ptbm = iprot.readByte();
        struct.setPtbmIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

