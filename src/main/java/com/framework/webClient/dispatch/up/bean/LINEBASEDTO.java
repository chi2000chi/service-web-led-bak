/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.framework.webClient.dispatch.up.bean;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-04-24")
public class LINEBASEDTO implements org.apache.thrift.TBase<LINEBASEDTO, LINEBASEDTO._Fields>, java.io.Serializable, Cloneable, Comparable<LINEBASEDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LINEBASEDTO");

  private static final org.apache.thrift.protocol.TField ACTION_CMDTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("actionCMDType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField XLBH_FIELD_DESC = new org.apache.thrift.protocol.TField("xlbh", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField XLCD_FIELD_DESC = new org.apache.thrift.protocol.TField("xlcd", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField XJSFZSCSJ_FIELD_DESC = new org.apache.thrift.protocol.TField("xjsfzscsj", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField XJSFZMCSJ_FIELD_DESC = new org.apache.thrift.protocol.TField("xjsfzmcsj", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField XJZDZSCSJ_FIELD_DESC = new org.apache.thrift.protocol.TField("xjzdzscsj", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField XJZDZMCSJ_FIELD_DESC = new org.apache.thrift.protocol.TField("xjzdzmcsj", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField DJSFZSCSJ_FIELD_DESC = new org.apache.thrift.protocol.TField("djsfzscsj", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField DJSFZMCSJ_FIELD_DESC = new org.apache.thrift.protocol.TField("djsfzmcsj", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DJZDZSCSJ_FIELD_DESC = new org.apache.thrift.protocol.TField("djzdzscsj", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField DJZDZMCSJ_FIELD_DESC = new org.apache.thrift.protocol.TField("djzdzmcsj", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField PZ_FIELD_DESC = new org.apache.thrift.protocol.TField("pz", org.apache.thrift.protocol.TType.BYTE, (short)12);
  private static final org.apache.thrift.protocol.TField QBJG_FIELD_DESC = new org.apache.thrift.protocol.TField("qbjg", org.apache.thrift.protocol.TType.BYTE, (short)13);
  private static final org.apache.thrift.protocol.TField QCJG_FIELD_DESC = new org.apache.thrift.protocol.TField("qcjg", org.apache.thrift.protocol.TType.BYTE, (short)14);
  private static final org.apache.thrift.protocol.TField SFHX_FIELD_DESC = new org.apache.thrift.protocol.TField("sfhx", org.apache.thrift.protocol.TType.BYTE, (short)15);
  private static final org.apache.thrift.protocol.TField SFLYGJ_FIELD_DESC = new org.apache.thrift.protocol.TField("sflygj", org.apache.thrift.protocol.TType.BYTE, (short)16);
  private static final org.apache.thrift.protocol.TField XLMC_FIELD_DESC = new org.apache.thrift.protocol.TField("xlmc", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField SXSZMC_FIELD_DESC = new org.apache.thrift.protocol.TField("sxszmc", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField SXMZMC_FIELD_DESC = new org.apache.thrift.protocol.TField("sxmzmc", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField XXSZMC_FIELD_DESC = new org.apache.thrift.protocol.TField("xxszmc", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField XXMZMC_FIELD_DESC = new org.apache.thrift.protocol.TField("xxmzmc", org.apache.thrift.protocol.TType.STRING, (short)21);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LINEBASEDTOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LINEBASEDTOTupleSchemeFactory();

  /**
   * 
   * @see ActionCMDType
   */
  public ActionCMDType actionCMDType; // required
  public int xlbh; // required
  public byte xlcd; // required
  public java.lang.String xjsfzscsj; // required
  public java.lang.String xjsfzmcsj; // required
  public java.lang.String xjzdzscsj; // required
  public java.lang.String xjzdzmcsj; // required
  public java.lang.String djsfzscsj; // required
  public java.lang.String djsfzmcsj; // required
  public java.lang.String djzdzscsj; // required
  public java.lang.String djzdzmcsj; // required
  public byte pz; // required
  public byte qbjg; // required
  public byte qcjg; // required
  public byte sfhx; // required
  public byte sflygj; // required
  public java.lang.String xlmc; // required
  public java.lang.String sxszmc; // required
  public java.lang.String sxmzmc; // required
  public java.lang.String xxszmc; // required
  public java.lang.String xxmzmc; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see ActionCMDType
     */
    ACTION_CMDTYPE((short)1, "actionCMDType"),
    XLBH((short)2, "xlbh"),
    XLCD((short)3, "xlcd"),
    XJSFZSCSJ((short)4, "xjsfzscsj"),
    XJSFZMCSJ((short)5, "xjsfzmcsj"),
    XJZDZSCSJ((short)6, "xjzdzscsj"),
    XJZDZMCSJ((short)7, "xjzdzmcsj"),
    DJSFZSCSJ((short)8, "djsfzscsj"),
    DJSFZMCSJ((short)9, "djsfzmcsj"),
    DJZDZSCSJ((short)10, "djzdzscsj"),
    DJZDZMCSJ((short)11, "djzdzmcsj"),
    PZ((short)12, "pz"),
    QBJG((short)13, "qbjg"),
    QCJG((short)14, "qcjg"),
    SFHX((short)15, "sfhx"),
    SFLYGJ((short)16, "sflygj"),
    XLMC((short)17, "xlmc"),
    SXSZMC((short)18, "sxszmc"),
    SXMZMC((short)19, "sxmzmc"),
    XXSZMC((short)20, "xxszmc"),
    XXMZMC((short)21, "xxmzmc");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACTION_CMDTYPE
          return ACTION_CMDTYPE;
        case 2: // XLBH
          return XLBH;
        case 3: // XLCD
          return XLCD;
        case 4: // XJSFZSCSJ
          return XJSFZSCSJ;
        case 5: // XJSFZMCSJ
          return XJSFZMCSJ;
        case 6: // XJZDZSCSJ
          return XJZDZSCSJ;
        case 7: // XJZDZMCSJ
          return XJZDZMCSJ;
        case 8: // DJSFZSCSJ
          return DJSFZSCSJ;
        case 9: // DJSFZMCSJ
          return DJSFZMCSJ;
        case 10: // DJZDZSCSJ
          return DJZDZSCSJ;
        case 11: // DJZDZMCSJ
          return DJZDZMCSJ;
        case 12: // PZ
          return PZ;
        case 13: // QBJG
          return QBJG;
        case 14: // QCJG
          return QCJG;
        case 15: // SFHX
          return SFHX;
        case 16: // SFLYGJ
          return SFLYGJ;
        case 17: // XLMC
          return XLMC;
        case 18: // SXSZMC
          return SXSZMC;
        case 19: // SXMZMC
          return SXMZMC;
        case 20: // XXSZMC
          return XXSZMC;
        case 21: // XXMZMC
          return XXMZMC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __XLBH_ISSET_ID = 0;
  private static final int __XLCD_ISSET_ID = 1;
  private static final int __PZ_ISSET_ID = 2;
  private static final int __QBJG_ISSET_ID = 3;
  private static final int __QCJG_ISSET_ID = 4;
  private static final int __SFHX_ISSET_ID = 5;
  private static final int __SFLYGJ_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACTION_CMDTYPE, new org.apache.thrift.meta_data.FieldMetaData("actionCMDType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ActionCMDType.class)));
    tmpMap.put(_Fields.XLBH, new org.apache.thrift.meta_data.FieldMetaData("xlbh", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.XLCD, new org.apache.thrift.meta_data.FieldMetaData("xlcd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.XJSFZSCSJ, new org.apache.thrift.meta_data.FieldMetaData("xjsfzscsj", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.XJSFZMCSJ, new org.apache.thrift.meta_data.FieldMetaData("xjsfzmcsj", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.XJZDZSCSJ, new org.apache.thrift.meta_data.FieldMetaData("xjzdzscsj", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.XJZDZMCSJ, new org.apache.thrift.meta_data.FieldMetaData("xjzdzmcsj", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DJSFZSCSJ, new org.apache.thrift.meta_data.FieldMetaData("djsfzscsj", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DJSFZMCSJ, new org.apache.thrift.meta_data.FieldMetaData("djsfzmcsj", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DJZDZSCSJ, new org.apache.thrift.meta_data.FieldMetaData("djzdzscsj", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DJZDZMCSJ, new org.apache.thrift.meta_data.FieldMetaData("djzdzmcsj", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PZ, new org.apache.thrift.meta_data.FieldMetaData("pz", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.QBJG, new org.apache.thrift.meta_data.FieldMetaData("qbjg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.QCJG, new org.apache.thrift.meta_data.FieldMetaData("qcjg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SFHX, new org.apache.thrift.meta_data.FieldMetaData("sfhx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SFLYGJ, new org.apache.thrift.meta_data.FieldMetaData("sflygj", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.XLMC, new org.apache.thrift.meta_data.FieldMetaData("xlmc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SXSZMC, new org.apache.thrift.meta_data.FieldMetaData("sxszmc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SXMZMC, new org.apache.thrift.meta_data.FieldMetaData("sxmzmc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.XXSZMC, new org.apache.thrift.meta_data.FieldMetaData("xxszmc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.XXMZMC, new org.apache.thrift.meta_data.FieldMetaData("xxmzmc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LINEBASEDTO.class, metaDataMap);
  }

  public LINEBASEDTO() {
  }

  public LINEBASEDTO(
    ActionCMDType actionCMDType,
    int xlbh,
    byte xlcd,
    java.lang.String xjsfzscsj,
    java.lang.String xjsfzmcsj,
    java.lang.String xjzdzscsj,
    java.lang.String xjzdzmcsj,
    java.lang.String djsfzscsj,
    java.lang.String djsfzmcsj,
    java.lang.String djzdzscsj,
    java.lang.String djzdzmcsj,
    byte pz,
    byte qbjg,
    byte qcjg,
    byte sfhx,
    byte sflygj,
    java.lang.String xlmc,
    java.lang.String sxszmc,
    java.lang.String sxmzmc,
    java.lang.String xxszmc,
    java.lang.String xxmzmc)
  {
    this();
    this.actionCMDType = actionCMDType;
    this.xlbh = xlbh;
    setXlbhIsSet(true);
    this.xlcd = xlcd;
    setXlcdIsSet(true);
    this.xjsfzscsj = xjsfzscsj;
    this.xjsfzmcsj = xjsfzmcsj;
    this.xjzdzscsj = xjzdzscsj;
    this.xjzdzmcsj = xjzdzmcsj;
    this.djsfzscsj = djsfzscsj;
    this.djsfzmcsj = djsfzmcsj;
    this.djzdzscsj = djzdzscsj;
    this.djzdzmcsj = djzdzmcsj;
    this.pz = pz;
    setPzIsSet(true);
    this.qbjg = qbjg;
    setQbjgIsSet(true);
    this.qcjg = qcjg;
    setQcjgIsSet(true);
    this.sfhx = sfhx;
    setSfhxIsSet(true);
    this.sflygj = sflygj;
    setSflygjIsSet(true);
    this.xlmc = xlmc;
    this.sxszmc = sxszmc;
    this.sxmzmc = sxmzmc;
    this.xxszmc = xxszmc;
    this.xxmzmc = xxmzmc;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LINEBASEDTO(LINEBASEDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetActionCMDType()) {
      this.actionCMDType = other.actionCMDType;
    }
    this.xlbh = other.xlbh;
    this.xlcd = other.xlcd;
    if (other.isSetXjsfzscsj()) {
      this.xjsfzscsj = other.xjsfzscsj;
    }
    if (other.isSetXjsfzmcsj()) {
      this.xjsfzmcsj = other.xjsfzmcsj;
    }
    if (other.isSetXjzdzscsj()) {
      this.xjzdzscsj = other.xjzdzscsj;
    }
    if (other.isSetXjzdzmcsj()) {
      this.xjzdzmcsj = other.xjzdzmcsj;
    }
    if (other.isSetDjsfzscsj()) {
      this.djsfzscsj = other.djsfzscsj;
    }
    if (other.isSetDjsfzmcsj()) {
      this.djsfzmcsj = other.djsfzmcsj;
    }
    if (other.isSetDjzdzscsj()) {
      this.djzdzscsj = other.djzdzscsj;
    }
    if (other.isSetDjzdzmcsj()) {
      this.djzdzmcsj = other.djzdzmcsj;
    }
    this.pz = other.pz;
    this.qbjg = other.qbjg;
    this.qcjg = other.qcjg;
    this.sfhx = other.sfhx;
    this.sflygj = other.sflygj;
    if (other.isSetXlmc()) {
      this.xlmc = other.xlmc;
    }
    if (other.isSetSxszmc()) {
      this.sxszmc = other.sxszmc;
    }
    if (other.isSetSxmzmc()) {
      this.sxmzmc = other.sxmzmc;
    }
    if (other.isSetXxszmc()) {
      this.xxszmc = other.xxszmc;
    }
    if (other.isSetXxmzmc()) {
      this.xxmzmc = other.xxmzmc;
    }
  }

  public LINEBASEDTO deepCopy() {
    return new LINEBASEDTO(this);
  }

  @Override
  public void clear() {
    this.actionCMDType = null;
    setXlbhIsSet(false);
    this.xlbh = 0;
    setXlcdIsSet(false);
    this.xlcd = 0;
    this.xjsfzscsj = null;
    this.xjsfzmcsj = null;
    this.xjzdzscsj = null;
    this.xjzdzmcsj = null;
    this.djsfzscsj = null;
    this.djsfzmcsj = null;
    this.djzdzscsj = null;
    this.djzdzmcsj = null;
    setPzIsSet(false);
    this.pz = 0;
    setQbjgIsSet(false);
    this.qbjg = 0;
    setQcjgIsSet(false);
    this.qcjg = 0;
    setSfhxIsSet(false);
    this.sfhx = 0;
    setSflygjIsSet(false);
    this.sflygj = 0;
    this.xlmc = null;
    this.sxszmc = null;
    this.sxmzmc = null;
    this.xxszmc = null;
    this.xxmzmc = null;
  }

  /**
   * 
   * @see ActionCMDType
   */
  public ActionCMDType getActionCMDType() {
    return this.actionCMDType;
  }

  /**
   * 
   * @see ActionCMDType
   */
  public LINEBASEDTO setActionCMDType(ActionCMDType actionCMDType) {
    this.actionCMDType = actionCMDType;
    return this;
  }

  public void unsetActionCMDType() {
    this.actionCMDType = null;
  }

  /** Returns true if field actionCMDType is set (has been assigned a value) and false otherwise */
  public boolean isSetActionCMDType() {
    return this.actionCMDType != null;
  }

  public void setActionCMDTypeIsSet(boolean value) {
    if (!value) {
      this.actionCMDType = null;
    }
  }

  public int getXlbh() {
    return this.xlbh;
  }

  public LINEBASEDTO setXlbh(int xlbh) {
    this.xlbh = xlbh;
    setXlbhIsSet(true);
    return this;
  }

  public void unsetXlbh() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __XLBH_ISSET_ID);
  }

  /** Returns true if field xlbh is set (has been assigned a value) and false otherwise */
  public boolean isSetXlbh() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __XLBH_ISSET_ID);
  }

  public void setXlbhIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __XLBH_ISSET_ID, value);
  }

  public byte getXlcd() {
    return this.xlcd;
  }

  public LINEBASEDTO setXlcd(byte xlcd) {
    this.xlcd = xlcd;
    setXlcdIsSet(true);
    return this;
  }

  public void unsetXlcd() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __XLCD_ISSET_ID);
  }

  /** Returns true if field xlcd is set (has been assigned a value) and false otherwise */
  public boolean isSetXlcd() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __XLCD_ISSET_ID);
  }

  public void setXlcdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __XLCD_ISSET_ID, value);
  }

  public java.lang.String getXjsfzscsj() {
    return this.xjsfzscsj;
  }

  public LINEBASEDTO setXjsfzscsj(java.lang.String xjsfzscsj) {
    this.xjsfzscsj = xjsfzscsj;
    return this;
  }

  public void unsetXjsfzscsj() {
    this.xjsfzscsj = null;
  }

  /** Returns true if field xjsfzscsj is set (has been assigned a value) and false otherwise */
  public boolean isSetXjsfzscsj() {
    return this.xjsfzscsj != null;
  }

  public void setXjsfzscsjIsSet(boolean value) {
    if (!value) {
      this.xjsfzscsj = null;
    }
  }

  public java.lang.String getXjsfzmcsj() {
    return this.xjsfzmcsj;
  }

  public LINEBASEDTO setXjsfzmcsj(java.lang.String xjsfzmcsj) {
    this.xjsfzmcsj = xjsfzmcsj;
    return this;
  }

  public void unsetXjsfzmcsj() {
    this.xjsfzmcsj = null;
  }

  /** Returns true if field xjsfzmcsj is set (has been assigned a value) and false otherwise */
  public boolean isSetXjsfzmcsj() {
    return this.xjsfzmcsj != null;
  }

  public void setXjsfzmcsjIsSet(boolean value) {
    if (!value) {
      this.xjsfzmcsj = null;
    }
  }

  public java.lang.String getXjzdzscsj() {
    return this.xjzdzscsj;
  }

  public LINEBASEDTO setXjzdzscsj(java.lang.String xjzdzscsj) {
    this.xjzdzscsj = xjzdzscsj;
    return this;
  }

  public void unsetXjzdzscsj() {
    this.xjzdzscsj = null;
  }

  /** Returns true if field xjzdzscsj is set (has been assigned a value) and false otherwise */
  public boolean isSetXjzdzscsj() {
    return this.xjzdzscsj != null;
  }

  public void setXjzdzscsjIsSet(boolean value) {
    if (!value) {
      this.xjzdzscsj = null;
    }
  }

  public java.lang.String getXjzdzmcsj() {
    return this.xjzdzmcsj;
  }

  public LINEBASEDTO setXjzdzmcsj(java.lang.String xjzdzmcsj) {
    this.xjzdzmcsj = xjzdzmcsj;
    return this;
  }

  public void unsetXjzdzmcsj() {
    this.xjzdzmcsj = null;
  }

  /** Returns true if field xjzdzmcsj is set (has been assigned a value) and false otherwise */
  public boolean isSetXjzdzmcsj() {
    return this.xjzdzmcsj != null;
  }

  public void setXjzdzmcsjIsSet(boolean value) {
    if (!value) {
      this.xjzdzmcsj = null;
    }
  }

  public java.lang.String getDjsfzscsj() {
    return this.djsfzscsj;
  }

  public LINEBASEDTO setDjsfzscsj(java.lang.String djsfzscsj) {
    this.djsfzscsj = djsfzscsj;
    return this;
  }

  public void unsetDjsfzscsj() {
    this.djsfzscsj = null;
  }

  /** Returns true if field djsfzscsj is set (has been assigned a value) and false otherwise */
  public boolean isSetDjsfzscsj() {
    return this.djsfzscsj != null;
  }

  public void setDjsfzscsjIsSet(boolean value) {
    if (!value) {
      this.djsfzscsj = null;
    }
  }

  public java.lang.String getDjsfzmcsj() {
    return this.djsfzmcsj;
  }

  public LINEBASEDTO setDjsfzmcsj(java.lang.String djsfzmcsj) {
    this.djsfzmcsj = djsfzmcsj;
    return this;
  }

  public void unsetDjsfzmcsj() {
    this.djsfzmcsj = null;
  }

  /** Returns true if field djsfzmcsj is set (has been assigned a value) and false otherwise */
  public boolean isSetDjsfzmcsj() {
    return this.djsfzmcsj != null;
  }

  public void setDjsfzmcsjIsSet(boolean value) {
    if (!value) {
      this.djsfzmcsj = null;
    }
  }

  public java.lang.String getDjzdzscsj() {
    return this.djzdzscsj;
  }

  public LINEBASEDTO setDjzdzscsj(java.lang.String djzdzscsj) {
    this.djzdzscsj = djzdzscsj;
    return this;
  }

  public void unsetDjzdzscsj() {
    this.djzdzscsj = null;
  }

  /** Returns true if field djzdzscsj is set (has been assigned a value) and false otherwise */
  public boolean isSetDjzdzscsj() {
    return this.djzdzscsj != null;
  }

  public void setDjzdzscsjIsSet(boolean value) {
    if (!value) {
      this.djzdzscsj = null;
    }
  }

  public java.lang.String getDjzdzmcsj() {
    return this.djzdzmcsj;
  }

  public LINEBASEDTO setDjzdzmcsj(java.lang.String djzdzmcsj) {
    this.djzdzmcsj = djzdzmcsj;
    return this;
  }

  public void unsetDjzdzmcsj() {
    this.djzdzmcsj = null;
  }

  /** Returns true if field djzdzmcsj is set (has been assigned a value) and false otherwise */
  public boolean isSetDjzdzmcsj() {
    return this.djzdzmcsj != null;
  }

  public void setDjzdzmcsjIsSet(boolean value) {
    if (!value) {
      this.djzdzmcsj = null;
    }
  }

  public byte getPz() {
    return this.pz;
  }

  public LINEBASEDTO setPz(byte pz) {
    this.pz = pz;
    setPzIsSet(true);
    return this;
  }

  public void unsetPz() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PZ_ISSET_ID);
  }

  /** Returns true if field pz is set (has been assigned a value) and false otherwise */
  public boolean isSetPz() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PZ_ISSET_ID);
  }

  public void setPzIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PZ_ISSET_ID, value);
  }

  public byte getQbjg() {
    return this.qbjg;
  }

  public LINEBASEDTO setQbjg(byte qbjg) {
    this.qbjg = qbjg;
    setQbjgIsSet(true);
    return this;
  }

  public void unsetQbjg() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __QBJG_ISSET_ID);
  }

  /** Returns true if field qbjg is set (has been assigned a value) and false otherwise */
  public boolean isSetQbjg() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __QBJG_ISSET_ID);
  }

  public void setQbjgIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __QBJG_ISSET_ID, value);
  }

  public byte getQcjg() {
    return this.qcjg;
  }

  public LINEBASEDTO setQcjg(byte qcjg) {
    this.qcjg = qcjg;
    setQcjgIsSet(true);
    return this;
  }

  public void unsetQcjg() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __QCJG_ISSET_ID);
  }

  /** Returns true if field qcjg is set (has been assigned a value) and false otherwise */
  public boolean isSetQcjg() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __QCJG_ISSET_ID);
  }

  public void setQcjgIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __QCJG_ISSET_ID, value);
  }

  public byte getSfhx() {
    return this.sfhx;
  }

  public LINEBASEDTO setSfhx(byte sfhx) {
    this.sfhx = sfhx;
    setSfhxIsSet(true);
    return this;
  }

  public void unsetSfhx() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SFHX_ISSET_ID);
  }

  /** Returns true if field sfhx is set (has been assigned a value) and false otherwise */
  public boolean isSetSfhx() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SFHX_ISSET_ID);
  }

  public void setSfhxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SFHX_ISSET_ID, value);
  }

  public byte getSflygj() {
    return this.sflygj;
  }

  public LINEBASEDTO setSflygj(byte sflygj) {
    this.sflygj = sflygj;
    setSflygjIsSet(true);
    return this;
  }

  public void unsetSflygj() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SFLYGJ_ISSET_ID);
  }

  /** Returns true if field sflygj is set (has been assigned a value) and false otherwise */
  public boolean isSetSflygj() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SFLYGJ_ISSET_ID);
  }

  public void setSflygjIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SFLYGJ_ISSET_ID, value);
  }

  public java.lang.String getXlmc() {
    return this.xlmc;
  }

  public LINEBASEDTO setXlmc(java.lang.String xlmc) {
    this.xlmc = xlmc;
    return this;
  }

  public void unsetXlmc() {
    this.xlmc = null;
  }

  /** Returns true if field xlmc is set (has been assigned a value) and false otherwise */
  public boolean isSetXlmc() {
    return this.xlmc != null;
  }

  public void setXlmcIsSet(boolean value) {
    if (!value) {
      this.xlmc = null;
    }
  }

  public java.lang.String getSxszmc() {
    return this.sxszmc;
  }

  public LINEBASEDTO setSxszmc(java.lang.String sxszmc) {
    this.sxszmc = sxszmc;
    return this;
  }

  public void unsetSxszmc() {
    this.sxszmc = null;
  }

  /** Returns true if field sxszmc is set (has been assigned a value) and false otherwise */
  public boolean isSetSxszmc() {
    return this.sxszmc != null;
  }

  public void setSxszmcIsSet(boolean value) {
    if (!value) {
      this.sxszmc = null;
    }
  }

  public java.lang.String getSxmzmc() {
    return this.sxmzmc;
  }

  public LINEBASEDTO setSxmzmc(java.lang.String sxmzmc) {
    this.sxmzmc = sxmzmc;
    return this;
  }

  public void unsetSxmzmc() {
    this.sxmzmc = null;
  }

  /** Returns true if field sxmzmc is set (has been assigned a value) and false otherwise */
  public boolean isSetSxmzmc() {
    return this.sxmzmc != null;
  }

  public void setSxmzmcIsSet(boolean value) {
    if (!value) {
      this.sxmzmc = null;
    }
  }

  public java.lang.String getXxszmc() {
    return this.xxszmc;
  }

  public LINEBASEDTO setXxszmc(java.lang.String xxszmc) {
    this.xxszmc = xxszmc;
    return this;
  }

  public void unsetXxszmc() {
    this.xxszmc = null;
  }

  /** Returns true if field xxszmc is set (has been assigned a value) and false otherwise */
  public boolean isSetXxszmc() {
    return this.xxszmc != null;
  }

  public void setXxszmcIsSet(boolean value) {
    if (!value) {
      this.xxszmc = null;
    }
  }

  public java.lang.String getXxmzmc() {
    return this.xxmzmc;
  }

  public LINEBASEDTO setXxmzmc(java.lang.String xxmzmc) {
    this.xxmzmc = xxmzmc;
    return this;
  }

  public void unsetXxmzmc() {
    this.xxmzmc = null;
  }

  /** Returns true if field xxmzmc is set (has been assigned a value) and false otherwise */
  public boolean isSetXxmzmc() {
    return this.xxmzmc != null;
  }

  public void setXxmzmcIsSet(boolean value) {
    if (!value) {
      this.xxmzmc = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ACTION_CMDTYPE:
      if (value == null) {
        unsetActionCMDType();
      } else {
        setActionCMDType((ActionCMDType)value);
      }
      break;

    case XLBH:
      if (value == null) {
        unsetXlbh();
      } else {
        setXlbh((java.lang.Integer)value);
      }
      break;

    case XLCD:
      if (value == null) {
        unsetXlcd();
      } else {
        setXlcd((java.lang.Byte)value);
      }
      break;

    case XJSFZSCSJ:
      if (value == null) {
        unsetXjsfzscsj();
      } else {
        setXjsfzscsj((java.lang.String)value);
      }
      break;

    case XJSFZMCSJ:
      if (value == null) {
        unsetXjsfzmcsj();
      } else {
        setXjsfzmcsj((java.lang.String)value);
      }
      break;

    case XJZDZSCSJ:
      if (value == null) {
        unsetXjzdzscsj();
      } else {
        setXjzdzscsj((java.lang.String)value);
      }
      break;

    case XJZDZMCSJ:
      if (value == null) {
        unsetXjzdzmcsj();
      } else {
        setXjzdzmcsj((java.lang.String)value);
      }
      break;

    case DJSFZSCSJ:
      if (value == null) {
        unsetDjsfzscsj();
      } else {
        setDjsfzscsj((java.lang.String)value);
      }
      break;

    case DJSFZMCSJ:
      if (value == null) {
        unsetDjsfzmcsj();
      } else {
        setDjsfzmcsj((java.lang.String)value);
      }
      break;

    case DJZDZSCSJ:
      if (value == null) {
        unsetDjzdzscsj();
      } else {
        setDjzdzscsj((java.lang.String)value);
      }
      break;

    case DJZDZMCSJ:
      if (value == null) {
        unsetDjzdzmcsj();
      } else {
        setDjzdzmcsj((java.lang.String)value);
      }
      break;

    case PZ:
      if (value == null) {
        unsetPz();
      } else {
        setPz((java.lang.Byte)value);
      }
      break;

    case QBJG:
      if (value == null) {
        unsetQbjg();
      } else {
        setQbjg((java.lang.Byte)value);
      }
      break;

    case QCJG:
      if (value == null) {
        unsetQcjg();
      } else {
        setQcjg((java.lang.Byte)value);
      }
      break;

    case SFHX:
      if (value == null) {
        unsetSfhx();
      } else {
        setSfhx((java.lang.Byte)value);
      }
      break;

    case SFLYGJ:
      if (value == null) {
        unsetSflygj();
      } else {
        setSflygj((java.lang.Byte)value);
      }
      break;

    case XLMC:
      if (value == null) {
        unsetXlmc();
      } else {
        setXlmc((java.lang.String)value);
      }
      break;

    case SXSZMC:
      if (value == null) {
        unsetSxszmc();
      } else {
        setSxszmc((java.lang.String)value);
      }
      break;

    case SXMZMC:
      if (value == null) {
        unsetSxmzmc();
      } else {
        setSxmzmc((java.lang.String)value);
      }
      break;

    case XXSZMC:
      if (value == null) {
        unsetXxszmc();
      } else {
        setXxszmc((java.lang.String)value);
      }
      break;

    case XXMZMC:
      if (value == null) {
        unsetXxmzmc();
      } else {
        setXxmzmc((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ACTION_CMDTYPE:
      return getActionCMDType();

    case XLBH:
      return getXlbh();

    case XLCD:
      return getXlcd();

    case XJSFZSCSJ:
      return getXjsfzscsj();

    case XJSFZMCSJ:
      return getXjsfzmcsj();

    case XJZDZSCSJ:
      return getXjzdzscsj();

    case XJZDZMCSJ:
      return getXjzdzmcsj();

    case DJSFZSCSJ:
      return getDjsfzscsj();

    case DJSFZMCSJ:
      return getDjsfzmcsj();

    case DJZDZSCSJ:
      return getDjzdzscsj();

    case DJZDZMCSJ:
      return getDjzdzmcsj();

    case PZ:
      return getPz();

    case QBJG:
      return getQbjg();

    case QCJG:
      return getQcjg();

    case SFHX:
      return getSfhx();

    case SFLYGJ:
      return getSflygj();

    case XLMC:
      return getXlmc();

    case SXSZMC:
      return getSxszmc();

    case SXMZMC:
      return getSxmzmc();

    case XXSZMC:
      return getXxszmc();

    case XXMZMC:
      return getXxmzmc();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ACTION_CMDTYPE:
      return isSetActionCMDType();
    case XLBH:
      return isSetXlbh();
    case XLCD:
      return isSetXlcd();
    case XJSFZSCSJ:
      return isSetXjsfzscsj();
    case XJSFZMCSJ:
      return isSetXjsfzmcsj();
    case XJZDZSCSJ:
      return isSetXjzdzscsj();
    case XJZDZMCSJ:
      return isSetXjzdzmcsj();
    case DJSFZSCSJ:
      return isSetDjsfzscsj();
    case DJSFZMCSJ:
      return isSetDjsfzmcsj();
    case DJZDZSCSJ:
      return isSetDjzdzscsj();
    case DJZDZMCSJ:
      return isSetDjzdzmcsj();
    case PZ:
      return isSetPz();
    case QBJG:
      return isSetQbjg();
    case QCJG:
      return isSetQcjg();
    case SFHX:
      return isSetSfhx();
    case SFLYGJ:
      return isSetSflygj();
    case XLMC:
      return isSetXlmc();
    case SXSZMC:
      return isSetSxszmc();
    case SXMZMC:
      return isSetSxmzmc();
    case XXSZMC:
      return isSetXxszmc();
    case XXMZMC:
      return isSetXxmzmc();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof LINEBASEDTO)
      return this.equals((LINEBASEDTO)that);
    return false;
  }

  public boolean equals(LINEBASEDTO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_actionCMDType = true && this.isSetActionCMDType();
    boolean that_present_actionCMDType = true && that.isSetActionCMDType();
    if (this_present_actionCMDType || that_present_actionCMDType) {
      if (!(this_present_actionCMDType && that_present_actionCMDType))
        return false;
      if (!this.actionCMDType.equals(that.actionCMDType))
        return false;
    }

    boolean this_present_xlbh = true;
    boolean that_present_xlbh = true;
    if (this_present_xlbh || that_present_xlbh) {
      if (!(this_present_xlbh && that_present_xlbh))
        return false;
      if (this.xlbh != that.xlbh)
        return false;
    }

    boolean this_present_xlcd = true;
    boolean that_present_xlcd = true;
    if (this_present_xlcd || that_present_xlcd) {
      if (!(this_present_xlcd && that_present_xlcd))
        return false;
      if (this.xlcd != that.xlcd)
        return false;
    }

    boolean this_present_xjsfzscsj = true && this.isSetXjsfzscsj();
    boolean that_present_xjsfzscsj = true && that.isSetXjsfzscsj();
    if (this_present_xjsfzscsj || that_present_xjsfzscsj) {
      if (!(this_present_xjsfzscsj && that_present_xjsfzscsj))
        return false;
      if (!this.xjsfzscsj.equals(that.xjsfzscsj))
        return false;
    }

    boolean this_present_xjsfzmcsj = true && this.isSetXjsfzmcsj();
    boolean that_present_xjsfzmcsj = true && that.isSetXjsfzmcsj();
    if (this_present_xjsfzmcsj || that_present_xjsfzmcsj) {
      if (!(this_present_xjsfzmcsj && that_present_xjsfzmcsj))
        return false;
      if (!this.xjsfzmcsj.equals(that.xjsfzmcsj))
        return false;
    }

    boolean this_present_xjzdzscsj = true && this.isSetXjzdzscsj();
    boolean that_present_xjzdzscsj = true && that.isSetXjzdzscsj();
    if (this_present_xjzdzscsj || that_present_xjzdzscsj) {
      if (!(this_present_xjzdzscsj && that_present_xjzdzscsj))
        return false;
      if (!this.xjzdzscsj.equals(that.xjzdzscsj))
        return false;
    }

    boolean this_present_xjzdzmcsj = true && this.isSetXjzdzmcsj();
    boolean that_present_xjzdzmcsj = true && that.isSetXjzdzmcsj();
    if (this_present_xjzdzmcsj || that_present_xjzdzmcsj) {
      if (!(this_present_xjzdzmcsj && that_present_xjzdzmcsj))
        return false;
      if (!this.xjzdzmcsj.equals(that.xjzdzmcsj))
        return false;
    }

    boolean this_present_djsfzscsj = true && this.isSetDjsfzscsj();
    boolean that_present_djsfzscsj = true && that.isSetDjsfzscsj();
    if (this_present_djsfzscsj || that_present_djsfzscsj) {
      if (!(this_present_djsfzscsj && that_present_djsfzscsj))
        return false;
      if (!this.djsfzscsj.equals(that.djsfzscsj))
        return false;
    }

    boolean this_present_djsfzmcsj = true && this.isSetDjsfzmcsj();
    boolean that_present_djsfzmcsj = true && that.isSetDjsfzmcsj();
    if (this_present_djsfzmcsj || that_present_djsfzmcsj) {
      if (!(this_present_djsfzmcsj && that_present_djsfzmcsj))
        return false;
      if (!this.djsfzmcsj.equals(that.djsfzmcsj))
        return false;
    }

    boolean this_present_djzdzscsj = true && this.isSetDjzdzscsj();
    boolean that_present_djzdzscsj = true && that.isSetDjzdzscsj();
    if (this_present_djzdzscsj || that_present_djzdzscsj) {
      if (!(this_present_djzdzscsj && that_present_djzdzscsj))
        return false;
      if (!this.djzdzscsj.equals(that.djzdzscsj))
        return false;
    }

    boolean this_present_djzdzmcsj = true && this.isSetDjzdzmcsj();
    boolean that_present_djzdzmcsj = true && that.isSetDjzdzmcsj();
    if (this_present_djzdzmcsj || that_present_djzdzmcsj) {
      if (!(this_present_djzdzmcsj && that_present_djzdzmcsj))
        return false;
      if (!this.djzdzmcsj.equals(that.djzdzmcsj))
        return false;
    }

    boolean this_present_pz = true;
    boolean that_present_pz = true;
    if (this_present_pz || that_present_pz) {
      if (!(this_present_pz && that_present_pz))
        return false;
      if (this.pz != that.pz)
        return false;
    }

    boolean this_present_qbjg = true;
    boolean that_present_qbjg = true;
    if (this_present_qbjg || that_present_qbjg) {
      if (!(this_present_qbjg && that_present_qbjg))
        return false;
      if (this.qbjg != that.qbjg)
        return false;
    }

    boolean this_present_qcjg = true;
    boolean that_present_qcjg = true;
    if (this_present_qcjg || that_present_qcjg) {
      if (!(this_present_qcjg && that_present_qcjg))
        return false;
      if (this.qcjg != that.qcjg)
        return false;
    }

    boolean this_present_sfhx = true;
    boolean that_present_sfhx = true;
    if (this_present_sfhx || that_present_sfhx) {
      if (!(this_present_sfhx && that_present_sfhx))
        return false;
      if (this.sfhx != that.sfhx)
        return false;
    }

    boolean this_present_sflygj = true;
    boolean that_present_sflygj = true;
    if (this_present_sflygj || that_present_sflygj) {
      if (!(this_present_sflygj && that_present_sflygj))
        return false;
      if (this.sflygj != that.sflygj)
        return false;
    }

    boolean this_present_xlmc = true && this.isSetXlmc();
    boolean that_present_xlmc = true && that.isSetXlmc();
    if (this_present_xlmc || that_present_xlmc) {
      if (!(this_present_xlmc && that_present_xlmc))
        return false;
      if (!this.xlmc.equals(that.xlmc))
        return false;
    }

    boolean this_present_sxszmc = true && this.isSetSxszmc();
    boolean that_present_sxszmc = true && that.isSetSxszmc();
    if (this_present_sxszmc || that_present_sxszmc) {
      if (!(this_present_sxszmc && that_present_sxszmc))
        return false;
      if (!this.sxszmc.equals(that.sxszmc))
        return false;
    }

    boolean this_present_sxmzmc = true && this.isSetSxmzmc();
    boolean that_present_sxmzmc = true && that.isSetSxmzmc();
    if (this_present_sxmzmc || that_present_sxmzmc) {
      if (!(this_present_sxmzmc && that_present_sxmzmc))
        return false;
      if (!this.sxmzmc.equals(that.sxmzmc))
        return false;
    }

    boolean this_present_xxszmc = true && this.isSetXxszmc();
    boolean that_present_xxszmc = true && that.isSetXxszmc();
    if (this_present_xxszmc || that_present_xxszmc) {
      if (!(this_present_xxszmc && that_present_xxszmc))
        return false;
      if (!this.xxszmc.equals(that.xxszmc))
        return false;
    }

    boolean this_present_xxmzmc = true && this.isSetXxmzmc();
    boolean that_present_xxmzmc = true && that.isSetXxmzmc();
    if (this_present_xxmzmc || that_present_xxmzmc) {
      if (!(this_present_xxmzmc && that_present_xxmzmc))
        return false;
      if (!this.xxmzmc.equals(that.xxmzmc))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetActionCMDType()) ? 131071 : 524287);
    if (isSetActionCMDType())
      hashCode = hashCode * 8191 + actionCMDType.getValue();

    hashCode = hashCode * 8191 + xlbh;

    hashCode = hashCode * 8191 + (int) (xlcd);

    hashCode = hashCode * 8191 + ((isSetXjsfzscsj()) ? 131071 : 524287);
    if (isSetXjsfzscsj())
      hashCode = hashCode * 8191 + xjsfzscsj.hashCode();

    hashCode = hashCode * 8191 + ((isSetXjsfzmcsj()) ? 131071 : 524287);
    if (isSetXjsfzmcsj())
      hashCode = hashCode * 8191 + xjsfzmcsj.hashCode();

    hashCode = hashCode * 8191 + ((isSetXjzdzscsj()) ? 131071 : 524287);
    if (isSetXjzdzscsj())
      hashCode = hashCode * 8191 + xjzdzscsj.hashCode();

    hashCode = hashCode * 8191 + ((isSetXjzdzmcsj()) ? 131071 : 524287);
    if (isSetXjzdzmcsj())
      hashCode = hashCode * 8191 + xjzdzmcsj.hashCode();

    hashCode = hashCode * 8191 + ((isSetDjsfzscsj()) ? 131071 : 524287);
    if (isSetDjsfzscsj())
      hashCode = hashCode * 8191 + djsfzscsj.hashCode();

    hashCode = hashCode * 8191 + ((isSetDjsfzmcsj()) ? 131071 : 524287);
    if (isSetDjsfzmcsj())
      hashCode = hashCode * 8191 + djsfzmcsj.hashCode();

    hashCode = hashCode * 8191 + ((isSetDjzdzscsj()) ? 131071 : 524287);
    if (isSetDjzdzscsj())
      hashCode = hashCode * 8191 + djzdzscsj.hashCode();

    hashCode = hashCode * 8191 + ((isSetDjzdzmcsj()) ? 131071 : 524287);
    if (isSetDjzdzmcsj())
      hashCode = hashCode * 8191 + djzdzmcsj.hashCode();

    hashCode = hashCode * 8191 + (int) (pz);

    hashCode = hashCode * 8191 + (int) (qbjg);

    hashCode = hashCode * 8191 + (int) (qcjg);

    hashCode = hashCode * 8191 + (int) (sfhx);

    hashCode = hashCode * 8191 + (int) (sflygj);

    hashCode = hashCode * 8191 + ((isSetXlmc()) ? 131071 : 524287);
    if (isSetXlmc())
      hashCode = hashCode * 8191 + xlmc.hashCode();

    hashCode = hashCode * 8191 + ((isSetSxszmc()) ? 131071 : 524287);
    if (isSetSxszmc())
      hashCode = hashCode * 8191 + sxszmc.hashCode();

    hashCode = hashCode * 8191 + ((isSetSxmzmc()) ? 131071 : 524287);
    if (isSetSxmzmc())
      hashCode = hashCode * 8191 + sxmzmc.hashCode();

    hashCode = hashCode * 8191 + ((isSetXxszmc()) ? 131071 : 524287);
    if (isSetXxszmc())
      hashCode = hashCode * 8191 + xxszmc.hashCode();

    hashCode = hashCode * 8191 + ((isSetXxmzmc()) ? 131071 : 524287);
    if (isSetXxmzmc())
      hashCode = hashCode * 8191 + xxmzmc.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(LINEBASEDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetActionCMDType()).compareTo(other.isSetActionCMDType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionCMDType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionCMDType, other.actionCMDType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetXlbh()).compareTo(other.isSetXlbh());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXlbh()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xlbh, other.xlbh);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetXlcd()).compareTo(other.isSetXlcd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXlcd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xlcd, other.xlcd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetXjsfzscsj()).compareTo(other.isSetXjsfzscsj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXjsfzscsj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xjsfzscsj, other.xjsfzscsj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetXjsfzmcsj()).compareTo(other.isSetXjsfzmcsj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXjsfzmcsj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xjsfzmcsj, other.xjsfzmcsj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetXjzdzscsj()).compareTo(other.isSetXjzdzscsj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXjzdzscsj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xjzdzscsj, other.xjzdzscsj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetXjzdzmcsj()).compareTo(other.isSetXjzdzmcsj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXjzdzmcsj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xjzdzmcsj, other.xjzdzmcsj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDjsfzscsj()).compareTo(other.isSetDjsfzscsj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDjsfzscsj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.djsfzscsj, other.djsfzscsj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDjsfzmcsj()).compareTo(other.isSetDjsfzmcsj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDjsfzmcsj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.djsfzmcsj, other.djsfzmcsj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDjzdzscsj()).compareTo(other.isSetDjzdzscsj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDjzdzscsj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.djzdzscsj, other.djzdzscsj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDjzdzmcsj()).compareTo(other.isSetDjzdzmcsj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDjzdzmcsj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.djzdzmcsj, other.djzdzmcsj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPz()).compareTo(other.isSetPz());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPz()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pz, other.pz);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetQbjg()).compareTo(other.isSetQbjg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQbjg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qbjg, other.qbjg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetQcjg()).compareTo(other.isSetQcjg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQcjg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qcjg, other.qcjg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSfhx()).compareTo(other.isSetSfhx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSfhx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sfhx, other.sfhx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSflygj()).compareTo(other.isSetSflygj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSflygj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sflygj, other.sflygj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetXlmc()).compareTo(other.isSetXlmc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXlmc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xlmc, other.xlmc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSxszmc()).compareTo(other.isSetSxszmc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSxszmc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sxszmc, other.sxszmc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSxmzmc()).compareTo(other.isSetSxmzmc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSxmzmc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sxmzmc, other.sxmzmc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetXxszmc()).compareTo(other.isSetXxszmc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXxszmc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xxszmc, other.xxszmc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetXxmzmc()).compareTo(other.isSetXxmzmc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXxmzmc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xxmzmc, other.xxmzmc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("LINEBASEDTO(");
    boolean first = true;

    sb.append("actionCMDType:");
    if (this.actionCMDType == null) {
      sb.append("null");
    } else {
      sb.append(this.actionCMDType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("xlbh:");
    sb.append(this.xlbh);
    first = false;
    if (!first) sb.append(", ");
    sb.append("xlcd:");
    sb.append(this.xlcd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("xjsfzscsj:");
    if (this.xjsfzscsj == null) {
      sb.append("null");
    } else {
      sb.append(this.xjsfzscsj);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("xjsfzmcsj:");
    if (this.xjsfzmcsj == null) {
      sb.append("null");
    } else {
      sb.append(this.xjsfzmcsj);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("xjzdzscsj:");
    if (this.xjzdzscsj == null) {
      sb.append("null");
    } else {
      sb.append(this.xjzdzscsj);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("xjzdzmcsj:");
    if (this.xjzdzmcsj == null) {
      sb.append("null");
    } else {
      sb.append(this.xjzdzmcsj);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("djsfzscsj:");
    if (this.djsfzscsj == null) {
      sb.append("null");
    } else {
      sb.append(this.djsfzscsj);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("djsfzmcsj:");
    if (this.djsfzmcsj == null) {
      sb.append("null");
    } else {
      sb.append(this.djsfzmcsj);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("djzdzscsj:");
    if (this.djzdzscsj == null) {
      sb.append("null");
    } else {
      sb.append(this.djzdzscsj);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("djzdzmcsj:");
    if (this.djzdzmcsj == null) {
      sb.append("null");
    } else {
      sb.append(this.djzdzmcsj);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pz:");
    sb.append(this.pz);
    first = false;
    if (!first) sb.append(", ");
    sb.append("qbjg:");
    sb.append(this.qbjg);
    first = false;
    if (!first) sb.append(", ");
    sb.append("qcjg:");
    sb.append(this.qcjg);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sfhx:");
    sb.append(this.sfhx);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sflygj:");
    sb.append(this.sflygj);
    first = false;
    if (!first) sb.append(", ");
    sb.append("xlmc:");
    if (this.xlmc == null) {
      sb.append("null");
    } else {
      sb.append(this.xlmc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sxszmc:");
    if (this.sxszmc == null) {
      sb.append("null");
    } else {
      sb.append(this.sxszmc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sxmzmc:");
    if (this.sxmzmc == null) {
      sb.append("null");
    } else {
      sb.append(this.sxmzmc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("xxszmc:");
    if (this.xxszmc == null) {
      sb.append("null");
    } else {
      sb.append(this.xxszmc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("xxmzmc:");
    if (this.xxmzmc == null) {
      sb.append("null");
    } else {
      sb.append(this.xxmzmc);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LINEBASEDTOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LINEBASEDTOStandardScheme getScheme() {
      return new LINEBASEDTOStandardScheme();
    }
  }

  private static class LINEBASEDTOStandardScheme extends org.apache.thrift.scheme.StandardScheme<LINEBASEDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LINEBASEDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACTION_CMDTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.actionCMDType = ActionCMDType.findByValue(iprot.readI32());
              struct.setActionCMDTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // XLBH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.xlbh = iprot.readI32();
              struct.setXlbhIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // XLCD
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.xlcd = iprot.readByte();
              struct.setXlcdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // XJSFZSCSJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.xjsfzscsj = iprot.readString();
              struct.setXjsfzscsjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // XJSFZMCSJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.xjsfzmcsj = iprot.readString();
              struct.setXjsfzmcsjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // XJZDZSCSJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.xjzdzscsj = iprot.readString();
              struct.setXjzdzscsjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // XJZDZMCSJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.xjzdzmcsj = iprot.readString();
              struct.setXjzdzmcsjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DJSFZSCSJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.djsfzscsj = iprot.readString();
              struct.setDjsfzscsjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DJSFZMCSJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.djsfzmcsj = iprot.readString();
              struct.setDjsfzmcsjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DJZDZSCSJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.djzdzscsj = iprot.readString();
              struct.setDjzdzscsjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DJZDZMCSJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.djzdzmcsj = iprot.readString();
              struct.setDjzdzmcsjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PZ
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.pz = iprot.readByte();
              struct.setPzIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // QBJG
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.qbjg = iprot.readByte();
              struct.setQbjgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // QCJG
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.qcjg = iprot.readByte();
              struct.setQcjgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SFHX
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.sfhx = iprot.readByte();
              struct.setSfhxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SFLYGJ
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.sflygj = iprot.readByte();
              struct.setSflygjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // XLMC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.xlmc = iprot.readString();
              struct.setXlmcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // SXSZMC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sxszmc = iprot.readString();
              struct.setSxszmcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // SXMZMC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sxmzmc = iprot.readString();
              struct.setSxmzmcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // XXSZMC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.xxszmc = iprot.readString();
              struct.setXxszmcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // XXMZMC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.xxmzmc = iprot.readString();
              struct.setXxmzmcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LINEBASEDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.actionCMDType != null) {
        oprot.writeFieldBegin(ACTION_CMDTYPE_FIELD_DESC);
        oprot.writeI32(struct.actionCMDType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(XLBH_FIELD_DESC);
      oprot.writeI32(struct.xlbh);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(XLCD_FIELD_DESC);
      oprot.writeByte(struct.xlcd);
      oprot.writeFieldEnd();
      if (struct.xjsfzscsj != null) {
        oprot.writeFieldBegin(XJSFZSCSJ_FIELD_DESC);
        oprot.writeString(struct.xjsfzscsj);
        oprot.writeFieldEnd();
      }
      if (struct.xjsfzmcsj != null) {
        oprot.writeFieldBegin(XJSFZMCSJ_FIELD_DESC);
        oprot.writeString(struct.xjsfzmcsj);
        oprot.writeFieldEnd();
      }
      if (struct.xjzdzscsj != null) {
        oprot.writeFieldBegin(XJZDZSCSJ_FIELD_DESC);
        oprot.writeString(struct.xjzdzscsj);
        oprot.writeFieldEnd();
      }
      if (struct.xjzdzmcsj != null) {
        oprot.writeFieldBegin(XJZDZMCSJ_FIELD_DESC);
        oprot.writeString(struct.xjzdzmcsj);
        oprot.writeFieldEnd();
      }
      if (struct.djsfzscsj != null) {
        oprot.writeFieldBegin(DJSFZSCSJ_FIELD_DESC);
        oprot.writeString(struct.djsfzscsj);
        oprot.writeFieldEnd();
      }
      if (struct.djsfzmcsj != null) {
        oprot.writeFieldBegin(DJSFZMCSJ_FIELD_DESC);
        oprot.writeString(struct.djsfzmcsj);
        oprot.writeFieldEnd();
      }
      if (struct.djzdzscsj != null) {
        oprot.writeFieldBegin(DJZDZSCSJ_FIELD_DESC);
        oprot.writeString(struct.djzdzscsj);
        oprot.writeFieldEnd();
      }
      if (struct.djzdzmcsj != null) {
        oprot.writeFieldBegin(DJZDZMCSJ_FIELD_DESC);
        oprot.writeString(struct.djzdzmcsj);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PZ_FIELD_DESC);
      oprot.writeByte(struct.pz);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QBJG_FIELD_DESC);
      oprot.writeByte(struct.qbjg);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QCJG_FIELD_DESC);
      oprot.writeByte(struct.qcjg);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SFHX_FIELD_DESC);
      oprot.writeByte(struct.sfhx);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SFLYGJ_FIELD_DESC);
      oprot.writeByte(struct.sflygj);
      oprot.writeFieldEnd();
      if (struct.xlmc != null) {
        oprot.writeFieldBegin(XLMC_FIELD_DESC);
        oprot.writeString(struct.xlmc);
        oprot.writeFieldEnd();
      }
      if (struct.sxszmc != null) {
        oprot.writeFieldBegin(SXSZMC_FIELD_DESC);
        oprot.writeString(struct.sxszmc);
        oprot.writeFieldEnd();
      }
      if (struct.sxmzmc != null) {
        oprot.writeFieldBegin(SXMZMC_FIELD_DESC);
        oprot.writeString(struct.sxmzmc);
        oprot.writeFieldEnd();
      }
      if (struct.xxszmc != null) {
        oprot.writeFieldBegin(XXSZMC_FIELD_DESC);
        oprot.writeString(struct.xxszmc);
        oprot.writeFieldEnd();
      }
      if (struct.xxmzmc != null) {
        oprot.writeFieldBegin(XXMZMC_FIELD_DESC);
        oprot.writeString(struct.xxmzmc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LINEBASEDTOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LINEBASEDTOTupleScheme getScheme() {
      return new LINEBASEDTOTupleScheme();
    }
  }

  private static class LINEBASEDTOTupleScheme extends org.apache.thrift.scheme.TupleScheme<LINEBASEDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LINEBASEDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetActionCMDType()) {
        optionals.set(0);
      }
      if (struct.isSetXlbh()) {
        optionals.set(1);
      }
      if (struct.isSetXlcd()) {
        optionals.set(2);
      }
      if (struct.isSetXjsfzscsj()) {
        optionals.set(3);
      }
      if (struct.isSetXjsfzmcsj()) {
        optionals.set(4);
      }
      if (struct.isSetXjzdzscsj()) {
        optionals.set(5);
      }
      if (struct.isSetXjzdzmcsj()) {
        optionals.set(6);
      }
      if (struct.isSetDjsfzscsj()) {
        optionals.set(7);
      }
      if (struct.isSetDjsfzmcsj()) {
        optionals.set(8);
      }
      if (struct.isSetDjzdzscsj()) {
        optionals.set(9);
      }
      if (struct.isSetDjzdzmcsj()) {
        optionals.set(10);
      }
      if (struct.isSetPz()) {
        optionals.set(11);
      }
      if (struct.isSetQbjg()) {
        optionals.set(12);
      }
      if (struct.isSetQcjg()) {
        optionals.set(13);
      }
      if (struct.isSetSfhx()) {
        optionals.set(14);
      }
      if (struct.isSetSflygj()) {
        optionals.set(15);
      }
      if (struct.isSetXlmc()) {
        optionals.set(16);
      }
      if (struct.isSetSxszmc()) {
        optionals.set(17);
      }
      if (struct.isSetSxmzmc()) {
        optionals.set(18);
      }
      if (struct.isSetXxszmc()) {
        optionals.set(19);
      }
      if (struct.isSetXxmzmc()) {
        optionals.set(20);
      }
      oprot.writeBitSet(optionals, 21);
      if (struct.isSetActionCMDType()) {
        oprot.writeI32(struct.actionCMDType.getValue());
      }
      if (struct.isSetXlbh()) {
        oprot.writeI32(struct.xlbh);
      }
      if (struct.isSetXlcd()) {
        oprot.writeByte(struct.xlcd);
      }
      if (struct.isSetXjsfzscsj()) {
        oprot.writeString(struct.xjsfzscsj);
      }
      if (struct.isSetXjsfzmcsj()) {
        oprot.writeString(struct.xjsfzmcsj);
      }
      if (struct.isSetXjzdzscsj()) {
        oprot.writeString(struct.xjzdzscsj);
      }
      if (struct.isSetXjzdzmcsj()) {
        oprot.writeString(struct.xjzdzmcsj);
      }
      if (struct.isSetDjsfzscsj()) {
        oprot.writeString(struct.djsfzscsj);
      }
      if (struct.isSetDjsfzmcsj()) {
        oprot.writeString(struct.djsfzmcsj);
      }
      if (struct.isSetDjzdzscsj()) {
        oprot.writeString(struct.djzdzscsj);
      }
      if (struct.isSetDjzdzmcsj()) {
        oprot.writeString(struct.djzdzmcsj);
      }
      if (struct.isSetPz()) {
        oprot.writeByte(struct.pz);
      }
      if (struct.isSetQbjg()) {
        oprot.writeByte(struct.qbjg);
      }
      if (struct.isSetQcjg()) {
        oprot.writeByte(struct.qcjg);
      }
      if (struct.isSetSfhx()) {
        oprot.writeByte(struct.sfhx);
      }
      if (struct.isSetSflygj()) {
        oprot.writeByte(struct.sflygj);
      }
      if (struct.isSetXlmc()) {
        oprot.writeString(struct.xlmc);
      }
      if (struct.isSetSxszmc()) {
        oprot.writeString(struct.sxszmc);
      }
      if (struct.isSetSxmzmc()) {
        oprot.writeString(struct.sxmzmc);
      }
      if (struct.isSetXxszmc()) {
        oprot.writeString(struct.xxszmc);
      }
      if (struct.isSetXxmzmc()) {
        oprot.writeString(struct.xxmzmc);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LINEBASEDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(21);
      if (incoming.get(0)) {
        struct.actionCMDType = ActionCMDType.findByValue(iprot.readI32());
        struct.setActionCMDTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.xlbh = iprot.readI32();
        struct.setXlbhIsSet(true);
      }
      if (incoming.get(2)) {
        struct.xlcd = iprot.readByte();
        struct.setXlcdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.xjsfzscsj = iprot.readString();
        struct.setXjsfzscsjIsSet(true);
      }
      if (incoming.get(4)) {
        struct.xjsfzmcsj = iprot.readString();
        struct.setXjsfzmcsjIsSet(true);
      }
      if (incoming.get(5)) {
        struct.xjzdzscsj = iprot.readString();
        struct.setXjzdzscsjIsSet(true);
      }
      if (incoming.get(6)) {
        struct.xjzdzmcsj = iprot.readString();
        struct.setXjzdzmcsjIsSet(true);
      }
      if (incoming.get(7)) {
        struct.djsfzscsj = iprot.readString();
        struct.setDjsfzscsjIsSet(true);
      }
      if (incoming.get(8)) {
        struct.djsfzmcsj = iprot.readString();
        struct.setDjsfzmcsjIsSet(true);
      }
      if (incoming.get(9)) {
        struct.djzdzscsj = iprot.readString();
        struct.setDjzdzscsjIsSet(true);
      }
      if (incoming.get(10)) {
        struct.djzdzmcsj = iprot.readString();
        struct.setDjzdzmcsjIsSet(true);
      }
      if (incoming.get(11)) {
        struct.pz = iprot.readByte();
        struct.setPzIsSet(true);
      }
      if (incoming.get(12)) {
        struct.qbjg = iprot.readByte();
        struct.setQbjgIsSet(true);
      }
      if (incoming.get(13)) {
        struct.qcjg = iprot.readByte();
        struct.setQcjgIsSet(true);
      }
      if (incoming.get(14)) {
        struct.sfhx = iprot.readByte();
        struct.setSfhxIsSet(true);
      }
      if (incoming.get(15)) {
        struct.sflygj = iprot.readByte();
        struct.setSflygjIsSet(true);
      }
      if (incoming.get(16)) {
        struct.xlmc = iprot.readString();
        struct.setXlmcIsSet(true);
      }
      if (incoming.get(17)) {
        struct.sxszmc = iprot.readString();
        struct.setSxszmcIsSet(true);
      }
      if (incoming.get(18)) {
        struct.sxmzmc = iprot.readString();
        struct.setSxmzmcIsSet(true);
      }
      if (incoming.get(19)) {
        struct.xxszmc = iprot.readString();
        struct.setXxszmcIsSet(true);
      }
      if (incoming.get(20)) {
        struct.xxmzmc = iprot.readString();
        struct.setXxmzmcIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

