/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.framework.webClient.dispatch.up.bean;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-04-24")
public class KLNEWDTO implements org.apache.thrift.TBase<KLNEWDTO, KLNEWDTO._Fields>, java.io.Serializable, Cloneable, Comparable<KLNEWDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KLNEWDTO");

  private static final org.apache.thrift.protocol.TField SXCBS_FIELD_DESC = new org.apache.thrift.protocol.TField("sxcbs", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField CJSJC_FIELD_DESC = new org.apache.thrift.protocol.TField("cjsjc", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SBID_FIELD_DESC = new org.apache.thrift.protocol.TField("sbid", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new KLNEWDTOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new KLNEWDTOTupleSchemeFactory();

  public byte sxcbs; // required
  public int cjsjc; // required
  public java.lang.String sbid; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SXCBS((short)1, "sxcbs"),
    CJSJC((short)2, "cjsjc"),
    SBID((short)3, "sbid");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SXCBS
          return SXCBS;
        case 2: // CJSJC
          return CJSJC;
        case 3: // SBID
          return SBID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SXCBS_ISSET_ID = 0;
  private static final int __CJSJC_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SXCBS, new org.apache.thrift.meta_data.FieldMetaData("sxcbs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.CJSJC, new org.apache.thrift.meta_data.FieldMetaData("cjsjc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SBID, new org.apache.thrift.meta_data.FieldMetaData("sbid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KLNEWDTO.class, metaDataMap);
  }

  public KLNEWDTO() {
  }

  public KLNEWDTO(
    byte sxcbs,
    int cjsjc,
    java.lang.String sbid)
  {
    this();
    this.sxcbs = sxcbs;
    setSxcbsIsSet(true);
    this.cjsjc = cjsjc;
    setCjsjcIsSet(true);
    this.sbid = sbid;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public KLNEWDTO(KLNEWDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sxcbs = other.sxcbs;
    this.cjsjc = other.cjsjc;
    if (other.isSetSbid()) {
      this.sbid = other.sbid;
    }
  }

  public KLNEWDTO deepCopy() {
    return new KLNEWDTO(this);
  }

  @Override
  public void clear() {
    setSxcbsIsSet(false);
    this.sxcbs = 0;
    setCjsjcIsSet(false);
    this.cjsjc = 0;
    this.sbid = null;
  }

  public byte getSxcbs() {
    return this.sxcbs;
  }

  public KLNEWDTO setSxcbs(byte sxcbs) {
    this.sxcbs = sxcbs;
    setSxcbsIsSet(true);
    return this;
  }

  public void unsetSxcbs() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SXCBS_ISSET_ID);
  }

  /** Returns true if field sxcbs is set (has been assigned a value) and false otherwise */
  public boolean isSetSxcbs() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SXCBS_ISSET_ID);
  }

  public void setSxcbsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SXCBS_ISSET_ID, value);
  }

  public int getCjsjc() {
    return this.cjsjc;
  }

  public KLNEWDTO setCjsjc(int cjsjc) {
    this.cjsjc = cjsjc;
    setCjsjcIsSet(true);
    return this;
  }

  public void unsetCjsjc() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CJSJC_ISSET_ID);
  }

  /** Returns true if field cjsjc is set (has been assigned a value) and false otherwise */
  public boolean isSetCjsjc() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CJSJC_ISSET_ID);
  }

  public void setCjsjcIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CJSJC_ISSET_ID, value);
  }

  public java.lang.String getSbid() {
    return this.sbid;
  }

  public KLNEWDTO setSbid(java.lang.String sbid) {
    this.sbid = sbid;
    return this;
  }

  public void unsetSbid() {
    this.sbid = null;
  }

  /** Returns true if field sbid is set (has been assigned a value) and false otherwise */
  public boolean isSetSbid() {
    return this.sbid != null;
  }

  public void setSbidIsSet(boolean value) {
    if (!value) {
      this.sbid = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case SXCBS:
      if (value == null) {
        unsetSxcbs();
      } else {
        setSxcbs((java.lang.Byte)value);
      }
      break;

    case CJSJC:
      if (value == null) {
        unsetCjsjc();
      } else {
        setCjsjc((java.lang.Integer)value);
      }
      break;

    case SBID:
      if (value == null) {
        unsetSbid();
      } else {
        setSbid((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SXCBS:
      return getSxcbs();

    case CJSJC:
      return getCjsjc();

    case SBID:
      return getSbid();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SXCBS:
      return isSetSxcbs();
    case CJSJC:
      return isSetCjsjc();
    case SBID:
      return isSetSbid();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof KLNEWDTO)
      return this.equals((KLNEWDTO)that);
    return false;
  }

  public boolean equals(KLNEWDTO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_sxcbs = true;
    boolean that_present_sxcbs = true;
    if (this_present_sxcbs || that_present_sxcbs) {
      if (!(this_present_sxcbs && that_present_sxcbs))
        return false;
      if (this.sxcbs != that.sxcbs)
        return false;
    }

    boolean this_present_cjsjc = true;
    boolean that_present_cjsjc = true;
    if (this_present_cjsjc || that_present_cjsjc) {
      if (!(this_present_cjsjc && that_present_cjsjc))
        return false;
      if (this.cjsjc != that.cjsjc)
        return false;
    }

    boolean this_present_sbid = true && this.isSetSbid();
    boolean that_present_sbid = true && that.isSetSbid();
    if (this_present_sbid || that_present_sbid) {
      if (!(this_present_sbid && that_present_sbid))
        return false;
      if (!this.sbid.equals(that.sbid))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + (int) (sxcbs);

    hashCode = hashCode * 8191 + cjsjc;

    hashCode = hashCode * 8191 + ((isSetSbid()) ? 131071 : 524287);
    if (isSetSbid())
      hashCode = hashCode * 8191 + sbid.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(KLNEWDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetSxcbs()).compareTo(other.isSetSxcbs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSxcbs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sxcbs, other.sxcbs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCjsjc()).compareTo(other.isSetCjsjc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCjsjc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cjsjc, other.cjsjc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSbid()).compareTo(other.isSetSbid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSbid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sbid, other.sbid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("KLNEWDTO(");
    boolean first = true;

    sb.append("sxcbs:");
    sb.append(this.sxcbs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cjsjc:");
    sb.append(this.cjsjc);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sbid:");
    if (this.sbid == null) {
      sb.append("null");
    } else {
      sb.append(this.sbid);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class KLNEWDTOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public KLNEWDTOStandardScheme getScheme() {
      return new KLNEWDTOStandardScheme();
    }
  }

  private static class KLNEWDTOStandardScheme extends org.apache.thrift.scheme.StandardScheme<KLNEWDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, KLNEWDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SXCBS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.sxcbs = iprot.readByte();
              struct.setSxcbsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CJSJC
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cjsjc = iprot.readI32();
              struct.setCjsjcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SBID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sbid = iprot.readString();
              struct.setSbidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, KLNEWDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SXCBS_FIELD_DESC);
      oprot.writeByte(struct.sxcbs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CJSJC_FIELD_DESC);
      oprot.writeI32(struct.cjsjc);
      oprot.writeFieldEnd();
      if (struct.sbid != null) {
        oprot.writeFieldBegin(SBID_FIELD_DESC);
        oprot.writeString(struct.sbid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class KLNEWDTOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public KLNEWDTOTupleScheme getScheme() {
      return new KLNEWDTOTupleScheme();
    }
  }

  private static class KLNEWDTOTupleScheme extends org.apache.thrift.scheme.TupleScheme<KLNEWDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, KLNEWDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSxcbs()) {
        optionals.set(0);
      }
      if (struct.isSetCjsjc()) {
        optionals.set(1);
      }
      if (struct.isSetSbid()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetSxcbs()) {
        oprot.writeByte(struct.sxcbs);
      }
      if (struct.isSetCjsjc()) {
        oprot.writeI32(struct.cjsjc);
      }
      if (struct.isSetSbid()) {
        oprot.writeString(struct.sbid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, KLNEWDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.sxcbs = iprot.readByte();
        struct.setSxcbsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cjsjc = iprot.readI32();
        struct.setCjsjcIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sbid = iprot.readString();
        struct.setSbidIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

