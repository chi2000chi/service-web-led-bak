/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.framework.webClient.dispatch.up.bean;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-04-24")
public class ROUTDTO implements org.apache.thrift.TBase<ROUTDTO, ROUTDTO._Fields>, java.io.Serializable, Cloneable, Comparable<ROUTDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ROUTDTO");

  private static final org.apache.thrift.protocol.TField LYDXH_FIELD_DESC = new org.apache.thrift.protocol.TField("lydxh", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField JD_FIELD_DESC = new org.apache.thrift.protocol.TField("jd", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField WD_FIELD_DESC = new org.apache.thrift.protocol.TField("wd", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ROUTDTOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ROUTDTOTupleSchemeFactory();

  public short lydxh; // required
  public int jd; // required
  public int wd; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LYDXH((short)1, "lydxh"),
    JD((short)2, "jd"),
    WD((short)3, "wd");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LYDXH
          return LYDXH;
        case 2: // JD
          return JD;
        case 3: // WD
          return WD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LYDXH_ISSET_ID = 0;
  private static final int __JD_ISSET_ID = 1;
  private static final int __WD_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LYDXH, new org.apache.thrift.meta_data.FieldMetaData("lydxh", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.JD, new org.apache.thrift.meta_data.FieldMetaData("jd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WD, new org.apache.thrift.meta_data.FieldMetaData("wd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ROUTDTO.class, metaDataMap);
  }

  public ROUTDTO() {
  }

  public ROUTDTO(
    short lydxh,
    int jd,
    int wd)
  {
    this();
    this.lydxh = lydxh;
    setLydxhIsSet(true);
    this.jd = jd;
    setJdIsSet(true);
    this.wd = wd;
    setWdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ROUTDTO(ROUTDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.lydxh = other.lydxh;
    this.jd = other.jd;
    this.wd = other.wd;
  }

  public ROUTDTO deepCopy() {
    return new ROUTDTO(this);
  }

  @Override
  public void clear() {
    setLydxhIsSet(false);
    this.lydxh = 0;
    setJdIsSet(false);
    this.jd = 0;
    setWdIsSet(false);
    this.wd = 0;
  }

  public short getLydxh() {
    return this.lydxh;
  }

  public ROUTDTO setLydxh(short lydxh) {
    this.lydxh = lydxh;
    setLydxhIsSet(true);
    return this;
  }

  public void unsetLydxh() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LYDXH_ISSET_ID);
  }

  /** Returns true if field lydxh is set (has been assigned a value) and false otherwise */
  public boolean isSetLydxh() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LYDXH_ISSET_ID);
  }

  public void setLydxhIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LYDXH_ISSET_ID, value);
  }

  public int getJd() {
    return this.jd;
  }

  public ROUTDTO setJd(int jd) {
    this.jd = jd;
    setJdIsSet(true);
    return this;
  }

  public void unsetJd() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __JD_ISSET_ID);
  }

  /** Returns true if field jd is set (has been assigned a value) and false otherwise */
  public boolean isSetJd() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __JD_ISSET_ID);
  }

  public void setJdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __JD_ISSET_ID, value);
  }

  public int getWd() {
    return this.wd;
  }

  public ROUTDTO setWd(int wd) {
    this.wd = wd;
    setWdIsSet(true);
    return this;
  }

  public void unsetWd() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WD_ISSET_ID);
  }

  /** Returns true if field wd is set (has been assigned a value) and false otherwise */
  public boolean isSetWd() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WD_ISSET_ID);
  }

  public void setWdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WD_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case LYDXH:
      if (value == null) {
        unsetLydxh();
      } else {
        setLydxh((java.lang.Short)value);
      }
      break;

    case JD:
      if (value == null) {
        unsetJd();
      } else {
        setJd((java.lang.Integer)value);
      }
      break;

    case WD:
      if (value == null) {
        unsetWd();
      } else {
        setWd((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case LYDXH:
      return getLydxh();

    case JD:
      return getJd();

    case WD:
      return getWd();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case LYDXH:
      return isSetLydxh();
    case JD:
      return isSetJd();
    case WD:
      return isSetWd();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ROUTDTO)
      return this.equals((ROUTDTO)that);
    return false;
  }

  public boolean equals(ROUTDTO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_lydxh = true;
    boolean that_present_lydxh = true;
    if (this_present_lydxh || that_present_lydxh) {
      if (!(this_present_lydxh && that_present_lydxh))
        return false;
      if (this.lydxh != that.lydxh)
        return false;
    }

    boolean this_present_jd = true;
    boolean that_present_jd = true;
    if (this_present_jd || that_present_jd) {
      if (!(this_present_jd && that_present_jd))
        return false;
      if (this.jd != that.jd)
        return false;
    }

    boolean this_present_wd = true;
    boolean that_present_wd = true;
    if (this_present_wd || that_present_wd) {
      if (!(this_present_wd && that_present_wd))
        return false;
      if (this.wd != that.wd)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + lydxh;

    hashCode = hashCode * 8191 + jd;

    hashCode = hashCode * 8191 + wd;

    return hashCode;
  }

  @Override
  public int compareTo(ROUTDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetLydxh()).compareTo(other.isSetLydxh());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLydxh()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lydxh, other.lydxh);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetJd()).compareTo(other.isSetJd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jd, other.jd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWd()).compareTo(other.isSetWd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wd, other.wd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ROUTDTO(");
    boolean first = true;

    sb.append("lydxh:");
    sb.append(this.lydxh);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jd:");
    sb.append(this.jd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("wd:");
    sb.append(this.wd);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ROUTDTOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ROUTDTOStandardScheme getScheme() {
      return new ROUTDTOStandardScheme();
    }
  }

  private static class ROUTDTOStandardScheme extends org.apache.thrift.scheme.StandardScheme<ROUTDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ROUTDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LYDXH
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.lydxh = iprot.readI16();
              struct.setLydxhIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // JD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.jd = iprot.readI32();
              struct.setJdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wd = iprot.readI32();
              struct.setWdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ROUTDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LYDXH_FIELD_DESC);
      oprot.writeI16(struct.lydxh);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JD_FIELD_DESC);
      oprot.writeI32(struct.jd);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WD_FIELD_DESC);
      oprot.writeI32(struct.wd);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ROUTDTOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ROUTDTOTupleScheme getScheme() {
      return new ROUTDTOTupleScheme();
    }
  }

  private static class ROUTDTOTupleScheme extends org.apache.thrift.scheme.TupleScheme<ROUTDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ROUTDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetLydxh()) {
        optionals.set(0);
      }
      if (struct.isSetJd()) {
        optionals.set(1);
      }
      if (struct.isSetWd()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetLydxh()) {
        oprot.writeI16(struct.lydxh);
      }
      if (struct.isSetJd()) {
        oprot.writeI32(struct.jd);
      }
      if (struct.isSetWd()) {
        oprot.writeI32(struct.wd);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ROUTDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.lydxh = iprot.readI16();
        struct.setLydxhIsSet(true);
      }
      if (incoming.get(1)) {
        struct.jd = iprot.readI32();
        struct.setJdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.wd = iprot.readI32();
        struct.setWdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

