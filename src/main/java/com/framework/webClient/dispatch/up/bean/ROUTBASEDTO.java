/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.framework.webClient.dispatch.up.bean;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-04-24")
public class ROUTBASEDTO implements org.apache.thrift.TBase<ROUTBASEDTO, ROUTBASEDTO._Fields>, java.io.Serializable, Cloneable, Comparable<ROUTBASEDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ROUTBASEDTO");

  private static final org.apache.thrift.protocol.TField ACTION_CMDTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("actionCMDType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField XLBH_FIELD_DESC = new org.apache.thrift.protocol.TField("xlbh", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField FX_FIELD_DESC = new org.apache.thrift.protocol.TField("fx", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField LYDGS_FIELD_DESC = new org.apache.thrift.protocol.TField("lydgs", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField ROUT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("routList", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ROUTBASEDTOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ROUTBASEDTOTupleSchemeFactory();

  /**
   * 
   * @see ActionCMDType
   */
  public ActionCMDType actionCMDType; // required
  public int xlbh; // required
  public byte fx; // required
  public short lydgs; // required
  public java.util.List<ROUTDTO> routList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see ActionCMDType
     */
    ACTION_CMDTYPE((short)1, "actionCMDType"),
    XLBH((short)2, "xlbh"),
    FX((short)3, "fx"),
    LYDGS((short)4, "lydgs"),
    ROUT_LIST((short)5, "routList");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACTION_CMDTYPE
          return ACTION_CMDTYPE;
        case 2: // XLBH
          return XLBH;
        case 3: // FX
          return FX;
        case 4: // LYDGS
          return LYDGS;
        case 5: // ROUT_LIST
          return ROUT_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __XLBH_ISSET_ID = 0;
  private static final int __FX_ISSET_ID = 1;
  private static final int __LYDGS_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACTION_CMDTYPE, new org.apache.thrift.meta_data.FieldMetaData("actionCMDType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ActionCMDType.class)));
    tmpMap.put(_Fields.XLBH, new org.apache.thrift.meta_data.FieldMetaData("xlbh", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FX, new org.apache.thrift.meta_data.FieldMetaData("fx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.LYDGS, new org.apache.thrift.meta_data.FieldMetaData("lydgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.ROUT_LIST, new org.apache.thrift.meta_data.FieldMetaData("routList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ROUTDTO.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ROUTBASEDTO.class, metaDataMap);
  }

  public ROUTBASEDTO() {
  }

  public ROUTBASEDTO(
    ActionCMDType actionCMDType,
    int xlbh,
    byte fx,
    short lydgs,
    java.util.List<ROUTDTO> routList)
  {
    this();
    this.actionCMDType = actionCMDType;
    this.xlbh = xlbh;
    setXlbhIsSet(true);
    this.fx = fx;
    setFxIsSet(true);
    this.lydgs = lydgs;
    setLydgsIsSet(true);
    this.routList = routList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ROUTBASEDTO(ROUTBASEDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetActionCMDType()) {
      this.actionCMDType = other.actionCMDType;
    }
    this.xlbh = other.xlbh;
    this.fx = other.fx;
    this.lydgs = other.lydgs;
    if (other.isSetRoutList()) {
      java.util.List<ROUTDTO> __this__routList = new java.util.ArrayList<ROUTDTO>(other.routList.size());
      for (ROUTDTO other_element : other.routList) {
        __this__routList.add(new ROUTDTO(other_element));
      }
      this.routList = __this__routList;
    }
  }

  public ROUTBASEDTO deepCopy() {
    return new ROUTBASEDTO(this);
  }

  @Override
  public void clear() {
    this.actionCMDType = null;
    setXlbhIsSet(false);
    this.xlbh = 0;
    setFxIsSet(false);
    this.fx = 0;
    setLydgsIsSet(false);
    this.lydgs = 0;
    this.routList = null;
  }

  /**
   * 
   * @see ActionCMDType
   */
  public ActionCMDType getActionCMDType() {
    return this.actionCMDType;
  }

  /**
   * 
   * @see ActionCMDType
   */
  public ROUTBASEDTO setActionCMDType(ActionCMDType actionCMDType) {
    this.actionCMDType = actionCMDType;
    return this;
  }

  public void unsetActionCMDType() {
    this.actionCMDType = null;
  }

  /** Returns true if field actionCMDType is set (has been assigned a value) and false otherwise */
  public boolean isSetActionCMDType() {
    return this.actionCMDType != null;
  }

  public void setActionCMDTypeIsSet(boolean value) {
    if (!value) {
      this.actionCMDType = null;
    }
  }

  public int getXlbh() {
    return this.xlbh;
  }

  public ROUTBASEDTO setXlbh(int xlbh) {
    this.xlbh = xlbh;
    setXlbhIsSet(true);
    return this;
  }

  public void unsetXlbh() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __XLBH_ISSET_ID);
  }

  /** Returns true if field xlbh is set (has been assigned a value) and false otherwise */
  public boolean isSetXlbh() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __XLBH_ISSET_ID);
  }

  public void setXlbhIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __XLBH_ISSET_ID, value);
  }

  public byte getFx() {
    return this.fx;
  }

  public ROUTBASEDTO setFx(byte fx) {
    this.fx = fx;
    setFxIsSet(true);
    return this;
  }

  public void unsetFx() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FX_ISSET_ID);
  }

  /** Returns true if field fx is set (has been assigned a value) and false otherwise */
  public boolean isSetFx() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FX_ISSET_ID);
  }

  public void setFxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FX_ISSET_ID, value);
  }

  public short getLydgs() {
    return this.lydgs;
  }

  public ROUTBASEDTO setLydgs(short lydgs) {
    this.lydgs = lydgs;
    setLydgsIsSet(true);
    return this;
  }

  public void unsetLydgs() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LYDGS_ISSET_ID);
  }

  /** Returns true if field lydgs is set (has been assigned a value) and false otherwise */
  public boolean isSetLydgs() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LYDGS_ISSET_ID);
  }

  public void setLydgsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LYDGS_ISSET_ID, value);
  }

  public int getRoutListSize() {
    return (this.routList == null) ? 0 : this.routList.size();
  }

  public java.util.Iterator<ROUTDTO> getRoutListIterator() {
    return (this.routList == null) ? null : this.routList.iterator();
  }

  public void addToRoutList(ROUTDTO elem) {
    if (this.routList == null) {
      this.routList = new java.util.ArrayList<ROUTDTO>();
    }
    this.routList.add(elem);
  }

  public java.util.List<ROUTDTO> getRoutList() {
    return this.routList;
  }

  public ROUTBASEDTO setRoutList(java.util.List<ROUTDTO> routList) {
    this.routList = routList;
    return this;
  }

  public void unsetRoutList() {
    this.routList = null;
  }

  /** Returns true if field routList is set (has been assigned a value) and false otherwise */
  public boolean isSetRoutList() {
    return this.routList != null;
  }

  public void setRoutListIsSet(boolean value) {
    if (!value) {
      this.routList = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ACTION_CMDTYPE:
      if (value == null) {
        unsetActionCMDType();
      } else {
        setActionCMDType((ActionCMDType)value);
      }
      break;

    case XLBH:
      if (value == null) {
        unsetXlbh();
      } else {
        setXlbh((java.lang.Integer)value);
      }
      break;

    case FX:
      if (value == null) {
        unsetFx();
      } else {
        setFx((java.lang.Byte)value);
      }
      break;

    case LYDGS:
      if (value == null) {
        unsetLydgs();
      } else {
        setLydgs((java.lang.Short)value);
      }
      break;

    case ROUT_LIST:
      if (value == null) {
        unsetRoutList();
      } else {
        setRoutList((java.util.List<ROUTDTO>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ACTION_CMDTYPE:
      return getActionCMDType();

    case XLBH:
      return getXlbh();

    case FX:
      return getFx();

    case LYDGS:
      return getLydgs();

    case ROUT_LIST:
      return getRoutList();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ACTION_CMDTYPE:
      return isSetActionCMDType();
    case XLBH:
      return isSetXlbh();
    case FX:
      return isSetFx();
    case LYDGS:
      return isSetLydgs();
    case ROUT_LIST:
      return isSetRoutList();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ROUTBASEDTO)
      return this.equals((ROUTBASEDTO)that);
    return false;
  }

  public boolean equals(ROUTBASEDTO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_actionCMDType = true && this.isSetActionCMDType();
    boolean that_present_actionCMDType = true && that.isSetActionCMDType();
    if (this_present_actionCMDType || that_present_actionCMDType) {
      if (!(this_present_actionCMDType && that_present_actionCMDType))
        return false;
      if (!this.actionCMDType.equals(that.actionCMDType))
        return false;
    }

    boolean this_present_xlbh = true;
    boolean that_present_xlbh = true;
    if (this_present_xlbh || that_present_xlbh) {
      if (!(this_present_xlbh && that_present_xlbh))
        return false;
      if (this.xlbh != that.xlbh)
        return false;
    }

    boolean this_present_fx = true;
    boolean that_present_fx = true;
    if (this_present_fx || that_present_fx) {
      if (!(this_present_fx && that_present_fx))
        return false;
      if (this.fx != that.fx)
        return false;
    }

    boolean this_present_lydgs = true;
    boolean that_present_lydgs = true;
    if (this_present_lydgs || that_present_lydgs) {
      if (!(this_present_lydgs && that_present_lydgs))
        return false;
      if (this.lydgs != that.lydgs)
        return false;
    }

    boolean this_present_routList = true && this.isSetRoutList();
    boolean that_present_routList = true && that.isSetRoutList();
    if (this_present_routList || that_present_routList) {
      if (!(this_present_routList && that_present_routList))
        return false;
      if (!this.routList.equals(that.routList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetActionCMDType()) ? 131071 : 524287);
    if (isSetActionCMDType())
      hashCode = hashCode * 8191 + actionCMDType.getValue();

    hashCode = hashCode * 8191 + xlbh;

    hashCode = hashCode * 8191 + (int) (fx);

    hashCode = hashCode * 8191 + lydgs;

    hashCode = hashCode * 8191 + ((isSetRoutList()) ? 131071 : 524287);
    if (isSetRoutList())
      hashCode = hashCode * 8191 + routList.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ROUTBASEDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetActionCMDType()).compareTo(other.isSetActionCMDType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionCMDType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionCMDType, other.actionCMDType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetXlbh()).compareTo(other.isSetXlbh());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXlbh()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xlbh, other.xlbh);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFx()).compareTo(other.isSetFx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fx, other.fx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLydgs()).compareTo(other.isSetLydgs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLydgs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lydgs, other.lydgs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRoutList()).compareTo(other.isSetRoutList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoutList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.routList, other.routList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ROUTBASEDTO(");
    boolean first = true;

    sb.append("actionCMDType:");
    if (this.actionCMDType == null) {
      sb.append("null");
    } else {
      sb.append(this.actionCMDType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("xlbh:");
    sb.append(this.xlbh);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fx:");
    sb.append(this.fx);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lydgs:");
    sb.append(this.lydgs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("routList:");
    if (this.routList == null) {
      sb.append("null");
    } else {
      sb.append(this.routList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ROUTBASEDTOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ROUTBASEDTOStandardScheme getScheme() {
      return new ROUTBASEDTOStandardScheme();
    }
  }

  private static class ROUTBASEDTOStandardScheme extends org.apache.thrift.scheme.StandardScheme<ROUTBASEDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ROUTBASEDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACTION_CMDTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.actionCMDType = ActionCMDType.findByValue(iprot.readI32());
              struct.setActionCMDTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // XLBH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.xlbh = iprot.readI32();
              struct.setXlbhIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FX
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.fx = iprot.readByte();
              struct.setFxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LYDGS
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.lydgs = iprot.readI16();
              struct.setLydgsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ROUT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.routList = new java.util.ArrayList<ROUTDTO>(_list8.size);
                ROUTDTO _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new ROUTDTO();
                  _elem9.read(iprot);
                  struct.routList.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setRoutListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ROUTBASEDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.actionCMDType != null) {
        oprot.writeFieldBegin(ACTION_CMDTYPE_FIELD_DESC);
        oprot.writeI32(struct.actionCMDType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(XLBH_FIELD_DESC);
      oprot.writeI32(struct.xlbh);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FX_FIELD_DESC);
      oprot.writeByte(struct.fx);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LYDGS_FIELD_DESC);
      oprot.writeI16(struct.lydgs);
      oprot.writeFieldEnd();
      if (struct.routList != null) {
        oprot.writeFieldBegin(ROUT_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.routList.size()));
          for (ROUTDTO _iter11 : struct.routList)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ROUTBASEDTOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ROUTBASEDTOTupleScheme getScheme() {
      return new ROUTBASEDTOTupleScheme();
    }
  }

  private static class ROUTBASEDTOTupleScheme extends org.apache.thrift.scheme.TupleScheme<ROUTBASEDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ROUTBASEDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetActionCMDType()) {
        optionals.set(0);
      }
      if (struct.isSetXlbh()) {
        optionals.set(1);
      }
      if (struct.isSetFx()) {
        optionals.set(2);
      }
      if (struct.isSetLydgs()) {
        optionals.set(3);
      }
      if (struct.isSetRoutList()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetActionCMDType()) {
        oprot.writeI32(struct.actionCMDType.getValue());
      }
      if (struct.isSetXlbh()) {
        oprot.writeI32(struct.xlbh);
      }
      if (struct.isSetFx()) {
        oprot.writeByte(struct.fx);
      }
      if (struct.isSetLydgs()) {
        oprot.writeI16(struct.lydgs);
      }
      if (struct.isSetRoutList()) {
        {
          oprot.writeI32(struct.routList.size());
          for (ROUTDTO _iter12 : struct.routList)
          {
            _iter12.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ROUTBASEDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.actionCMDType = ActionCMDType.findByValue(iprot.readI32());
        struct.setActionCMDTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.xlbh = iprot.readI32();
        struct.setXlbhIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fx = iprot.readByte();
        struct.setFxIsSet(true);
      }
      if (incoming.get(3)) {
        struct.lydgs = iprot.readI16();
        struct.setLydgsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.routList = new java.util.ArrayList<ROUTDTO>(_list13.size);
          ROUTDTO _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new ROUTDTO();
            _elem14.read(iprot);
            struct.routList.add(_elem14);
          }
        }
        struct.setRoutListIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

