/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.framework.webClient.dispatch.up.bean;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-04-24")
public class CLLJSJDTO implements org.apache.thrift.TBase<CLLJSJDTO, CLLJSJDTO._Fields>, java.io.Serializable, Cloneable, Comparable<CLLJSJDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CLLJSJDTO");

  private static final org.apache.thrift.protocol.TField ACTION_CMDTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("actionCMDType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField XLID_FIELD_DESC = new org.apache.thrift.protocol.TField("xlid", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField XLBH_FIELD_DESC = new org.apache.thrift.protocol.TField("xlbh", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField XLMC_FIELD_DESC = new org.apache.thrift.protocol.TField("xlmc", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CLID_FIELD_DESC = new org.apache.thrift.protocol.TField("clid", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField EMP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("empId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SBSXZCH_FIELD_DESC = new org.apache.thrift.protocol.TField("sbsxzch", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField LJSJ_FIELD_DESC = new org.apache.thrift.protocol.TField("ljsj", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField JD_FIELD_DESC = new org.apache.thrift.protocol.TField("jd", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField WD_FIELD_DESC = new org.apache.thrift.protocol.TField("wd", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField SSSD_FIELD_DESC = new org.apache.thrift.protocol.TField("sssd", org.apache.thrift.protocol.TType.BYTE, (short)11);
  private static final org.apache.thrift.protocol.TField FXJ_FIELD_DESC = new org.apache.thrift.protocol.TField("fxj", org.apache.thrift.protocol.TType.I16, (short)12);
  private static final org.apache.thrift.protocol.TField YYZT_FIELD_DESC = new org.apache.thrift.protocol.TField("yyzt", org.apache.thrift.protocol.TType.BYTE, (short)13);
  private static final org.apache.thrift.protocol.TField SJBH_FIELD_DESC = new org.apache.thrift.protocol.TField("sjbh", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField SIM_FIELD_DESC = new org.apache.thrift.protocol.TField("sim", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField LJCS_FIELD_DESC = new org.apache.thrift.protocol.TField("ljcs", org.apache.thrift.protocol.TType.BYTE, (short)16);
  private static final org.apache.thrift.protocol.TField SFLSSJ_FIELD_DESC = new org.apache.thrift.protocol.TField("sflssj", org.apache.thrift.protocol.TType.BYTE, (short)17);
  private static final org.apache.thrift.protocol.TField CCXLH_FIELD_DESC = new org.apache.thrift.protocol.TField("ccxlh", org.apache.thrift.protocol.TType.STRING, (short)18);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CLLJSJDTOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CLLJSJDTOTupleSchemeFactory();

  /**
   * 
   * @see ActionCMDType
   */
  public ActionCMDType actionCMDType; // required
  public java.lang.String xlid; // required
  public java.lang.String xlbh; // required
  public java.lang.String xlmc; // required
  public java.lang.String clid; // required
  public java.lang.String empId; // required
  public java.lang.String sbsxzch; // required
  public int ljsj; // required
  public int jd; // required
  public int wd; // required
  public byte sssd; // required
  public short fxj; // required
  public byte yyzt; // required
  public java.lang.String sjbh; // required
  public java.lang.String sim; // required
  public byte ljcs; // required
  public byte sflssj; // required
  public java.lang.String ccxlh; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see ActionCMDType
     */
    ACTION_CMDTYPE((short)1, "actionCMDType"),
    XLID((short)2, "xlid"),
    XLBH((short)3, "xlbh"),
    XLMC((short)4, "xlmc"),
    CLID((short)5, "clid"),
    EMP_ID((short)6, "empId"),
    SBSXZCH((short)7, "sbsxzch"),
    LJSJ((short)8, "ljsj"),
    JD((short)9, "jd"),
    WD((short)10, "wd"),
    SSSD((short)11, "sssd"),
    FXJ((short)12, "fxj"),
    YYZT((short)13, "yyzt"),
    SJBH((short)14, "sjbh"),
    SIM((short)15, "sim"),
    LJCS((short)16, "ljcs"),
    SFLSSJ((short)17, "sflssj"),
    CCXLH((short)18, "ccxlh");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACTION_CMDTYPE
          return ACTION_CMDTYPE;
        case 2: // XLID
          return XLID;
        case 3: // XLBH
          return XLBH;
        case 4: // XLMC
          return XLMC;
        case 5: // CLID
          return CLID;
        case 6: // EMP_ID
          return EMP_ID;
        case 7: // SBSXZCH
          return SBSXZCH;
        case 8: // LJSJ
          return LJSJ;
        case 9: // JD
          return JD;
        case 10: // WD
          return WD;
        case 11: // SSSD
          return SSSD;
        case 12: // FXJ
          return FXJ;
        case 13: // YYZT
          return YYZT;
        case 14: // SJBH
          return SJBH;
        case 15: // SIM
          return SIM;
        case 16: // LJCS
          return LJCS;
        case 17: // SFLSSJ
          return SFLSSJ;
        case 18: // CCXLH
          return CCXLH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LJSJ_ISSET_ID = 0;
  private static final int __JD_ISSET_ID = 1;
  private static final int __WD_ISSET_ID = 2;
  private static final int __SSSD_ISSET_ID = 3;
  private static final int __FXJ_ISSET_ID = 4;
  private static final int __YYZT_ISSET_ID = 5;
  private static final int __LJCS_ISSET_ID = 6;
  private static final int __SFLSSJ_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACTION_CMDTYPE, new org.apache.thrift.meta_data.FieldMetaData("actionCMDType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ActionCMDType.class)));
    tmpMap.put(_Fields.XLID, new org.apache.thrift.meta_data.FieldMetaData("xlid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.XLBH, new org.apache.thrift.meta_data.FieldMetaData("xlbh", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.XLMC, new org.apache.thrift.meta_data.FieldMetaData("xlmc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLID, new org.apache.thrift.meta_data.FieldMetaData("clid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMP_ID, new org.apache.thrift.meta_data.FieldMetaData("empId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SBSXZCH, new org.apache.thrift.meta_data.FieldMetaData("sbsxzch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LJSJ, new org.apache.thrift.meta_data.FieldMetaData("ljsj", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.JD, new org.apache.thrift.meta_data.FieldMetaData("jd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WD, new org.apache.thrift.meta_data.FieldMetaData("wd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SSSD, new org.apache.thrift.meta_data.FieldMetaData("sssd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.FXJ, new org.apache.thrift.meta_data.FieldMetaData("fxj", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.YYZT, new org.apache.thrift.meta_data.FieldMetaData("yyzt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SJBH, new org.apache.thrift.meta_data.FieldMetaData("sjbh", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIM, new org.apache.thrift.meta_data.FieldMetaData("sim", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LJCS, new org.apache.thrift.meta_data.FieldMetaData("ljcs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SFLSSJ, new org.apache.thrift.meta_data.FieldMetaData("sflssj", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.CCXLH, new org.apache.thrift.meta_data.FieldMetaData("ccxlh", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CLLJSJDTO.class, metaDataMap);
  }

  public CLLJSJDTO() {
  }

  public CLLJSJDTO(
    ActionCMDType actionCMDType,
    java.lang.String xlid,
    java.lang.String xlbh,
    java.lang.String xlmc,
    java.lang.String clid,
    java.lang.String empId,
    java.lang.String sbsxzch,
    int ljsj,
    int jd,
    int wd,
    byte sssd,
    short fxj,
    byte yyzt,
    java.lang.String sjbh,
    java.lang.String sim,
    byte ljcs,
    byte sflssj,
    java.lang.String ccxlh)
  {
    this();
    this.actionCMDType = actionCMDType;
    this.xlid = xlid;
    this.xlbh = xlbh;
    this.xlmc = xlmc;
    this.clid = clid;
    this.empId = empId;
    this.sbsxzch = sbsxzch;
    this.ljsj = ljsj;
    setLjsjIsSet(true);
    this.jd = jd;
    setJdIsSet(true);
    this.wd = wd;
    setWdIsSet(true);
    this.sssd = sssd;
    setSssdIsSet(true);
    this.fxj = fxj;
    setFxjIsSet(true);
    this.yyzt = yyzt;
    setYyztIsSet(true);
    this.sjbh = sjbh;
    this.sim = sim;
    this.ljcs = ljcs;
    setLjcsIsSet(true);
    this.sflssj = sflssj;
    setSflssjIsSet(true);
    this.ccxlh = ccxlh;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CLLJSJDTO(CLLJSJDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetActionCMDType()) {
      this.actionCMDType = other.actionCMDType;
    }
    if (other.isSetXlid()) {
      this.xlid = other.xlid;
    }
    if (other.isSetXlbh()) {
      this.xlbh = other.xlbh;
    }
    if (other.isSetXlmc()) {
      this.xlmc = other.xlmc;
    }
    if (other.isSetClid()) {
      this.clid = other.clid;
    }
    if (other.isSetEmpId()) {
      this.empId = other.empId;
    }
    if (other.isSetSbsxzch()) {
      this.sbsxzch = other.sbsxzch;
    }
    this.ljsj = other.ljsj;
    this.jd = other.jd;
    this.wd = other.wd;
    this.sssd = other.sssd;
    this.fxj = other.fxj;
    this.yyzt = other.yyzt;
    if (other.isSetSjbh()) {
      this.sjbh = other.sjbh;
    }
    if (other.isSetSim()) {
      this.sim = other.sim;
    }
    this.ljcs = other.ljcs;
    this.sflssj = other.sflssj;
    if (other.isSetCcxlh()) {
      this.ccxlh = other.ccxlh;
    }
  }

  public CLLJSJDTO deepCopy() {
    return new CLLJSJDTO(this);
  }

  @Override
  public void clear() {
    this.actionCMDType = null;
    this.xlid = null;
    this.xlbh = null;
    this.xlmc = null;
    this.clid = null;
    this.empId = null;
    this.sbsxzch = null;
    setLjsjIsSet(false);
    this.ljsj = 0;
    setJdIsSet(false);
    this.jd = 0;
    setWdIsSet(false);
    this.wd = 0;
    setSssdIsSet(false);
    this.sssd = 0;
    setFxjIsSet(false);
    this.fxj = 0;
    setYyztIsSet(false);
    this.yyzt = 0;
    this.sjbh = null;
    this.sim = null;
    setLjcsIsSet(false);
    this.ljcs = 0;
    setSflssjIsSet(false);
    this.sflssj = 0;
    this.ccxlh = null;
  }

  /**
   * 
   * @see ActionCMDType
   */
  public ActionCMDType getActionCMDType() {
    return this.actionCMDType;
  }

  /**
   * 
   * @see ActionCMDType
   */
  public CLLJSJDTO setActionCMDType(ActionCMDType actionCMDType) {
    this.actionCMDType = actionCMDType;
    return this;
  }

  public void unsetActionCMDType() {
    this.actionCMDType = null;
  }

  /** Returns true if field actionCMDType is set (has been assigned a value) and false otherwise */
  public boolean isSetActionCMDType() {
    return this.actionCMDType != null;
  }

  public void setActionCMDTypeIsSet(boolean value) {
    if (!value) {
      this.actionCMDType = null;
    }
  }

  public java.lang.String getXlid() {
    return this.xlid;
  }

  public CLLJSJDTO setXlid(java.lang.String xlid) {
    this.xlid = xlid;
    return this;
  }

  public void unsetXlid() {
    this.xlid = null;
  }

  /** Returns true if field xlid is set (has been assigned a value) and false otherwise */
  public boolean isSetXlid() {
    return this.xlid != null;
  }

  public void setXlidIsSet(boolean value) {
    if (!value) {
      this.xlid = null;
    }
  }

  public java.lang.String getXlbh() {
    return this.xlbh;
  }

  public CLLJSJDTO setXlbh(java.lang.String xlbh) {
    this.xlbh = xlbh;
    return this;
  }

  public void unsetXlbh() {
    this.xlbh = null;
  }

  /** Returns true if field xlbh is set (has been assigned a value) and false otherwise */
  public boolean isSetXlbh() {
    return this.xlbh != null;
  }

  public void setXlbhIsSet(boolean value) {
    if (!value) {
      this.xlbh = null;
    }
  }

  public java.lang.String getXlmc() {
    return this.xlmc;
  }

  public CLLJSJDTO setXlmc(java.lang.String xlmc) {
    this.xlmc = xlmc;
    return this;
  }

  public void unsetXlmc() {
    this.xlmc = null;
  }

  /** Returns true if field xlmc is set (has been assigned a value) and false otherwise */
  public boolean isSetXlmc() {
    return this.xlmc != null;
  }

  public void setXlmcIsSet(boolean value) {
    if (!value) {
      this.xlmc = null;
    }
  }

  public java.lang.String getClid() {
    return this.clid;
  }

  public CLLJSJDTO setClid(java.lang.String clid) {
    this.clid = clid;
    return this;
  }

  public void unsetClid() {
    this.clid = null;
  }

  /** Returns true if field clid is set (has been assigned a value) and false otherwise */
  public boolean isSetClid() {
    return this.clid != null;
  }

  public void setClidIsSet(boolean value) {
    if (!value) {
      this.clid = null;
    }
  }

  public java.lang.String getEmpId() {
    return this.empId;
  }

  public CLLJSJDTO setEmpId(java.lang.String empId) {
    this.empId = empId;
    return this;
  }

  public void unsetEmpId() {
    this.empId = null;
  }

  /** Returns true if field empId is set (has been assigned a value) and false otherwise */
  public boolean isSetEmpId() {
    return this.empId != null;
  }

  public void setEmpIdIsSet(boolean value) {
    if (!value) {
      this.empId = null;
    }
  }

  public java.lang.String getSbsxzch() {
    return this.sbsxzch;
  }

  public CLLJSJDTO setSbsxzch(java.lang.String sbsxzch) {
    this.sbsxzch = sbsxzch;
    return this;
  }

  public void unsetSbsxzch() {
    this.sbsxzch = null;
  }

  /** Returns true if field sbsxzch is set (has been assigned a value) and false otherwise */
  public boolean isSetSbsxzch() {
    return this.sbsxzch != null;
  }

  public void setSbsxzchIsSet(boolean value) {
    if (!value) {
      this.sbsxzch = null;
    }
  }

  public int getLjsj() {
    return this.ljsj;
  }

  public CLLJSJDTO setLjsj(int ljsj) {
    this.ljsj = ljsj;
    setLjsjIsSet(true);
    return this;
  }

  public void unsetLjsj() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LJSJ_ISSET_ID);
  }

  /** Returns true if field ljsj is set (has been assigned a value) and false otherwise */
  public boolean isSetLjsj() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LJSJ_ISSET_ID);
  }

  public void setLjsjIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LJSJ_ISSET_ID, value);
  }

  public int getJd() {
    return this.jd;
  }

  public CLLJSJDTO setJd(int jd) {
    this.jd = jd;
    setJdIsSet(true);
    return this;
  }

  public void unsetJd() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __JD_ISSET_ID);
  }

  /** Returns true if field jd is set (has been assigned a value) and false otherwise */
  public boolean isSetJd() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __JD_ISSET_ID);
  }

  public void setJdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __JD_ISSET_ID, value);
  }

  public int getWd() {
    return this.wd;
  }

  public CLLJSJDTO setWd(int wd) {
    this.wd = wd;
    setWdIsSet(true);
    return this;
  }

  public void unsetWd() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WD_ISSET_ID);
  }

  /** Returns true if field wd is set (has been assigned a value) and false otherwise */
  public boolean isSetWd() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WD_ISSET_ID);
  }

  public void setWdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WD_ISSET_ID, value);
  }

  public byte getSssd() {
    return this.sssd;
  }

  public CLLJSJDTO setSssd(byte sssd) {
    this.sssd = sssd;
    setSssdIsSet(true);
    return this;
  }

  public void unsetSssd() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SSSD_ISSET_ID);
  }

  /** Returns true if field sssd is set (has been assigned a value) and false otherwise */
  public boolean isSetSssd() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SSSD_ISSET_ID);
  }

  public void setSssdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SSSD_ISSET_ID, value);
  }

  public short getFxj() {
    return this.fxj;
  }

  public CLLJSJDTO setFxj(short fxj) {
    this.fxj = fxj;
    setFxjIsSet(true);
    return this;
  }

  public void unsetFxj() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FXJ_ISSET_ID);
  }

  /** Returns true if field fxj is set (has been assigned a value) and false otherwise */
  public boolean isSetFxj() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FXJ_ISSET_ID);
  }

  public void setFxjIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FXJ_ISSET_ID, value);
  }

  public byte getYyzt() {
    return this.yyzt;
  }

  public CLLJSJDTO setYyzt(byte yyzt) {
    this.yyzt = yyzt;
    setYyztIsSet(true);
    return this;
  }

  public void unsetYyzt() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __YYZT_ISSET_ID);
  }

  /** Returns true if field yyzt is set (has been assigned a value) and false otherwise */
  public boolean isSetYyzt() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __YYZT_ISSET_ID);
  }

  public void setYyztIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __YYZT_ISSET_ID, value);
  }

  public java.lang.String getSjbh() {
    return this.sjbh;
  }

  public CLLJSJDTO setSjbh(java.lang.String sjbh) {
    this.sjbh = sjbh;
    return this;
  }

  public void unsetSjbh() {
    this.sjbh = null;
  }

  /** Returns true if field sjbh is set (has been assigned a value) and false otherwise */
  public boolean isSetSjbh() {
    return this.sjbh != null;
  }

  public void setSjbhIsSet(boolean value) {
    if (!value) {
      this.sjbh = null;
    }
  }

  public java.lang.String getSim() {
    return this.sim;
  }

  public CLLJSJDTO setSim(java.lang.String sim) {
    this.sim = sim;
    return this;
  }

  public void unsetSim() {
    this.sim = null;
  }

  /** Returns true if field sim is set (has been assigned a value) and false otherwise */
  public boolean isSetSim() {
    return this.sim != null;
  }

  public void setSimIsSet(boolean value) {
    if (!value) {
      this.sim = null;
    }
  }

  public byte getLjcs() {
    return this.ljcs;
  }

  public CLLJSJDTO setLjcs(byte ljcs) {
    this.ljcs = ljcs;
    setLjcsIsSet(true);
    return this;
  }

  public void unsetLjcs() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LJCS_ISSET_ID);
  }

  /** Returns true if field ljcs is set (has been assigned a value) and false otherwise */
  public boolean isSetLjcs() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LJCS_ISSET_ID);
  }

  public void setLjcsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LJCS_ISSET_ID, value);
  }

  public byte getSflssj() {
    return this.sflssj;
  }

  public CLLJSJDTO setSflssj(byte sflssj) {
    this.sflssj = sflssj;
    setSflssjIsSet(true);
    return this;
  }

  public void unsetSflssj() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SFLSSJ_ISSET_ID);
  }

  /** Returns true if field sflssj is set (has been assigned a value) and false otherwise */
  public boolean isSetSflssj() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SFLSSJ_ISSET_ID);
  }

  public void setSflssjIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SFLSSJ_ISSET_ID, value);
  }

  public java.lang.String getCcxlh() {
    return this.ccxlh;
  }

  public CLLJSJDTO setCcxlh(java.lang.String ccxlh) {
    this.ccxlh = ccxlh;
    return this;
  }

  public void unsetCcxlh() {
    this.ccxlh = null;
  }

  /** Returns true if field ccxlh is set (has been assigned a value) and false otherwise */
  public boolean isSetCcxlh() {
    return this.ccxlh != null;
  }

  public void setCcxlhIsSet(boolean value) {
    if (!value) {
      this.ccxlh = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ACTION_CMDTYPE:
      if (value == null) {
        unsetActionCMDType();
      } else {
        setActionCMDType((ActionCMDType)value);
      }
      break;

    case XLID:
      if (value == null) {
        unsetXlid();
      } else {
        setXlid((java.lang.String)value);
      }
      break;

    case XLBH:
      if (value == null) {
        unsetXlbh();
      } else {
        setXlbh((java.lang.String)value);
      }
      break;

    case XLMC:
      if (value == null) {
        unsetXlmc();
      } else {
        setXlmc((java.lang.String)value);
      }
      break;

    case CLID:
      if (value == null) {
        unsetClid();
      } else {
        setClid((java.lang.String)value);
      }
      break;

    case EMP_ID:
      if (value == null) {
        unsetEmpId();
      } else {
        setEmpId((java.lang.String)value);
      }
      break;

    case SBSXZCH:
      if (value == null) {
        unsetSbsxzch();
      } else {
        setSbsxzch((java.lang.String)value);
      }
      break;

    case LJSJ:
      if (value == null) {
        unsetLjsj();
      } else {
        setLjsj((java.lang.Integer)value);
      }
      break;

    case JD:
      if (value == null) {
        unsetJd();
      } else {
        setJd((java.lang.Integer)value);
      }
      break;

    case WD:
      if (value == null) {
        unsetWd();
      } else {
        setWd((java.lang.Integer)value);
      }
      break;

    case SSSD:
      if (value == null) {
        unsetSssd();
      } else {
        setSssd((java.lang.Byte)value);
      }
      break;

    case FXJ:
      if (value == null) {
        unsetFxj();
      } else {
        setFxj((java.lang.Short)value);
      }
      break;

    case YYZT:
      if (value == null) {
        unsetYyzt();
      } else {
        setYyzt((java.lang.Byte)value);
      }
      break;

    case SJBH:
      if (value == null) {
        unsetSjbh();
      } else {
        setSjbh((java.lang.String)value);
      }
      break;

    case SIM:
      if (value == null) {
        unsetSim();
      } else {
        setSim((java.lang.String)value);
      }
      break;

    case LJCS:
      if (value == null) {
        unsetLjcs();
      } else {
        setLjcs((java.lang.Byte)value);
      }
      break;

    case SFLSSJ:
      if (value == null) {
        unsetSflssj();
      } else {
        setSflssj((java.lang.Byte)value);
      }
      break;

    case CCXLH:
      if (value == null) {
        unsetCcxlh();
      } else {
        setCcxlh((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ACTION_CMDTYPE:
      return getActionCMDType();

    case XLID:
      return getXlid();

    case XLBH:
      return getXlbh();

    case XLMC:
      return getXlmc();

    case CLID:
      return getClid();

    case EMP_ID:
      return getEmpId();

    case SBSXZCH:
      return getSbsxzch();

    case LJSJ:
      return getLjsj();

    case JD:
      return getJd();

    case WD:
      return getWd();

    case SSSD:
      return getSssd();

    case FXJ:
      return getFxj();

    case YYZT:
      return getYyzt();

    case SJBH:
      return getSjbh();

    case SIM:
      return getSim();

    case LJCS:
      return getLjcs();

    case SFLSSJ:
      return getSflssj();

    case CCXLH:
      return getCcxlh();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ACTION_CMDTYPE:
      return isSetActionCMDType();
    case XLID:
      return isSetXlid();
    case XLBH:
      return isSetXlbh();
    case XLMC:
      return isSetXlmc();
    case CLID:
      return isSetClid();
    case EMP_ID:
      return isSetEmpId();
    case SBSXZCH:
      return isSetSbsxzch();
    case LJSJ:
      return isSetLjsj();
    case JD:
      return isSetJd();
    case WD:
      return isSetWd();
    case SSSD:
      return isSetSssd();
    case FXJ:
      return isSetFxj();
    case YYZT:
      return isSetYyzt();
    case SJBH:
      return isSetSjbh();
    case SIM:
      return isSetSim();
    case LJCS:
      return isSetLjcs();
    case SFLSSJ:
      return isSetSflssj();
    case CCXLH:
      return isSetCcxlh();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof CLLJSJDTO)
      return this.equals((CLLJSJDTO)that);
    return false;
  }

  public boolean equals(CLLJSJDTO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_actionCMDType = true && this.isSetActionCMDType();
    boolean that_present_actionCMDType = true && that.isSetActionCMDType();
    if (this_present_actionCMDType || that_present_actionCMDType) {
      if (!(this_present_actionCMDType && that_present_actionCMDType))
        return false;
      if (!this.actionCMDType.equals(that.actionCMDType))
        return false;
    }

    boolean this_present_xlid = true && this.isSetXlid();
    boolean that_present_xlid = true && that.isSetXlid();
    if (this_present_xlid || that_present_xlid) {
      if (!(this_present_xlid && that_present_xlid))
        return false;
      if (!this.xlid.equals(that.xlid))
        return false;
    }

    boolean this_present_xlbh = true && this.isSetXlbh();
    boolean that_present_xlbh = true && that.isSetXlbh();
    if (this_present_xlbh || that_present_xlbh) {
      if (!(this_present_xlbh && that_present_xlbh))
        return false;
      if (!this.xlbh.equals(that.xlbh))
        return false;
    }

    boolean this_present_xlmc = true && this.isSetXlmc();
    boolean that_present_xlmc = true && that.isSetXlmc();
    if (this_present_xlmc || that_present_xlmc) {
      if (!(this_present_xlmc && that_present_xlmc))
        return false;
      if (!this.xlmc.equals(that.xlmc))
        return false;
    }

    boolean this_present_clid = true && this.isSetClid();
    boolean that_present_clid = true && that.isSetClid();
    if (this_present_clid || that_present_clid) {
      if (!(this_present_clid && that_present_clid))
        return false;
      if (!this.clid.equals(that.clid))
        return false;
    }

    boolean this_present_empId = true && this.isSetEmpId();
    boolean that_present_empId = true && that.isSetEmpId();
    if (this_present_empId || that_present_empId) {
      if (!(this_present_empId && that_present_empId))
        return false;
      if (!this.empId.equals(that.empId))
        return false;
    }

    boolean this_present_sbsxzch = true && this.isSetSbsxzch();
    boolean that_present_sbsxzch = true && that.isSetSbsxzch();
    if (this_present_sbsxzch || that_present_sbsxzch) {
      if (!(this_present_sbsxzch && that_present_sbsxzch))
        return false;
      if (!this.sbsxzch.equals(that.sbsxzch))
        return false;
    }

    boolean this_present_ljsj = true;
    boolean that_present_ljsj = true;
    if (this_present_ljsj || that_present_ljsj) {
      if (!(this_present_ljsj && that_present_ljsj))
        return false;
      if (this.ljsj != that.ljsj)
        return false;
    }

    boolean this_present_jd = true;
    boolean that_present_jd = true;
    if (this_present_jd || that_present_jd) {
      if (!(this_present_jd && that_present_jd))
        return false;
      if (this.jd != that.jd)
        return false;
    }

    boolean this_present_wd = true;
    boolean that_present_wd = true;
    if (this_present_wd || that_present_wd) {
      if (!(this_present_wd && that_present_wd))
        return false;
      if (this.wd != that.wd)
        return false;
    }

    boolean this_present_sssd = true;
    boolean that_present_sssd = true;
    if (this_present_sssd || that_present_sssd) {
      if (!(this_present_sssd && that_present_sssd))
        return false;
      if (this.sssd != that.sssd)
        return false;
    }

    boolean this_present_fxj = true;
    boolean that_present_fxj = true;
    if (this_present_fxj || that_present_fxj) {
      if (!(this_present_fxj && that_present_fxj))
        return false;
      if (this.fxj != that.fxj)
        return false;
    }

    boolean this_present_yyzt = true;
    boolean that_present_yyzt = true;
    if (this_present_yyzt || that_present_yyzt) {
      if (!(this_present_yyzt && that_present_yyzt))
        return false;
      if (this.yyzt != that.yyzt)
        return false;
    }

    boolean this_present_sjbh = true && this.isSetSjbh();
    boolean that_present_sjbh = true && that.isSetSjbh();
    if (this_present_sjbh || that_present_sjbh) {
      if (!(this_present_sjbh && that_present_sjbh))
        return false;
      if (!this.sjbh.equals(that.sjbh))
        return false;
    }

    boolean this_present_sim = true && this.isSetSim();
    boolean that_present_sim = true && that.isSetSim();
    if (this_present_sim || that_present_sim) {
      if (!(this_present_sim && that_present_sim))
        return false;
      if (!this.sim.equals(that.sim))
        return false;
    }

    boolean this_present_ljcs = true;
    boolean that_present_ljcs = true;
    if (this_present_ljcs || that_present_ljcs) {
      if (!(this_present_ljcs && that_present_ljcs))
        return false;
      if (this.ljcs != that.ljcs)
        return false;
    }

    boolean this_present_sflssj = true;
    boolean that_present_sflssj = true;
    if (this_present_sflssj || that_present_sflssj) {
      if (!(this_present_sflssj && that_present_sflssj))
        return false;
      if (this.sflssj != that.sflssj)
        return false;
    }

    boolean this_present_ccxlh = true && this.isSetCcxlh();
    boolean that_present_ccxlh = true && that.isSetCcxlh();
    if (this_present_ccxlh || that_present_ccxlh) {
      if (!(this_present_ccxlh && that_present_ccxlh))
        return false;
      if (!this.ccxlh.equals(that.ccxlh))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetActionCMDType()) ? 131071 : 524287);
    if (isSetActionCMDType())
      hashCode = hashCode * 8191 + actionCMDType.getValue();

    hashCode = hashCode * 8191 + ((isSetXlid()) ? 131071 : 524287);
    if (isSetXlid())
      hashCode = hashCode * 8191 + xlid.hashCode();

    hashCode = hashCode * 8191 + ((isSetXlbh()) ? 131071 : 524287);
    if (isSetXlbh())
      hashCode = hashCode * 8191 + xlbh.hashCode();

    hashCode = hashCode * 8191 + ((isSetXlmc()) ? 131071 : 524287);
    if (isSetXlmc())
      hashCode = hashCode * 8191 + xlmc.hashCode();

    hashCode = hashCode * 8191 + ((isSetClid()) ? 131071 : 524287);
    if (isSetClid())
      hashCode = hashCode * 8191 + clid.hashCode();

    hashCode = hashCode * 8191 + ((isSetEmpId()) ? 131071 : 524287);
    if (isSetEmpId())
      hashCode = hashCode * 8191 + empId.hashCode();

    hashCode = hashCode * 8191 + ((isSetSbsxzch()) ? 131071 : 524287);
    if (isSetSbsxzch())
      hashCode = hashCode * 8191 + sbsxzch.hashCode();

    hashCode = hashCode * 8191 + ljsj;

    hashCode = hashCode * 8191 + jd;

    hashCode = hashCode * 8191 + wd;

    hashCode = hashCode * 8191 + (int) (sssd);

    hashCode = hashCode * 8191 + fxj;

    hashCode = hashCode * 8191 + (int) (yyzt);

    hashCode = hashCode * 8191 + ((isSetSjbh()) ? 131071 : 524287);
    if (isSetSjbh())
      hashCode = hashCode * 8191 + sjbh.hashCode();

    hashCode = hashCode * 8191 + ((isSetSim()) ? 131071 : 524287);
    if (isSetSim())
      hashCode = hashCode * 8191 + sim.hashCode();

    hashCode = hashCode * 8191 + (int) (ljcs);

    hashCode = hashCode * 8191 + (int) (sflssj);

    hashCode = hashCode * 8191 + ((isSetCcxlh()) ? 131071 : 524287);
    if (isSetCcxlh())
      hashCode = hashCode * 8191 + ccxlh.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(CLLJSJDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetActionCMDType()).compareTo(other.isSetActionCMDType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionCMDType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionCMDType, other.actionCMDType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetXlid()).compareTo(other.isSetXlid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXlid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xlid, other.xlid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetXlbh()).compareTo(other.isSetXlbh());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXlbh()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xlbh, other.xlbh);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetXlmc()).compareTo(other.isSetXlmc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXlmc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xlmc, other.xlmc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetClid()).compareTo(other.isSetClid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clid, other.clid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEmpId()).compareTo(other.isSetEmpId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmpId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.empId, other.empId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSbsxzch()).compareTo(other.isSetSbsxzch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSbsxzch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sbsxzch, other.sbsxzch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLjsj()).compareTo(other.isSetLjsj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLjsj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ljsj, other.ljsj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetJd()).compareTo(other.isSetJd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jd, other.jd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWd()).compareTo(other.isSetWd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wd, other.wd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSssd()).compareTo(other.isSetSssd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSssd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sssd, other.sssd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFxj()).compareTo(other.isSetFxj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFxj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fxj, other.fxj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetYyzt()).compareTo(other.isSetYyzt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYyzt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yyzt, other.yyzt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSjbh()).compareTo(other.isSetSjbh());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSjbh()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sjbh, other.sjbh);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSim()).compareTo(other.isSetSim());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSim()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sim, other.sim);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLjcs()).compareTo(other.isSetLjcs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLjcs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ljcs, other.ljcs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSflssj()).compareTo(other.isSetSflssj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSflssj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sflssj, other.sflssj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCcxlh()).compareTo(other.isSetCcxlh());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCcxlh()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ccxlh, other.ccxlh);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("CLLJSJDTO(");
    boolean first = true;

    sb.append("actionCMDType:");
    if (this.actionCMDType == null) {
      sb.append("null");
    } else {
      sb.append(this.actionCMDType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("xlid:");
    if (this.xlid == null) {
      sb.append("null");
    } else {
      sb.append(this.xlid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("xlbh:");
    if (this.xlbh == null) {
      sb.append("null");
    } else {
      sb.append(this.xlbh);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("xlmc:");
    if (this.xlmc == null) {
      sb.append("null");
    } else {
      sb.append(this.xlmc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clid:");
    if (this.clid == null) {
      sb.append("null");
    } else {
      sb.append(this.clid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("empId:");
    if (this.empId == null) {
      sb.append("null");
    } else {
      sb.append(this.empId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sbsxzch:");
    if (this.sbsxzch == null) {
      sb.append("null");
    } else {
      sb.append(this.sbsxzch);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ljsj:");
    sb.append(this.ljsj);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jd:");
    sb.append(this.jd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("wd:");
    sb.append(this.wd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sssd:");
    sb.append(this.sssd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fxj:");
    sb.append(this.fxj);
    first = false;
    if (!first) sb.append(", ");
    sb.append("yyzt:");
    sb.append(this.yyzt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sjbh:");
    if (this.sjbh == null) {
      sb.append("null");
    } else {
      sb.append(this.sjbh);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sim:");
    if (this.sim == null) {
      sb.append("null");
    } else {
      sb.append(this.sim);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ljcs:");
    sb.append(this.ljcs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sflssj:");
    sb.append(this.sflssj);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ccxlh:");
    if (this.ccxlh == null) {
      sb.append("null");
    } else {
      sb.append(this.ccxlh);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CLLJSJDTOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CLLJSJDTOStandardScheme getScheme() {
      return new CLLJSJDTOStandardScheme();
    }
  }

  private static class CLLJSJDTOStandardScheme extends org.apache.thrift.scheme.StandardScheme<CLLJSJDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CLLJSJDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACTION_CMDTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.actionCMDType = ActionCMDType.findByValue(iprot.readI32());
              struct.setActionCMDTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // XLID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.xlid = iprot.readString();
              struct.setXlidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // XLBH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.xlbh = iprot.readString();
              struct.setXlbhIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // XLMC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.xlmc = iprot.readString();
              struct.setXlmcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CLID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clid = iprot.readString();
              struct.setClidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EMP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.empId = iprot.readString();
              struct.setEmpIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SBSXZCH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sbsxzch = iprot.readString();
              struct.setSbsxzchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LJSJ
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ljsj = iprot.readI32();
              struct.setLjsjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // JD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.jd = iprot.readI32();
              struct.setJdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // WD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wd = iprot.readI32();
              struct.setWdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SSSD
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.sssd = iprot.readByte();
              struct.setSssdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FXJ
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.fxj = iprot.readI16();
              struct.setFxjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // YYZT
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.yyzt = iprot.readByte();
              struct.setYyztIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SJBH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sjbh = iprot.readString();
              struct.setSjbhIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SIM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sim = iprot.readString();
              struct.setSimIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // LJCS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.ljcs = iprot.readByte();
              struct.setLjcsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // SFLSSJ
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.sflssj = iprot.readByte();
              struct.setSflssjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CCXLH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ccxlh = iprot.readString();
              struct.setCcxlhIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CLLJSJDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.actionCMDType != null) {
        oprot.writeFieldBegin(ACTION_CMDTYPE_FIELD_DESC);
        oprot.writeI32(struct.actionCMDType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.xlid != null) {
        oprot.writeFieldBegin(XLID_FIELD_DESC);
        oprot.writeString(struct.xlid);
        oprot.writeFieldEnd();
      }
      if (struct.xlbh != null) {
        oprot.writeFieldBegin(XLBH_FIELD_DESC);
        oprot.writeString(struct.xlbh);
        oprot.writeFieldEnd();
      }
      if (struct.xlmc != null) {
        oprot.writeFieldBegin(XLMC_FIELD_DESC);
        oprot.writeString(struct.xlmc);
        oprot.writeFieldEnd();
      }
      if (struct.clid != null) {
        oprot.writeFieldBegin(CLID_FIELD_DESC);
        oprot.writeString(struct.clid);
        oprot.writeFieldEnd();
      }
      if (struct.empId != null) {
        oprot.writeFieldBegin(EMP_ID_FIELD_DESC);
        oprot.writeString(struct.empId);
        oprot.writeFieldEnd();
      }
      if (struct.sbsxzch != null) {
        oprot.writeFieldBegin(SBSXZCH_FIELD_DESC);
        oprot.writeString(struct.sbsxzch);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LJSJ_FIELD_DESC);
      oprot.writeI32(struct.ljsj);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JD_FIELD_DESC);
      oprot.writeI32(struct.jd);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WD_FIELD_DESC);
      oprot.writeI32(struct.wd);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SSSD_FIELD_DESC);
      oprot.writeByte(struct.sssd);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FXJ_FIELD_DESC);
      oprot.writeI16(struct.fxj);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(YYZT_FIELD_DESC);
      oprot.writeByte(struct.yyzt);
      oprot.writeFieldEnd();
      if (struct.sjbh != null) {
        oprot.writeFieldBegin(SJBH_FIELD_DESC);
        oprot.writeString(struct.sjbh);
        oprot.writeFieldEnd();
      }
      if (struct.sim != null) {
        oprot.writeFieldBegin(SIM_FIELD_DESC);
        oprot.writeString(struct.sim);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LJCS_FIELD_DESC);
      oprot.writeByte(struct.ljcs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SFLSSJ_FIELD_DESC);
      oprot.writeByte(struct.sflssj);
      oprot.writeFieldEnd();
      if (struct.ccxlh != null) {
        oprot.writeFieldBegin(CCXLH_FIELD_DESC);
        oprot.writeString(struct.ccxlh);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CLLJSJDTOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CLLJSJDTOTupleScheme getScheme() {
      return new CLLJSJDTOTupleScheme();
    }
  }

  private static class CLLJSJDTOTupleScheme extends org.apache.thrift.scheme.TupleScheme<CLLJSJDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CLLJSJDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetActionCMDType()) {
        optionals.set(0);
      }
      if (struct.isSetXlid()) {
        optionals.set(1);
      }
      if (struct.isSetXlbh()) {
        optionals.set(2);
      }
      if (struct.isSetXlmc()) {
        optionals.set(3);
      }
      if (struct.isSetClid()) {
        optionals.set(4);
      }
      if (struct.isSetEmpId()) {
        optionals.set(5);
      }
      if (struct.isSetSbsxzch()) {
        optionals.set(6);
      }
      if (struct.isSetLjsj()) {
        optionals.set(7);
      }
      if (struct.isSetJd()) {
        optionals.set(8);
      }
      if (struct.isSetWd()) {
        optionals.set(9);
      }
      if (struct.isSetSssd()) {
        optionals.set(10);
      }
      if (struct.isSetFxj()) {
        optionals.set(11);
      }
      if (struct.isSetYyzt()) {
        optionals.set(12);
      }
      if (struct.isSetSjbh()) {
        optionals.set(13);
      }
      if (struct.isSetSim()) {
        optionals.set(14);
      }
      if (struct.isSetLjcs()) {
        optionals.set(15);
      }
      if (struct.isSetSflssj()) {
        optionals.set(16);
      }
      if (struct.isSetCcxlh()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetActionCMDType()) {
        oprot.writeI32(struct.actionCMDType.getValue());
      }
      if (struct.isSetXlid()) {
        oprot.writeString(struct.xlid);
      }
      if (struct.isSetXlbh()) {
        oprot.writeString(struct.xlbh);
      }
      if (struct.isSetXlmc()) {
        oprot.writeString(struct.xlmc);
      }
      if (struct.isSetClid()) {
        oprot.writeString(struct.clid);
      }
      if (struct.isSetEmpId()) {
        oprot.writeString(struct.empId);
      }
      if (struct.isSetSbsxzch()) {
        oprot.writeString(struct.sbsxzch);
      }
      if (struct.isSetLjsj()) {
        oprot.writeI32(struct.ljsj);
      }
      if (struct.isSetJd()) {
        oprot.writeI32(struct.jd);
      }
      if (struct.isSetWd()) {
        oprot.writeI32(struct.wd);
      }
      if (struct.isSetSssd()) {
        oprot.writeByte(struct.sssd);
      }
      if (struct.isSetFxj()) {
        oprot.writeI16(struct.fxj);
      }
      if (struct.isSetYyzt()) {
        oprot.writeByte(struct.yyzt);
      }
      if (struct.isSetSjbh()) {
        oprot.writeString(struct.sjbh);
      }
      if (struct.isSetSim()) {
        oprot.writeString(struct.sim);
      }
      if (struct.isSetLjcs()) {
        oprot.writeByte(struct.ljcs);
      }
      if (struct.isSetSflssj()) {
        oprot.writeByte(struct.sflssj);
      }
      if (struct.isSetCcxlh()) {
        oprot.writeString(struct.ccxlh);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CLLJSJDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.actionCMDType = ActionCMDType.findByValue(iprot.readI32());
        struct.setActionCMDTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.xlid = iprot.readString();
        struct.setXlidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.xlbh = iprot.readString();
        struct.setXlbhIsSet(true);
      }
      if (incoming.get(3)) {
        struct.xlmc = iprot.readString();
        struct.setXlmcIsSet(true);
      }
      if (incoming.get(4)) {
        struct.clid = iprot.readString();
        struct.setClidIsSet(true);
      }
      if (incoming.get(5)) {
        struct.empId = iprot.readString();
        struct.setEmpIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.sbsxzch = iprot.readString();
        struct.setSbsxzchIsSet(true);
      }
      if (incoming.get(7)) {
        struct.ljsj = iprot.readI32();
        struct.setLjsjIsSet(true);
      }
      if (incoming.get(8)) {
        struct.jd = iprot.readI32();
        struct.setJdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.wd = iprot.readI32();
        struct.setWdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.sssd = iprot.readByte();
        struct.setSssdIsSet(true);
      }
      if (incoming.get(11)) {
        struct.fxj = iprot.readI16();
        struct.setFxjIsSet(true);
      }
      if (incoming.get(12)) {
        struct.yyzt = iprot.readByte();
        struct.setYyztIsSet(true);
      }
      if (incoming.get(13)) {
        struct.sjbh = iprot.readString();
        struct.setSjbhIsSet(true);
      }
      if (incoming.get(14)) {
        struct.sim = iprot.readString();
        struct.setSimIsSet(true);
      }
      if (incoming.get(15)) {
        struct.ljcs = iprot.readByte();
        struct.setLjcsIsSet(true);
      }
      if (incoming.get(16)) {
        struct.sflssj = iprot.readByte();
        struct.setSflssjIsSet(true);
      }
      if (incoming.get(17)) {
        struct.ccxlh = iprot.readString();
        struct.setCcxlhIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

