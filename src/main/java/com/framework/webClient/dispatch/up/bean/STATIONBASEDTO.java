/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.framework.webClient.dispatch.up.bean;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-04-24")
public class STATIONBASEDTO implements org.apache.thrift.TBase<STATIONBASEDTO, STATIONBASEDTO._Fields>, java.io.Serializable, Cloneable, Comparable<STATIONBASEDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("STATIONBASEDTO");

  private static final org.apache.thrift.protocol.TField ACTION_CMDTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("actionCMDType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField XLBH_FIELD_DESC = new org.apache.thrift.protocol.TField("xlbh", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField FX_FIELD_DESC = new org.apache.thrift.protocol.TField("fx", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField ZDXH_FIELD_DESC = new org.apache.thrift.protocol.TField("zdxh", org.apache.thrift.protocol.TType.BYTE, (short)4);
  private static final org.apache.thrift.protocol.TField JD_FIELD_DESC = new org.apache.thrift.protocol.TField("jd", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField WD_FIELD_DESC = new org.apache.thrift.protocol.TField("wd", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField JSZJL_FIELD_DESC = new org.apache.thrift.protocol.TField("jszjl", org.apache.thrift.protocol.TType.I16, (short)7);
  private static final org.apache.thrift.protocol.TField ZDMC_FIELD_DESC = new org.apache.thrift.protocol.TField("zdmc", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ZDBM_FIELD_DESC = new org.apache.thrift.protocol.TField("zdbm", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new STATIONBASEDTOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new STATIONBASEDTOTupleSchemeFactory();

  /**
   * 
   * @see ActionCMDType
   */
  public ActionCMDType actionCMDType; // required
  public int xlbh; // required
  public byte fx; // required
  public byte zdxh; // required
  public int jd; // required
  public int wd; // required
  public short jszjl; // required
  public java.lang.String zdmc; // required
  public java.lang.String zdbm; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see ActionCMDType
     */
    ACTION_CMDTYPE((short)1, "actionCMDType"),
    XLBH((short)2, "xlbh"),
    FX((short)3, "fx"),
    ZDXH((short)4, "zdxh"),
    JD((short)5, "jd"),
    WD((short)6, "wd"),
    JSZJL((short)7, "jszjl"),
    ZDMC((short)8, "zdmc"),
    ZDBM((short)9, "zdbm");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACTION_CMDTYPE
          return ACTION_CMDTYPE;
        case 2: // XLBH
          return XLBH;
        case 3: // FX
          return FX;
        case 4: // ZDXH
          return ZDXH;
        case 5: // JD
          return JD;
        case 6: // WD
          return WD;
        case 7: // JSZJL
          return JSZJL;
        case 8: // ZDMC
          return ZDMC;
        case 9: // ZDBM
          return ZDBM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __XLBH_ISSET_ID = 0;
  private static final int __FX_ISSET_ID = 1;
  private static final int __ZDXH_ISSET_ID = 2;
  private static final int __JD_ISSET_ID = 3;
  private static final int __WD_ISSET_ID = 4;
  private static final int __JSZJL_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACTION_CMDTYPE, new org.apache.thrift.meta_data.FieldMetaData("actionCMDType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ActionCMDType.class)));
    tmpMap.put(_Fields.XLBH, new org.apache.thrift.meta_data.FieldMetaData("xlbh", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FX, new org.apache.thrift.meta_data.FieldMetaData("fx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ZDXH, new org.apache.thrift.meta_data.FieldMetaData("zdxh", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.JD, new org.apache.thrift.meta_data.FieldMetaData("jd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WD, new org.apache.thrift.meta_data.FieldMetaData("wd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.JSZJL, new org.apache.thrift.meta_data.FieldMetaData("jszjl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.ZDMC, new org.apache.thrift.meta_data.FieldMetaData("zdmc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ZDBM, new org.apache.thrift.meta_data.FieldMetaData("zdbm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(STATIONBASEDTO.class, metaDataMap);
  }

  public STATIONBASEDTO() {
  }

  public STATIONBASEDTO(
    ActionCMDType actionCMDType,
    int xlbh,
    byte fx,
    byte zdxh,
    int jd,
    int wd,
    short jszjl,
    java.lang.String zdmc,
    java.lang.String zdbm)
  {
    this();
    this.actionCMDType = actionCMDType;
    this.xlbh = xlbh;
    setXlbhIsSet(true);
    this.fx = fx;
    setFxIsSet(true);
    this.zdxh = zdxh;
    setZdxhIsSet(true);
    this.jd = jd;
    setJdIsSet(true);
    this.wd = wd;
    setWdIsSet(true);
    this.jszjl = jszjl;
    setJszjlIsSet(true);
    this.zdmc = zdmc;
    this.zdbm = zdbm;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public STATIONBASEDTO(STATIONBASEDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetActionCMDType()) {
      this.actionCMDType = other.actionCMDType;
    }
    this.xlbh = other.xlbh;
    this.fx = other.fx;
    this.zdxh = other.zdxh;
    this.jd = other.jd;
    this.wd = other.wd;
    this.jszjl = other.jszjl;
    if (other.isSetZdmc()) {
      this.zdmc = other.zdmc;
    }
    if (other.isSetZdbm()) {
      this.zdbm = other.zdbm;
    }
  }

  public STATIONBASEDTO deepCopy() {
    return new STATIONBASEDTO(this);
  }

  @Override
  public void clear() {
    this.actionCMDType = null;
    setXlbhIsSet(false);
    this.xlbh = 0;
    setFxIsSet(false);
    this.fx = 0;
    setZdxhIsSet(false);
    this.zdxh = 0;
    setJdIsSet(false);
    this.jd = 0;
    setWdIsSet(false);
    this.wd = 0;
    setJszjlIsSet(false);
    this.jszjl = 0;
    this.zdmc = null;
    this.zdbm = null;
  }

  /**
   * 
   * @see ActionCMDType
   */
  public ActionCMDType getActionCMDType() {
    return this.actionCMDType;
  }

  /**
   * 
   * @see ActionCMDType
   */
  public STATIONBASEDTO setActionCMDType(ActionCMDType actionCMDType) {
    this.actionCMDType = actionCMDType;
    return this;
  }

  public void unsetActionCMDType() {
    this.actionCMDType = null;
  }

  /** Returns true if field actionCMDType is set (has been assigned a value) and false otherwise */
  public boolean isSetActionCMDType() {
    return this.actionCMDType != null;
  }

  public void setActionCMDTypeIsSet(boolean value) {
    if (!value) {
      this.actionCMDType = null;
    }
  }

  public int getXlbh() {
    return this.xlbh;
  }

  public STATIONBASEDTO setXlbh(int xlbh) {
    this.xlbh = xlbh;
    setXlbhIsSet(true);
    return this;
  }

  public void unsetXlbh() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __XLBH_ISSET_ID);
  }

  /** Returns true if field xlbh is set (has been assigned a value) and false otherwise */
  public boolean isSetXlbh() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __XLBH_ISSET_ID);
  }

  public void setXlbhIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __XLBH_ISSET_ID, value);
  }

  public byte getFx() {
    return this.fx;
  }

  public STATIONBASEDTO setFx(byte fx) {
    this.fx = fx;
    setFxIsSet(true);
    return this;
  }

  public void unsetFx() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FX_ISSET_ID);
  }

  /** Returns true if field fx is set (has been assigned a value) and false otherwise */
  public boolean isSetFx() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FX_ISSET_ID);
  }

  public void setFxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FX_ISSET_ID, value);
  }

  public byte getZdxh() {
    return this.zdxh;
  }

  public STATIONBASEDTO setZdxh(byte zdxh) {
    this.zdxh = zdxh;
    setZdxhIsSet(true);
    return this;
  }

  public void unsetZdxh() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ZDXH_ISSET_ID);
  }

  /** Returns true if field zdxh is set (has been assigned a value) and false otherwise */
  public boolean isSetZdxh() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ZDXH_ISSET_ID);
  }

  public void setZdxhIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ZDXH_ISSET_ID, value);
  }

  public int getJd() {
    return this.jd;
  }

  public STATIONBASEDTO setJd(int jd) {
    this.jd = jd;
    setJdIsSet(true);
    return this;
  }

  public void unsetJd() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __JD_ISSET_ID);
  }

  /** Returns true if field jd is set (has been assigned a value) and false otherwise */
  public boolean isSetJd() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __JD_ISSET_ID);
  }

  public void setJdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __JD_ISSET_ID, value);
  }

  public int getWd() {
    return this.wd;
  }

  public STATIONBASEDTO setWd(int wd) {
    this.wd = wd;
    setWdIsSet(true);
    return this;
  }

  public void unsetWd() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WD_ISSET_ID);
  }

  /** Returns true if field wd is set (has been assigned a value) and false otherwise */
  public boolean isSetWd() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WD_ISSET_ID);
  }

  public void setWdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WD_ISSET_ID, value);
  }

  public short getJszjl() {
    return this.jszjl;
  }

  public STATIONBASEDTO setJszjl(short jszjl) {
    this.jszjl = jszjl;
    setJszjlIsSet(true);
    return this;
  }

  public void unsetJszjl() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __JSZJL_ISSET_ID);
  }

  /** Returns true if field jszjl is set (has been assigned a value) and false otherwise */
  public boolean isSetJszjl() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __JSZJL_ISSET_ID);
  }

  public void setJszjlIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __JSZJL_ISSET_ID, value);
  }

  public java.lang.String getZdmc() {
    return this.zdmc;
  }

  public STATIONBASEDTO setZdmc(java.lang.String zdmc) {
    this.zdmc = zdmc;
    return this;
  }

  public void unsetZdmc() {
    this.zdmc = null;
  }

  /** Returns true if field zdmc is set (has been assigned a value) and false otherwise */
  public boolean isSetZdmc() {
    return this.zdmc != null;
  }

  public void setZdmcIsSet(boolean value) {
    if (!value) {
      this.zdmc = null;
    }
  }

  public java.lang.String getZdbm() {
    return this.zdbm;
  }

  public STATIONBASEDTO setZdbm(java.lang.String zdbm) {
    this.zdbm = zdbm;
    return this;
  }

  public void unsetZdbm() {
    this.zdbm = null;
  }

  /** Returns true if field zdbm is set (has been assigned a value) and false otherwise */
  public boolean isSetZdbm() {
    return this.zdbm != null;
  }

  public void setZdbmIsSet(boolean value) {
    if (!value) {
      this.zdbm = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ACTION_CMDTYPE:
      if (value == null) {
        unsetActionCMDType();
      } else {
        setActionCMDType((ActionCMDType)value);
      }
      break;

    case XLBH:
      if (value == null) {
        unsetXlbh();
      } else {
        setXlbh((java.lang.Integer)value);
      }
      break;

    case FX:
      if (value == null) {
        unsetFx();
      } else {
        setFx((java.lang.Byte)value);
      }
      break;

    case ZDXH:
      if (value == null) {
        unsetZdxh();
      } else {
        setZdxh((java.lang.Byte)value);
      }
      break;

    case JD:
      if (value == null) {
        unsetJd();
      } else {
        setJd((java.lang.Integer)value);
      }
      break;

    case WD:
      if (value == null) {
        unsetWd();
      } else {
        setWd((java.lang.Integer)value);
      }
      break;

    case JSZJL:
      if (value == null) {
        unsetJszjl();
      } else {
        setJszjl((java.lang.Short)value);
      }
      break;

    case ZDMC:
      if (value == null) {
        unsetZdmc();
      } else {
        setZdmc((java.lang.String)value);
      }
      break;

    case ZDBM:
      if (value == null) {
        unsetZdbm();
      } else {
        setZdbm((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ACTION_CMDTYPE:
      return getActionCMDType();

    case XLBH:
      return getXlbh();

    case FX:
      return getFx();

    case ZDXH:
      return getZdxh();

    case JD:
      return getJd();

    case WD:
      return getWd();

    case JSZJL:
      return getJszjl();

    case ZDMC:
      return getZdmc();

    case ZDBM:
      return getZdbm();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ACTION_CMDTYPE:
      return isSetActionCMDType();
    case XLBH:
      return isSetXlbh();
    case FX:
      return isSetFx();
    case ZDXH:
      return isSetZdxh();
    case JD:
      return isSetJd();
    case WD:
      return isSetWd();
    case JSZJL:
      return isSetJszjl();
    case ZDMC:
      return isSetZdmc();
    case ZDBM:
      return isSetZdbm();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof STATIONBASEDTO)
      return this.equals((STATIONBASEDTO)that);
    return false;
  }

  public boolean equals(STATIONBASEDTO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_actionCMDType = true && this.isSetActionCMDType();
    boolean that_present_actionCMDType = true && that.isSetActionCMDType();
    if (this_present_actionCMDType || that_present_actionCMDType) {
      if (!(this_present_actionCMDType && that_present_actionCMDType))
        return false;
      if (!this.actionCMDType.equals(that.actionCMDType))
        return false;
    }

    boolean this_present_xlbh = true;
    boolean that_present_xlbh = true;
    if (this_present_xlbh || that_present_xlbh) {
      if (!(this_present_xlbh && that_present_xlbh))
        return false;
      if (this.xlbh != that.xlbh)
        return false;
    }

    boolean this_present_fx = true;
    boolean that_present_fx = true;
    if (this_present_fx || that_present_fx) {
      if (!(this_present_fx && that_present_fx))
        return false;
      if (this.fx != that.fx)
        return false;
    }

    boolean this_present_zdxh = true;
    boolean that_present_zdxh = true;
    if (this_present_zdxh || that_present_zdxh) {
      if (!(this_present_zdxh && that_present_zdxh))
        return false;
      if (this.zdxh != that.zdxh)
        return false;
    }

    boolean this_present_jd = true;
    boolean that_present_jd = true;
    if (this_present_jd || that_present_jd) {
      if (!(this_present_jd && that_present_jd))
        return false;
      if (this.jd != that.jd)
        return false;
    }

    boolean this_present_wd = true;
    boolean that_present_wd = true;
    if (this_present_wd || that_present_wd) {
      if (!(this_present_wd && that_present_wd))
        return false;
      if (this.wd != that.wd)
        return false;
    }

    boolean this_present_jszjl = true;
    boolean that_present_jszjl = true;
    if (this_present_jszjl || that_present_jszjl) {
      if (!(this_present_jszjl && that_present_jszjl))
        return false;
      if (this.jszjl != that.jszjl)
        return false;
    }

    boolean this_present_zdmc = true && this.isSetZdmc();
    boolean that_present_zdmc = true && that.isSetZdmc();
    if (this_present_zdmc || that_present_zdmc) {
      if (!(this_present_zdmc && that_present_zdmc))
        return false;
      if (!this.zdmc.equals(that.zdmc))
        return false;
    }

    boolean this_present_zdbm = true && this.isSetZdbm();
    boolean that_present_zdbm = true && that.isSetZdbm();
    if (this_present_zdbm || that_present_zdbm) {
      if (!(this_present_zdbm && that_present_zdbm))
        return false;
      if (!this.zdbm.equals(that.zdbm))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetActionCMDType()) ? 131071 : 524287);
    if (isSetActionCMDType())
      hashCode = hashCode * 8191 + actionCMDType.getValue();

    hashCode = hashCode * 8191 + xlbh;

    hashCode = hashCode * 8191 + (int) (fx);

    hashCode = hashCode * 8191 + (int) (zdxh);

    hashCode = hashCode * 8191 + jd;

    hashCode = hashCode * 8191 + wd;

    hashCode = hashCode * 8191 + jszjl;

    hashCode = hashCode * 8191 + ((isSetZdmc()) ? 131071 : 524287);
    if (isSetZdmc())
      hashCode = hashCode * 8191 + zdmc.hashCode();

    hashCode = hashCode * 8191 + ((isSetZdbm()) ? 131071 : 524287);
    if (isSetZdbm())
      hashCode = hashCode * 8191 + zdbm.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(STATIONBASEDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetActionCMDType()).compareTo(other.isSetActionCMDType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionCMDType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionCMDType, other.actionCMDType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetXlbh()).compareTo(other.isSetXlbh());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXlbh()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xlbh, other.xlbh);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFx()).compareTo(other.isSetFx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fx, other.fx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetZdxh()).compareTo(other.isSetZdxh());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZdxh()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zdxh, other.zdxh);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetJd()).compareTo(other.isSetJd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jd, other.jd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWd()).compareTo(other.isSetWd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wd, other.wd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetJszjl()).compareTo(other.isSetJszjl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJszjl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jszjl, other.jszjl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetZdmc()).compareTo(other.isSetZdmc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZdmc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zdmc, other.zdmc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetZdbm()).compareTo(other.isSetZdbm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZdbm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zdbm, other.zdbm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("STATIONBASEDTO(");
    boolean first = true;

    sb.append("actionCMDType:");
    if (this.actionCMDType == null) {
      sb.append("null");
    } else {
      sb.append(this.actionCMDType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("xlbh:");
    sb.append(this.xlbh);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fx:");
    sb.append(this.fx);
    first = false;
    if (!first) sb.append(", ");
    sb.append("zdxh:");
    sb.append(this.zdxh);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jd:");
    sb.append(this.jd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("wd:");
    sb.append(this.wd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jszjl:");
    sb.append(this.jszjl);
    first = false;
    if (!first) sb.append(", ");
    sb.append("zdmc:");
    if (this.zdmc == null) {
      sb.append("null");
    } else {
      sb.append(this.zdmc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("zdbm:");
    if (this.zdbm == null) {
      sb.append("null");
    } else {
      sb.append(this.zdbm);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class STATIONBASEDTOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public STATIONBASEDTOStandardScheme getScheme() {
      return new STATIONBASEDTOStandardScheme();
    }
  }

  private static class STATIONBASEDTOStandardScheme extends org.apache.thrift.scheme.StandardScheme<STATIONBASEDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, STATIONBASEDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACTION_CMDTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.actionCMDType = ActionCMDType.findByValue(iprot.readI32());
              struct.setActionCMDTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // XLBH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.xlbh = iprot.readI32();
              struct.setXlbhIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FX
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.fx = iprot.readByte();
              struct.setFxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ZDXH
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.zdxh = iprot.readByte();
              struct.setZdxhIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // JD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.jd = iprot.readI32();
              struct.setJdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // WD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wd = iprot.readI32();
              struct.setWdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // JSZJL
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.jszjl = iprot.readI16();
              struct.setJszjlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ZDMC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.zdmc = iprot.readString();
              struct.setZdmcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ZDBM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.zdbm = iprot.readString();
              struct.setZdbmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, STATIONBASEDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.actionCMDType != null) {
        oprot.writeFieldBegin(ACTION_CMDTYPE_FIELD_DESC);
        oprot.writeI32(struct.actionCMDType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(XLBH_FIELD_DESC);
      oprot.writeI32(struct.xlbh);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FX_FIELD_DESC);
      oprot.writeByte(struct.fx);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ZDXH_FIELD_DESC);
      oprot.writeByte(struct.zdxh);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JD_FIELD_DESC);
      oprot.writeI32(struct.jd);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WD_FIELD_DESC);
      oprot.writeI32(struct.wd);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JSZJL_FIELD_DESC);
      oprot.writeI16(struct.jszjl);
      oprot.writeFieldEnd();
      if (struct.zdmc != null) {
        oprot.writeFieldBegin(ZDMC_FIELD_DESC);
        oprot.writeString(struct.zdmc);
        oprot.writeFieldEnd();
      }
      if (struct.zdbm != null) {
        oprot.writeFieldBegin(ZDBM_FIELD_DESC);
        oprot.writeString(struct.zdbm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class STATIONBASEDTOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public STATIONBASEDTOTupleScheme getScheme() {
      return new STATIONBASEDTOTupleScheme();
    }
  }

  private static class STATIONBASEDTOTupleScheme extends org.apache.thrift.scheme.TupleScheme<STATIONBASEDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, STATIONBASEDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetActionCMDType()) {
        optionals.set(0);
      }
      if (struct.isSetXlbh()) {
        optionals.set(1);
      }
      if (struct.isSetFx()) {
        optionals.set(2);
      }
      if (struct.isSetZdxh()) {
        optionals.set(3);
      }
      if (struct.isSetJd()) {
        optionals.set(4);
      }
      if (struct.isSetWd()) {
        optionals.set(5);
      }
      if (struct.isSetJszjl()) {
        optionals.set(6);
      }
      if (struct.isSetZdmc()) {
        optionals.set(7);
      }
      if (struct.isSetZdbm()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetActionCMDType()) {
        oprot.writeI32(struct.actionCMDType.getValue());
      }
      if (struct.isSetXlbh()) {
        oprot.writeI32(struct.xlbh);
      }
      if (struct.isSetFx()) {
        oprot.writeByte(struct.fx);
      }
      if (struct.isSetZdxh()) {
        oprot.writeByte(struct.zdxh);
      }
      if (struct.isSetJd()) {
        oprot.writeI32(struct.jd);
      }
      if (struct.isSetWd()) {
        oprot.writeI32(struct.wd);
      }
      if (struct.isSetJszjl()) {
        oprot.writeI16(struct.jszjl);
      }
      if (struct.isSetZdmc()) {
        oprot.writeString(struct.zdmc);
      }
      if (struct.isSetZdbm()) {
        oprot.writeString(struct.zdbm);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, STATIONBASEDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.actionCMDType = ActionCMDType.findByValue(iprot.readI32());
        struct.setActionCMDTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.xlbh = iprot.readI32();
        struct.setXlbhIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fx = iprot.readByte();
        struct.setFxIsSet(true);
      }
      if (incoming.get(3)) {
        struct.zdxh = iprot.readByte();
        struct.setZdxhIsSet(true);
      }
      if (incoming.get(4)) {
        struct.jd = iprot.readI32();
        struct.setJdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.wd = iprot.readI32();
        struct.setWdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.jszjl = iprot.readI16();
        struct.setJszjlIsSet(true);
      }
      if (incoming.get(7)) {
        struct.zdmc = iprot.readString();
        struct.setZdmcIsSet(true);
      }
      if (incoming.get(8)) {
        struct.zdbm = iprot.readString();
        struct.setZdbmIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

