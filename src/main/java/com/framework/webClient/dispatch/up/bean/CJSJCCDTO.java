/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.framework.webClient.dispatch.up.bean;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-04-24")
public class CJSJCCDTO implements org.apache.thrift.TBase<CJSJCCDTO, CJSJCCDTO._Fields>, java.io.Serializable, Cloneable, Comparable<CJSJCCDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CJSJCCDTO");

  private static final org.apache.thrift.protocol.TField ACTION_CMDTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("actionCMDType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DWSJ_FIELD_DESC = new org.apache.thrift.protocol.TField("dwsj", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField DZSJ_FIELD_DESC = new org.apache.thrift.protocol.TField("dzsj", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField LZSJ_FIELD_DESC = new org.apache.thrift.protocol.TField("lzsj", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField SCDXSJ_FIELD_DESC = new org.apache.thrift.protocol.TField("scdxsj", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField SKSJ_FIELD_DESC = new org.apache.thrift.protocol.TField("sksj", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField GJSJ_FIELD_DESC = new org.apache.thrift.protocol.TField("gjsj", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField LJSJ_FIELD_DESC = new org.apache.thrift.protocol.TField("ljsj", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField DLSJ_FIELD_DESC = new org.apache.thrift.protocol.TField("dlsj", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField KLSJ_FIELD_DESC = new org.apache.thrift.protocol.TField("klsj", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField SJSJ_FIELD_DESC = new org.apache.thrift.protocol.TField("sjsj", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField YDSJ_FIELD_DESC = new org.apache.thrift.protocol.TField("ydsj", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField LINEBASESJ_FIELD_DESC = new org.apache.thrift.protocol.TField("linebasesj", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField STATIONBASESJ_FIELD_DESC = new org.apache.thrift.protocol.TField("stationbasesj", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField ROUTBASESJ_FIELD_DESC = new org.apache.thrift.protocol.TField("routbasesj", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField YJDSJ_FIELD_DESC = new org.apache.thrift.protocol.TField("yjdsj", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField CANSJ_FIELD_DESC = new org.apache.thrift.protocol.TField("cansj", org.apache.thrift.protocol.TType.STRUCT, (short)17);
  private static final org.apache.thrift.protocol.TField KLNEWSJ_FIELD_DESC = new org.apache.thrift.protocol.TField("klnewsj", org.apache.thrift.protocol.TType.STRUCT, (short)18);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CJSJCCDTOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CJSJCCDTOTupleSchemeFactory();

  /**
   * 
   * @see ActionCMDType
   */
  public ActionCMDType actionCMDType; // required
  public DWSJDTO dwsj; // optional
  public DZSJDTO dzsj; // optional
  public LZSJDTO lzsj; // optional
  public SCDXSJDTO scdxsj; // optional
  public SKSJDTO sksj; // optional
  public GJSJDTO gjsj; // optional
  public CLLJSJDTO ljsj; // optional
  public CLDLSJDTO dlsj; // optional
  public KLSJDTO klsj; // optional
  public SJJGSJDTO sjsj; // optional
  public SJYDSJDTO ydsj; // optional
  public LINEBASEDTO linebasesj; // optional
  public STATIONBASEDTO stationbasesj; // optional
  public ROUTBASEDTO routbasesj; // optional
  public YJDSJDTO yjdsj; // optional
  public CANSJDTO cansj; // optional
  public KLSJNEWDTO klnewsj; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see ActionCMDType
     */
    ACTION_CMDTYPE((short)1, "actionCMDType"),
    DWSJ((short)2, "dwsj"),
    DZSJ((short)3, "dzsj"),
    LZSJ((short)4, "lzsj"),
    SCDXSJ((short)5, "scdxsj"),
    SKSJ((short)6, "sksj"),
    GJSJ((short)7, "gjsj"),
    LJSJ((short)8, "ljsj"),
    DLSJ((short)9, "dlsj"),
    KLSJ((short)10, "klsj"),
    SJSJ((short)11, "sjsj"),
    YDSJ((short)12, "ydsj"),
    LINEBASESJ((short)13, "linebasesj"),
    STATIONBASESJ((short)14, "stationbasesj"),
    ROUTBASESJ((short)15, "routbasesj"),
    YJDSJ((short)16, "yjdsj"),
    CANSJ((short)17, "cansj"),
    KLNEWSJ((short)18, "klnewsj");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACTION_CMDTYPE
          return ACTION_CMDTYPE;
        case 2: // DWSJ
          return DWSJ;
        case 3: // DZSJ
          return DZSJ;
        case 4: // LZSJ
          return LZSJ;
        case 5: // SCDXSJ
          return SCDXSJ;
        case 6: // SKSJ
          return SKSJ;
        case 7: // GJSJ
          return GJSJ;
        case 8: // LJSJ
          return LJSJ;
        case 9: // DLSJ
          return DLSJ;
        case 10: // KLSJ
          return KLSJ;
        case 11: // SJSJ
          return SJSJ;
        case 12: // YDSJ
          return YDSJ;
        case 13: // LINEBASESJ
          return LINEBASESJ;
        case 14: // STATIONBASESJ
          return STATIONBASESJ;
        case 15: // ROUTBASESJ
          return ROUTBASESJ;
        case 16: // YJDSJ
          return YJDSJ;
        case 17: // CANSJ
          return CANSJ;
        case 18: // KLNEWSJ
          return KLNEWSJ;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.DWSJ,_Fields.DZSJ,_Fields.LZSJ,_Fields.SCDXSJ,_Fields.SKSJ,_Fields.GJSJ,_Fields.LJSJ,_Fields.DLSJ,_Fields.KLSJ,_Fields.SJSJ,_Fields.YDSJ,_Fields.LINEBASESJ,_Fields.STATIONBASESJ,_Fields.ROUTBASESJ,_Fields.YJDSJ,_Fields.CANSJ,_Fields.KLNEWSJ};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACTION_CMDTYPE, new org.apache.thrift.meta_data.FieldMetaData("actionCMDType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ActionCMDType.class)));
    tmpMap.put(_Fields.DWSJ, new org.apache.thrift.meta_data.FieldMetaData("dwsj", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DWSJDTO.class)));
    tmpMap.put(_Fields.DZSJ, new org.apache.thrift.meta_data.FieldMetaData("dzsj", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DZSJDTO.class)));
    tmpMap.put(_Fields.LZSJ, new org.apache.thrift.meta_data.FieldMetaData("lzsj", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LZSJDTO.class)));
    tmpMap.put(_Fields.SCDXSJ, new org.apache.thrift.meta_data.FieldMetaData("scdxsj", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SCDXSJDTO.class)));
    tmpMap.put(_Fields.SKSJ, new org.apache.thrift.meta_data.FieldMetaData("sksj", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SKSJDTO.class)));
    tmpMap.put(_Fields.GJSJ, new org.apache.thrift.meta_data.FieldMetaData("gjsj", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GJSJDTO.class)));
    tmpMap.put(_Fields.LJSJ, new org.apache.thrift.meta_data.FieldMetaData("ljsj", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CLLJSJDTO.class)));
    tmpMap.put(_Fields.DLSJ, new org.apache.thrift.meta_data.FieldMetaData("dlsj", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CLDLSJDTO.class)));
    tmpMap.put(_Fields.KLSJ, new org.apache.thrift.meta_data.FieldMetaData("klsj", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KLSJDTO.class)));
    tmpMap.put(_Fields.SJSJ, new org.apache.thrift.meta_data.FieldMetaData("sjsj", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SJJGSJDTO.class)));
    tmpMap.put(_Fields.YDSJ, new org.apache.thrift.meta_data.FieldMetaData("ydsj", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SJYDSJDTO.class)));
    tmpMap.put(_Fields.LINEBASESJ, new org.apache.thrift.meta_data.FieldMetaData("linebasesj", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LINEBASEDTO.class)));
    tmpMap.put(_Fields.STATIONBASESJ, new org.apache.thrift.meta_data.FieldMetaData("stationbasesj", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, STATIONBASEDTO.class)));
    tmpMap.put(_Fields.ROUTBASESJ, new org.apache.thrift.meta_data.FieldMetaData("routbasesj", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ROUTBASEDTO.class)));
    tmpMap.put(_Fields.YJDSJ, new org.apache.thrift.meta_data.FieldMetaData("yjdsj", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, YJDSJDTO.class)));
    tmpMap.put(_Fields.CANSJ, new org.apache.thrift.meta_data.FieldMetaData("cansj", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CANSJDTO.class)));
    tmpMap.put(_Fields.KLNEWSJ, new org.apache.thrift.meta_data.FieldMetaData("klnewsj", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KLSJNEWDTO.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CJSJCCDTO.class, metaDataMap);
  }

  public CJSJCCDTO() {
  }

  public CJSJCCDTO(
    ActionCMDType actionCMDType)
  {
    this();
    this.actionCMDType = actionCMDType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CJSJCCDTO(CJSJCCDTO other) {
    if (other.isSetActionCMDType()) {
      this.actionCMDType = other.actionCMDType;
    }
    if (other.isSetDwsj()) {
      this.dwsj = new DWSJDTO(other.dwsj);
    }
    if (other.isSetDzsj()) {
      this.dzsj = new DZSJDTO(other.dzsj);
    }
    if (other.isSetLzsj()) {
      this.lzsj = new LZSJDTO(other.lzsj);
    }
    if (other.isSetScdxsj()) {
      this.scdxsj = new SCDXSJDTO(other.scdxsj);
    }
    if (other.isSetSksj()) {
      this.sksj = new SKSJDTO(other.sksj);
    }
    if (other.isSetGjsj()) {
      this.gjsj = new GJSJDTO(other.gjsj);
    }
    if (other.isSetLjsj()) {
      this.ljsj = new CLLJSJDTO(other.ljsj);
    }
    if (other.isSetDlsj()) {
      this.dlsj = new CLDLSJDTO(other.dlsj);
    }
    if (other.isSetKlsj()) {
      this.klsj = new KLSJDTO(other.klsj);
    }
    if (other.isSetSjsj()) {
      this.sjsj = new SJJGSJDTO(other.sjsj);
    }
    if (other.isSetYdsj()) {
      this.ydsj = new SJYDSJDTO(other.ydsj);
    }
    if (other.isSetLinebasesj()) {
      this.linebasesj = new LINEBASEDTO(other.linebasesj);
    }
    if (other.isSetStationbasesj()) {
      this.stationbasesj = new STATIONBASEDTO(other.stationbasesj);
    }
    if (other.isSetRoutbasesj()) {
      this.routbasesj = new ROUTBASEDTO(other.routbasesj);
    }
    if (other.isSetYjdsj()) {
      this.yjdsj = new YJDSJDTO(other.yjdsj);
    }
    if (other.isSetCansj()) {
      this.cansj = new CANSJDTO(other.cansj);
    }
    if (other.isSetKlnewsj()) {
      this.klnewsj = new KLSJNEWDTO(other.klnewsj);
    }
  }

  public CJSJCCDTO deepCopy() {
    return new CJSJCCDTO(this);
  }

  @Override
  public void clear() {
    this.actionCMDType = null;
    this.dwsj = null;
    this.dzsj = null;
    this.lzsj = null;
    this.scdxsj = null;
    this.sksj = null;
    this.gjsj = null;
    this.ljsj = null;
    this.dlsj = null;
    this.klsj = null;
    this.sjsj = null;
    this.ydsj = null;
    this.linebasesj = null;
    this.stationbasesj = null;
    this.routbasesj = null;
    this.yjdsj = null;
    this.cansj = null;
    this.klnewsj = null;
  }

  /**
   * 
   * @see ActionCMDType
   */
  public ActionCMDType getActionCMDType() {
    return this.actionCMDType;
  }

  /**
   * 
   * @see ActionCMDType
   */
  public CJSJCCDTO setActionCMDType(ActionCMDType actionCMDType) {
    this.actionCMDType = actionCMDType;
    return this;
  }

  public void unsetActionCMDType() {
    this.actionCMDType = null;
  }

  /** Returns true if field actionCMDType is set (has been assigned a value) and false otherwise */
  public boolean isSetActionCMDType() {
    return this.actionCMDType != null;
  }

  public void setActionCMDTypeIsSet(boolean value) {
    if (!value) {
      this.actionCMDType = null;
    }
  }

  public DWSJDTO getDwsj() {
    return this.dwsj;
  }

  public CJSJCCDTO setDwsj(DWSJDTO dwsj) {
    this.dwsj = dwsj;
    return this;
  }

  public void unsetDwsj() {
    this.dwsj = null;
  }

  /** Returns true if field dwsj is set (has been assigned a value) and false otherwise */
  public boolean isSetDwsj() {
    return this.dwsj != null;
  }

  public void setDwsjIsSet(boolean value) {
    if (!value) {
      this.dwsj = null;
    }
  }

  public DZSJDTO getDzsj() {
    return this.dzsj;
  }

  public CJSJCCDTO setDzsj(DZSJDTO dzsj) {
    this.dzsj = dzsj;
    return this;
  }

  public void unsetDzsj() {
    this.dzsj = null;
  }

  /** Returns true if field dzsj is set (has been assigned a value) and false otherwise */
  public boolean isSetDzsj() {
    return this.dzsj != null;
  }

  public void setDzsjIsSet(boolean value) {
    if (!value) {
      this.dzsj = null;
    }
  }

  public LZSJDTO getLzsj() {
    return this.lzsj;
  }

  public CJSJCCDTO setLzsj(LZSJDTO lzsj) {
    this.lzsj = lzsj;
    return this;
  }

  public void unsetLzsj() {
    this.lzsj = null;
  }

  /** Returns true if field lzsj is set (has been assigned a value) and false otherwise */
  public boolean isSetLzsj() {
    return this.lzsj != null;
  }

  public void setLzsjIsSet(boolean value) {
    if (!value) {
      this.lzsj = null;
    }
  }

  public SCDXSJDTO getScdxsj() {
    return this.scdxsj;
  }

  public CJSJCCDTO setScdxsj(SCDXSJDTO scdxsj) {
    this.scdxsj = scdxsj;
    return this;
  }

  public void unsetScdxsj() {
    this.scdxsj = null;
  }

  /** Returns true if field scdxsj is set (has been assigned a value) and false otherwise */
  public boolean isSetScdxsj() {
    return this.scdxsj != null;
  }

  public void setScdxsjIsSet(boolean value) {
    if (!value) {
      this.scdxsj = null;
    }
  }

  public SKSJDTO getSksj() {
    return this.sksj;
  }

  public CJSJCCDTO setSksj(SKSJDTO sksj) {
    this.sksj = sksj;
    return this;
  }

  public void unsetSksj() {
    this.sksj = null;
  }

  /** Returns true if field sksj is set (has been assigned a value) and false otherwise */
  public boolean isSetSksj() {
    return this.sksj != null;
  }

  public void setSksjIsSet(boolean value) {
    if (!value) {
      this.sksj = null;
    }
  }

  public GJSJDTO getGjsj() {
    return this.gjsj;
  }

  public CJSJCCDTO setGjsj(GJSJDTO gjsj) {
    this.gjsj = gjsj;
    return this;
  }

  public void unsetGjsj() {
    this.gjsj = null;
  }

  /** Returns true if field gjsj is set (has been assigned a value) and false otherwise */
  public boolean isSetGjsj() {
    return this.gjsj != null;
  }

  public void setGjsjIsSet(boolean value) {
    if (!value) {
      this.gjsj = null;
    }
  }

  public CLLJSJDTO getLjsj() {
    return this.ljsj;
  }

  public CJSJCCDTO setLjsj(CLLJSJDTO ljsj) {
    this.ljsj = ljsj;
    return this;
  }

  public void unsetLjsj() {
    this.ljsj = null;
  }

  /** Returns true if field ljsj is set (has been assigned a value) and false otherwise */
  public boolean isSetLjsj() {
    return this.ljsj != null;
  }

  public void setLjsjIsSet(boolean value) {
    if (!value) {
      this.ljsj = null;
    }
  }

  public CLDLSJDTO getDlsj() {
    return this.dlsj;
  }

  public CJSJCCDTO setDlsj(CLDLSJDTO dlsj) {
    this.dlsj = dlsj;
    return this;
  }

  public void unsetDlsj() {
    this.dlsj = null;
  }

  /** Returns true if field dlsj is set (has been assigned a value) and false otherwise */
  public boolean isSetDlsj() {
    return this.dlsj != null;
  }

  public void setDlsjIsSet(boolean value) {
    if (!value) {
      this.dlsj = null;
    }
  }

  public KLSJDTO getKlsj() {
    return this.klsj;
  }

  public CJSJCCDTO setKlsj(KLSJDTO klsj) {
    this.klsj = klsj;
    return this;
  }

  public void unsetKlsj() {
    this.klsj = null;
  }

  /** Returns true if field klsj is set (has been assigned a value) and false otherwise */
  public boolean isSetKlsj() {
    return this.klsj != null;
  }

  public void setKlsjIsSet(boolean value) {
    if (!value) {
      this.klsj = null;
    }
  }

  public SJJGSJDTO getSjsj() {
    return this.sjsj;
  }

  public CJSJCCDTO setSjsj(SJJGSJDTO sjsj) {
    this.sjsj = sjsj;
    return this;
  }

  public void unsetSjsj() {
    this.sjsj = null;
  }

  /** Returns true if field sjsj is set (has been assigned a value) and false otherwise */
  public boolean isSetSjsj() {
    return this.sjsj != null;
  }

  public void setSjsjIsSet(boolean value) {
    if (!value) {
      this.sjsj = null;
    }
  }

  public SJYDSJDTO getYdsj() {
    return this.ydsj;
  }

  public CJSJCCDTO setYdsj(SJYDSJDTO ydsj) {
    this.ydsj = ydsj;
    return this;
  }

  public void unsetYdsj() {
    this.ydsj = null;
  }

  /** Returns true if field ydsj is set (has been assigned a value) and false otherwise */
  public boolean isSetYdsj() {
    return this.ydsj != null;
  }

  public void setYdsjIsSet(boolean value) {
    if (!value) {
      this.ydsj = null;
    }
  }

  public LINEBASEDTO getLinebasesj() {
    return this.linebasesj;
  }

  public CJSJCCDTO setLinebasesj(LINEBASEDTO linebasesj) {
    this.linebasesj = linebasesj;
    return this;
  }

  public void unsetLinebasesj() {
    this.linebasesj = null;
  }

  /** Returns true if field linebasesj is set (has been assigned a value) and false otherwise */
  public boolean isSetLinebasesj() {
    return this.linebasesj != null;
  }

  public void setLinebasesjIsSet(boolean value) {
    if (!value) {
      this.linebasesj = null;
    }
  }

  public STATIONBASEDTO getStationbasesj() {
    return this.stationbasesj;
  }

  public CJSJCCDTO setStationbasesj(STATIONBASEDTO stationbasesj) {
    this.stationbasesj = stationbasesj;
    return this;
  }

  public void unsetStationbasesj() {
    this.stationbasesj = null;
  }

  /** Returns true if field stationbasesj is set (has been assigned a value) and false otherwise */
  public boolean isSetStationbasesj() {
    return this.stationbasesj != null;
  }

  public void setStationbasesjIsSet(boolean value) {
    if (!value) {
      this.stationbasesj = null;
    }
  }

  public ROUTBASEDTO getRoutbasesj() {
    return this.routbasesj;
  }

  public CJSJCCDTO setRoutbasesj(ROUTBASEDTO routbasesj) {
    this.routbasesj = routbasesj;
    return this;
  }

  public void unsetRoutbasesj() {
    this.routbasesj = null;
  }

  /** Returns true if field routbasesj is set (has been assigned a value) and false otherwise */
  public boolean isSetRoutbasesj() {
    return this.routbasesj != null;
  }

  public void setRoutbasesjIsSet(boolean value) {
    if (!value) {
      this.routbasesj = null;
    }
  }

  public YJDSJDTO getYjdsj() {
    return this.yjdsj;
  }

  public CJSJCCDTO setYjdsj(YJDSJDTO yjdsj) {
    this.yjdsj = yjdsj;
    return this;
  }

  public void unsetYjdsj() {
    this.yjdsj = null;
  }

  /** Returns true if field yjdsj is set (has been assigned a value) and false otherwise */
  public boolean isSetYjdsj() {
    return this.yjdsj != null;
  }

  public void setYjdsjIsSet(boolean value) {
    if (!value) {
      this.yjdsj = null;
    }
  }

  public CANSJDTO getCansj() {
    return this.cansj;
  }

  public CJSJCCDTO setCansj(CANSJDTO cansj) {
    this.cansj = cansj;
    return this;
  }

  public void unsetCansj() {
    this.cansj = null;
  }

  /** Returns true if field cansj is set (has been assigned a value) and false otherwise */
  public boolean isSetCansj() {
    return this.cansj != null;
  }

  public void setCansjIsSet(boolean value) {
    if (!value) {
      this.cansj = null;
    }
  }

  public KLSJNEWDTO getKlnewsj() {
    return this.klnewsj;
  }

  public CJSJCCDTO setKlnewsj(KLSJNEWDTO klnewsj) {
    this.klnewsj = klnewsj;
    return this;
  }

  public void unsetKlnewsj() {
    this.klnewsj = null;
  }

  /** Returns true if field klnewsj is set (has been assigned a value) and false otherwise */
  public boolean isSetKlnewsj() {
    return this.klnewsj != null;
  }

  public void setKlnewsjIsSet(boolean value) {
    if (!value) {
      this.klnewsj = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ACTION_CMDTYPE:
      if (value == null) {
        unsetActionCMDType();
      } else {
        setActionCMDType((ActionCMDType)value);
      }
      break;

    case DWSJ:
      if (value == null) {
        unsetDwsj();
      } else {
        setDwsj((DWSJDTO)value);
      }
      break;

    case DZSJ:
      if (value == null) {
        unsetDzsj();
      } else {
        setDzsj((DZSJDTO)value);
      }
      break;

    case LZSJ:
      if (value == null) {
        unsetLzsj();
      } else {
        setLzsj((LZSJDTO)value);
      }
      break;

    case SCDXSJ:
      if (value == null) {
        unsetScdxsj();
      } else {
        setScdxsj((SCDXSJDTO)value);
      }
      break;

    case SKSJ:
      if (value == null) {
        unsetSksj();
      } else {
        setSksj((SKSJDTO)value);
      }
      break;

    case GJSJ:
      if (value == null) {
        unsetGjsj();
      } else {
        setGjsj((GJSJDTO)value);
      }
      break;

    case LJSJ:
      if (value == null) {
        unsetLjsj();
      } else {
        setLjsj((CLLJSJDTO)value);
      }
      break;

    case DLSJ:
      if (value == null) {
        unsetDlsj();
      } else {
        setDlsj((CLDLSJDTO)value);
      }
      break;

    case KLSJ:
      if (value == null) {
        unsetKlsj();
      } else {
        setKlsj((KLSJDTO)value);
      }
      break;

    case SJSJ:
      if (value == null) {
        unsetSjsj();
      } else {
        setSjsj((SJJGSJDTO)value);
      }
      break;

    case YDSJ:
      if (value == null) {
        unsetYdsj();
      } else {
        setYdsj((SJYDSJDTO)value);
      }
      break;

    case LINEBASESJ:
      if (value == null) {
        unsetLinebasesj();
      } else {
        setLinebasesj((LINEBASEDTO)value);
      }
      break;

    case STATIONBASESJ:
      if (value == null) {
        unsetStationbasesj();
      } else {
        setStationbasesj((STATIONBASEDTO)value);
      }
      break;

    case ROUTBASESJ:
      if (value == null) {
        unsetRoutbasesj();
      } else {
        setRoutbasesj((ROUTBASEDTO)value);
      }
      break;

    case YJDSJ:
      if (value == null) {
        unsetYjdsj();
      } else {
        setYjdsj((YJDSJDTO)value);
      }
      break;

    case CANSJ:
      if (value == null) {
        unsetCansj();
      } else {
        setCansj((CANSJDTO)value);
      }
      break;

    case KLNEWSJ:
      if (value == null) {
        unsetKlnewsj();
      } else {
        setKlnewsj((KLSJNEWDTO)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ACTION_CMDTYPE:
      return getActionCMDType();

    case DWSJ:
      return getDwsj();

    case DZSJ:
      return getDzsj();

    case LZSJ:
      return getLzsj();

    case SCDXSJ:
      return getScdxsj();

    case SKSJ:
      return getSksj();

    case GJSJ:
      return getGjsj();

    case LJSJ:
      return getLjsj();

    case DLSJ:
      return getDlsj();

    case KLSJ:
      return getKlsj();

    case SJSJ:
      return getSjsj();

    case YDSJ:
      return getYdsj();

    case LINEBASESJ:
      return getLinebasesj();

    case STATIONBASESJ:
      return getStationbasesj();

    case ROUTBASESJ:
      return getRoutbasesj();

    case YJDSJ:
      return getYjdsj();

    case CANSJ:
      return getCansj();

    case KLNEWSJ:
      return getKlnewsj();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ACTION_CMDTYPE:
      return isSetActionCMDType();
    case DWSJ:
      return isSetDwsj();
    case DZSJ:
      return isSetDzsj();
    case LZSJ:
      return isSetLzsj();
    case SCDXSJ:
      return isSetScdxsj();
    case SKSJ:
      return isSetSksj();
    case GJSJ:
      return isSetGjsj();
    case LJSJ:
      return isSetLjsj();
    case DLSJ:
      return isSetDlsj();
    case KLSJ:
      return isSetKlsj();
    case SJSJ:
      return isSetSjsj();
    case YDSJ:
      return isSetYdsj();
    case LINEBASESJ:
      return isSetLinebasesj();
    case STATIONBASESJ:
      return isSetStationbasesj();
    case ROUTBASESJ:
      return isSetRoutbasesj();
    case YJDSJ:
      return isSetYjdsj();
    case CANSJ:
      return isSetCansj();
    case KLNEWSJ:
      return isSetKlnewsj();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof CJSJCCDTO)
      return this.equals((CJSJCCDTO)that);
    return false;
  }

  public boolean equals(CJSJCCDTO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_actionCMDType = true && this.isSetActionCMDType();
    boolean that_present_actionCMDType = true && that.isSetActionCMDType();
    if (this_present_actionCMDType || that_present_actionCMDType) {
      if (!(this_present_actionCMDType && that_present_actionCMDType))
        return false;
      if (!this.actionCMDType.equals(that.actionCMDType))
        return false;
    }

    boolean this_present_dwsj = true && this.isSetDwsj();
    boolean that_present_dwsj = true && that.isSetDwsj();
    if (this_present_dwsj || that_present_dwsj) {
      if (!(this_present_dwsj && that_present_dwsj))
        return false;
      if (!this.dwsj.equals(that.dwsj))
        return false;
    }

    boolean this_present_dzsj = true && this.isSetDzsj();
    boolean that_present_dzsj = true && that.isSetDzsj();
    if (this_present_dzsj || that_present_dzsj) {
      if (!(this_present_dzsj && that_present_dzsj))
        return false;
      if (!this.dzsj.equals(that.dzsj))
        return false;
    }

    boolean this_present_lzsj = true && this.isSetLzsj();
    boolean that_present_lzsj = true && that.isSetLzsj();
    if (this_present_lzsj || that_present_lzsj) {
      if (!(this_present_lzsj && that_present_lzsj))
        return false;
      if (!this.lzsj.equals(that.lzsj))
        return false;
    }

    boolean this_present_scdxsj = true && this.isSetScdxsj();
    boolean that_present_scdxsj = true && that.isSetScdxsj();
    if (this_present_scdxsj || that_present_scdxsj) {
      if (!(this_present_scdxsj && that_present_scdxsj))
        return false;
      if (!this.scdxsj.equals(that.scdxsj))
        return false;
    }

    boolean this_present_sksj = true && this.isSetSksj();
    boolean that_present_sksj = true && that.isSetSksj();
    if (this_present_sksj || that_present_sksj) {
      if (!(this_present_sksj && that_present_sksj))
        return false;
      if (!this.sksj.equals(that.sksj))
        return false;
    }

    boolean this_present_gjsj = true && this.isSetGjsj();
    boolean that_present_gjsj = true && that.isSetGjsj();
    if (this_present_gjsj || that_present_gjsj) {
      if (!(this_present_gjsj && that_present_gjsj))
        return false;
      if (!this.gjsj.equals(that.gjsj))
        return false;
    }

    boolean this_present_ljsj = true && this.isSetLjsj();
    boolean that_present_ljsj = true && that.isSetLjsj();
    if (this_present_ljsj || that_present_ljsj) {
      if (!(this_present_ljsj && that_present_ljsj))
        return false;
      if (!this.ljsj.equals(that.ljsj))
        return false;
    }

    boolean this_present_dlsj = true && this.isSetDlsj();
    boolean that_present_dlsj = true && that.isSetDlsj();
    if (this_present_dlsj || that_present_dlsj) {
      if (!(this_present_dlsj && that_present_dlsj))
        return false;
      if (!this.dlsj.equals(that.dlsj))
        return false;
    }

    boolean this_present_klsj = true && this.isSetKlsj();
    boolean that_present_klsj = true && that.isSetKlsj();
    if (this_present_klsj || that_present_klsj) {
      if (!(this_present_klsj && that_present_klsj))
        return false;
      if (!this.klsj.equals(that.klsj))
        return false;
    }

    boolean this_present_sjsj = true && this.isSetSjsj();
    boolean that_present_sjsj = true && that.isSetSjsj();
    if (this_present_sjsj || that_present_sjsj) {
      if (!(this_present_sjsj && that_present_sjsj))
        return false;
      if (!this.sjsj.equals(that.sjsj))
        return false;
    }

    boolean this_present_ydsj = true && this.isSetYdsj();
    boolean that_present_ydsj = true && that.isSetYdsj();
    if (this_present_ydsj || that_present_ydsj) {
      if (!(this_present_ydsj && that_present_ydsj))
        return false;
      if (!this.ydsj.equals(that.ydsj))
        return false;
    }

    boolean this_present_linebasesj = true && this.isSetLinebasesj();
    boolean that_present_linebasesj = true && that.isSetLinebasesj();
    if (this_present_linebasesj || that_present_linebasesj) {
      if (!(this_present_linebasesj && that_present_linebasesj))
        return false;
      if (!this.linebasesj.equals(that.linebasesj))
        return false;
    }

    boolean this_present_stationbasesj = true && this.isSetStationbasesj();
    boolean that_present_stationbasesj = true && that.isSetStationbasesj();
    if (this_present_stationbasesj || that_present_stationbasesj) {
      if (!(this_present_stationbasesj && that_present_stationbasesj))
        return false;
      if (!this.stationbasesj.equals(that.stationbasesj))
        return false;
    }

    boolean this_present_routbasesj = true && this.isSetRoutbasesj();
    boolean that_present_routbasesj = true && that.isSetRoutbasesj();
    if (this_present_routbasesj || that_present_routbasesj) {
      if (!(this_present_routbasesj && that_present_routbasesj))
        return false;
      if (!this.routbasesj.equals(that.routbasesj))
        return false;
    }

    boolean this_present_yjdsj = true && this.isSetYjdsj();
    boolean that_present_yjdsj = true && that.isSetYjdsj();
    if (this_present_yjdsj || that_present_yjdsj) {
      if (!(this_present_yjdsj && that_present_yjdsj))
        return false;
      if (!this.yjdsj.equals(that.yjdsj))
        return false;
    }

    boolean this_present_cansj = true && this.isSetCansj();
    boolean that_present_cansj = true && that.isSetCansj();
    if (this_present_cansj || that_present_cansj) {
      if (!(this_present_cansj && that_present_cansj))
        return false;
      if (!this.cansj.equals(that.cansj))
        return false;
    }

    boolean this_present_klnewsj = true && this.isSetKlnewsj();
    boolean that_present_klnewsj = true && that.isSetKlnewsj();
    if (this_present_klnewsj || that_present_klnewsj) {
      if (!(this_present_klnewsj && that_present_klnewsj))
        return false;
      if (!this.klnewsj.equals(that.klnewsj))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetActionCMDType()) ? 131071 : 524287);
    if (isSetActionCMDType())
      hashCode = hashCode * 8191 + actionCMDType.getValue();

    hashCode = hashCode * 8191 + ((isSetDwsj()) ? 131071 : 524287);
    if (isSetDwsj())
      hashCode = hashCode * 8191 + dwsj.hashCode();

    hashCode = hashCode * 8191 + ((isSetDzsj()) ? 131071 : 524287);
    if (isSetDzsj())
      hashCode = hashCode * 8191 + dzsj.hashCode();

    hashCode = hashCode * 8191 + ((isSetLzsj()) ? 131071 : 524287);
    if (isSetLzsj())
      hashCode = hashCode * 8191 + lzsj.hashCode();

    hashCode = hashCode * 8191 + ((isSetScdxsj()) ? 131071 : 524287);
    if (isSetScdxsj())
      hashCode = hashCode * 8191 + scdxsj.hashCode();

    hashCode = hashCode * 8191 + ((isSetSksj()) ? 131071 : 524287);
    if (isSetSksj())
      hashCode = hashCode * 8191 + sksj.hashCode();

    hashCode = hashCode * 8191 + ((isSetGjsj()) ? 131071 : 524287);
    if (isSetGjsj())
      hashCode = hashCode * 8191 + gjsj.hashCode();

    hashCode = hashCode * 8191 + ((isSetLjsj()) ? 131071 : 524287);
    if (isSetLjsj())
      hashCode = hashCode * 8191 + ljsj.hashCode();

    hashCode = hashCode * 8191 + ((isSetDlsj()) ? 131071 : 524287);
    if (isSetDlsj())
      hashCode = hashCode * 8191 + dlsj.hashCode();

    hashCode = hashCode * 8191 + ((isSetKlsj()) ? 131071 : 524287);
    if (isSetKlsj())
      hashCode = hashCode * 8191 + klsj.hashCode();

    hashCode = hashCode * 8191 + ((isSetSjsj()) ? 131071 : 524287);
    if (isSetSjsj())
      hashCode = hashCode * 8191 + sjsj.hashCode();

    hashCode = hashCode * 8191 + ((isSetYdsj()) ? 131071 : 524287);
    if (isSetYdsj())
      hashCode = hashCode * 8191 + ydsj.hashCode();

    hashCode = hashCode * 8191 + ((isSetLinebasesj()) ? 131071 : 524287);
    if (isSetLinebasesj())
      hashCode = hashCode * 8191 + linebasesj.hashCode();

    hashCode = hashCode * 8191 + ((isSetStationbasesj()) ? 131071 : 524287);
    if (isSetStationbasesj())
      hashCode = hashCode * 8191 + stationbasesj.hashCode();

    hashCode = hashCode * 8191 + ((isSetRoutbasesj()) ? 131071 : 524287);
    if (isSetRoutbasesj())
      hashCode = hashCode * 8191 + routbasesj.hashCode();

    hashCode = hashCode * 8191 + ((isSetYjdsj()) ? 131071 : 524287);
    if (isSetYjdsj())
      hashCode = hashCode * 8191 + yjdsj.hashCode();

    hashCode = hashCode * 8191 + ((isSetCansj()) ? 131071 : 524287);
    if (isSetCansj())
      hashCode = hashCode * 8191 + cansj.hashCode();

    hashCode = hashCode * 8191 + ((isSetKlnewsj()) ? 131071 : 524287);
    if (isSetKlnewsj())
      hashCode = hashCode * 8191 + klnewsj.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(CJSJCCDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetActionCMDType()).compareTo(other.isSetActionCMDType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionCMDType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionCMDType, other.actionCMDType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDwsj()).compareTo(other.isSetDwsj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDwsj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dwsj, other.dwsj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDzsj()).compareTo(other.isSetDzsj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDzsj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dzsj, other.dzsj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLzsj()).compareTo(other.isSetLzsj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLzsj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lzsj, other.lzsj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetScdxsj()).compareTo(other.isSetScdxsj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScdxsj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scdxsj, other.scdxsj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSksj()).compareTo(other.isSetSksj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSksj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sksj, other.sksj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGjsj()).compareTo(other.isSetGjsj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGjsj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gjsj, other.gjsj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLjsj()).compareTo(other.isSetLjsj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLjsj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ljsj, other.ljsj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDlsj()).compareTo(other.isSetDlsj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDlsj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dlsj, other.dlsj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKlsj()).compareTo(other.isSetKlsj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKlsj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.klsj, other.klsj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSjsj()).compareTo(other.isSetSjsj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSjsj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sjsj, other.sjsj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetYdsj()).compareTo(other.isSetYdsj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYdsj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ydsj, other.ydsj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLinebasesj()).compareTo(other.isSetLinebasesj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinebasesj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linebasesj, other.linebasesj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStationbasesj()).compareTo(other.isSetStationbasesj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStationbasesj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stationbasesj, other.stationbasesj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRoutbasesj()).compareTo(other.isSetRoutbasesj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoutbasesj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.routbasesj, other.routbasesj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetYjdsj()).compareTo(other.isSetYjdsj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYjdsj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yjdsj, other.yjdsj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCansj()).compareTo(other.isSetCansj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCansj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cansj, other.cansj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKlnewsj()).compareTo(other.isSetKlnewsj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKlnewsj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.klnewsj, other.klnewsj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("CJSJCCDTO(");
    boolean first = true;

    sb.append("actionCMDType:");
    if (this.actionCMDType == null) {
      sb.append("null");
    } else {
      sb.append(this.actionCMDType);
    }
    first = false;
    if (isSetDwsj()) {
      if (!first) sb.append(", ");
      sb.append("dwsj:");
      if (this.dwsj == null) {
        sb.append("null");
      } else {
        sb.append(this.dwsj);
      }
      first = false;
    }
    if (isSetDzsj()) {
      if (!first) sb.append(", ");
      sb.append("dzsj:");
      if (this.dzsj == null) {
        sb.append("null");
      } else {
        sb.append(this.dzsj);
      }
      first = false;
    }
    if (isSetLzsj()) {
      if (!first) sb.append(", ");
      sb.append("lzsj:");
      if (this.lzsj == null) {
        sb.append("null");
      } else {
        sb.append(this.lzsj);
      }
      first = false;
    }
    if (isSetScdxsj()) {
      if (!first) sb.append(", ");
      sb.append("scdxsj:");
      if (this.scdxsj == null) {
        sb.append("null");
      } else {
        sb.append(this.scdxsj);
      }
      first = false;
    }
    if (isSetSksj()) {
      if (!first) sb.append(", ");
      sb.append("sksj:");
      if (this.sksj == null) {
        sb.append("null");
      } else {
        sb.append(this.sksj);
      }
      first = false;
    }
    if (isSetGjsj()) {
      if (!first) sb.append(", ");
      sb.append("gjsj:");
      if (this.gjsj == null) {
        sb.append("null");
      } else {
        sb.append(this.gjsj);
      }
      first = false;
    }
    if (isSetLjsj()) {
      if (!first) sb.append(", ");
      sb.append("ljsj:");
      if (this.ljsj == null) {
        sb.append("null");
      } else {
        sb.append(this.ljsj);
      }
      first = false;
    }
    if (isSetDlsj()) {
      if (!first) sb.append(", ");
      sb.append("dlsj:");
      if (this.dlsj == null) {
        sb.append("null");
      } else {
        sb.append(this.dlsj);
      }
      first = false;
    }
    if (isSetKlsj()) {
      if (!first) sb.append(", ");
      sb.append("klsj:");
      if (this.klsj == null) {
        sb.append("null");
      } else {
        sb.append(this.klsj);
      }
      first = false;
    }
    if (isSetSjsj()) {
      if (!first) sb.append(", ");
      sb.append("sjsj:");
      if (this.sjsj == null) {
        sb.append("null");
      } else {
        sb.append(this.sjsj);
      }
      first = false;
    }
    if (isSetYdsj()) {
      if (!first) sb.append(", ");
      sb.append("ydsj:");
      if (this.ydsj == null) {
        sb.append("null");
      } else {
        sb.append(this.ydsj);
      }
      first = false;
    }
    if (isSetLinebasesj()) {
      if (!first) sb.append(", ");
      sb.append("linebasesj:");
      if (this.linebasesj == null) {
        sb.append("null");
      } else {
        sb.append(this.linebasesj);
      }
      first = false;
    }
    if (isSetStationbasesj()) {
      if (!first) sb.append(", ");
      sb.append("stationbasesj:");
      if (this.stationbasesj == null) {
        sb.append("null");
      } else {
        sb.append(this.stationbasesj);
      }
      first = false;
    }
    if (isSetRoutbasesj()) {
      if (!first) sb.append(", ");
      sb.append("routbasesj:");
      if (this.routbasesj == null) {
        sb.append("null");
      } else {
        sb.append(this.routbasesj);
      }
      first = false;
    }
    if (isSetYjdsj()) {
      if (!first) sb.append(", ");
      sb.append("yjdsj:");
      if (this.yjdsj == null) {
        sb.append("null");
      } else {
        sb.append(this.yjdsj);
      }
      first = false;
    }
    if (isSetCansj()) {
      if (!first) sb.append(", ");
      sb.append("cansj:");
      if (this.cansj == null) {
        sb.append("null");
      } else {
        sb.append(this.cansj);
      }
      first = false;
    }
    if (isSetKlnewsj()) {
      if (!first) sb.append(", ");
      sb.append("klnewsj:");
      if (this.klnewsj == null) {
        sb.append("null");
      } else {
        sb.append(this.klnewsj);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (actionCMDType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'actionCMDType' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (dwsj != null) {
      dwsj.validate();
    }
    if (dzsj != null) {
      dzsj.validate();
    }
    if (lzsj != null) {
      lzsj.validate();
    }
    if (scdxsj != null) {
      scdxsj.validate();
    }
    if (sksj != null) {
      sksj.validate();
    }
    if (gjsj != null) {
      gjsj.validate();
    }
    if (ljsj != null) {
      ljsj.validate();
    }
    if (dlsj != null) {
      dlsj.validate();
    }
    if (klsj != null) {
      klsj.validate();
    }
    if (sjsj != null) {
      sjsj.validate();
    }
    if (ydsj != null) {
      ydsj.validate();
    }
    if (linebasesj != null) {
      linebasesj.validate();
    }
    if (stationbasesj != null) {
      stationbasesj.validate();
    }
    if (routbasesj != null) {
      routbasesj.validate();
    }
    if (yjdsj != null) {
      yjdsj.validate();
    }
    if (cansj != null) {
      cansj.validate();
    }
    if (klnewsj != null) {
      klnewsj.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CJSJCCDTOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CJSJCCDTOStandardScheme getScheme() {
      return new CJSJCCDTOStandardScheme();
    }
  }

  private static class CJSJCCDTOStandardScheme extends org.apache.thrift.scheme.StandardScheme<CJSJCCDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CJSJCCDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACTION_CMDTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.actionCMDType = ActionCMDType.findByValue(iprot.readI32());
              struct.setActionCMDTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DWSJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dwsj = new DWSJDTO();
              struct.dwsj.read(iprot);
              struct.setDwsjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DZSJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dzsj = new DZSJDTO();
              struct.dzsj.read(iprot);
              struct.setDzsjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LZSJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.lzsj = new LZSJDTO();
              struct.lzsj.read(iprot);
              struct.setLzsjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SCDXSJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.scdxsj = new SCDXSJDTO();
              struct.scdxsj.read(iprot);
              struct.setScdxsjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SKSJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sksj = new SKSJDTO();
              struct.sksj.read(iprot);
              struct.setSksjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // GJSJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.gjsj = new GJSJDTO();
              struct.gjsj.read(iprot);
              struct.setGjsjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LJSJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ljsj = new CLLJSJDTO();
              struct.ljsj.read(iprot);
              struct.setLjsjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DLSJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dlsj = new CLDLSJDTO();
              struct.dlsj.read(iprot);
              struct.setDlsjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // KLSJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.klsj = new KLSJDTO();
              struct.klsj.read(iprot);
              struct.setKlsjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SJSJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sjsj = new SJJGSJDTO();
              struct.sjsj.read(iprot);
              struct.setSjsjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // YDSJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ydsj = new SJYDSJDTO();
              struct.ydsj.read(iprot);
              struct.setYdsjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LINEBASESJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.linebasesj = new LINEBASEDTO();
              struct.linebasesj.read(iprot);
              struct.setLinebasesjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // STATIONBASESJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.stationbasesj = new STATIONBASEDTO();
              struct.stationbasesj.read(iprot);
              struct.setStationbasesjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ROUTBASESJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.routbasesj = new ROUTBASEDTO();
              struct.routbasesj.read(iprot);
              struct.setRoutbasesjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // YJDSJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.yjdsj = new YJDSJDTO();
              struct.yjdsj.read(iprot);
              struct.setYjdsjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CANSJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cansj = new CANSJDTO();
              struct.cansj.read(iprot);
              struct.setCansjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // KLNEWSJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.klnewsj = new KLSJNEWDTO();
              struct.klnewsj.read(iprot);
              struct.setKlnewsjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CJSJCCDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.actionCMDType != null) {
        oprot.writeFieldBegin(ACTION_CMDTYPE_FIELD_DESC);
        oprot.writeI32(struct.actionCMDType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.dwsj != null) {
        if (struct.isSetDwsj()) {
          oprot.writeFieldBegin(DWSJ_FIELD_DESC);
          struct.dwsj.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dzsj != null) {
        if (struct.isSetDzsj()) {
          oprot.writeFieldBegin(DZSJ_FIELD_DESC);
          struct.dzsj.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lzsj != null) {
        if (struct.isSetLzsj()) {
          oprot.writeFieldBegin(LZSJ_FIELD_DESC);
          struct.lzsj.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.scdxsj != null) {
        if (struct.isSetScdxsj()) {
          oprot.writeFieldBegin(SCDXSJ_FIELD_DESC);
          struct.scdxsj.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sksj != null) {
        if (struct.isSetSksj()) {
          oprot.writeFieldBegin(SKSJ_FIELD_DESC);
          struct.sksj.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.gjsj != null) {
        if (struct.isSetGjsj()) {
          oprot.writeFieldBegin(GJSJ_FIELD_DESC);
          struct.gjsj.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ljsj != null) {
        if (struct.isSetLjsj()) {
          oprot.writeFieldBegin(LJSJ_FIELD_DESC);
          struct.ljsj.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dlsj != null) {
        if (struct.isSetDlsj()) {
          oprot.writeFieldBegin(DLSJ_FIELD_DESC);
          struct.dlsj.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.klsj != null) {
        if (struct.isSetKlsj()) {
          oprot.writeFieldBegin(KLSJ_FIELD_DESC);
          struct.klsj.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sjsj != null) {
        if (struct.isSetSjsj()) {
          oprot.writeFieldBegin(SJSJ_FIELD_DESC);
          struct.sjsj.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ydsj != null) {
        if (struct.isSetYdsj()) {
          oprot.writeFieldBegin(YDSJ_FIELD_DESC);
          struct.ydsj.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.linebasesj != null) {
        if (struct.isSetLinebasesj()) {
          oprot.writeFieldBegin(LINEBASESJ_FIELD_DESC);
          struct.linebasesj.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.stationbasesj != null) {
        if (struct.isSetStationbasesj()) {
          oprot.writeFieldBegin(STATIONBASESJ_FIELD_DESC);
          struct.stationbasesj.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.routbasesj != null) {
        if (struct.isSetRoutbasesj()) {
          oprot.writeFieldBegin(ROUTBASESJ_FIELD_DESC);
          struct.routbasesj.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.yjdsj != null) {
        if (struct.isSetYjdsj()) {
          oprot.writeFieldBegin(YJDSJ_FIELD_DESC);
          struct.yjdsj.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cansj != null) {
        if (struct.isSetCansj()) {
          oprot.writeFieldBegin(CANSJ_FIELD_DESC);
          struct.cansj.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.klnewsj != null) {
        if (struct.isSetKlnewsj()) {
          oprot.writeFieldBegin(KLNEWSJ_FIELD_DESC);
          struct.klnewsj.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CJSJCCDTOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CJSJCCDTOTupleScheme getScheme() {
      return new CJSJCCDTOTupleScheme();
    }
  }

  private static class CJSJCCDTOTupleScheme extends org.apache.thrift.scheme.TupleScheme<CJSJCCDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CJSJCCDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.actionCMDType.getValue());
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDwsj()) {
        optionals.set(0);
      }
      if (struct.isSetDzsj()) {
        optionals.set(1);
      }
      if (struct.isSetLzsj()) {
        optionals.set(2);
      }
      if (struct.isSetScdxsj()) {
        optionals.set(3);
      }
      if (struct.isSetSksj()) {
        optionals.set(4);
      }
      if (struct.isSetGjsj()) {
        optionals.set(5);
      }
      if (struct.isSetLjsj()) {
        optionals.set(6);
      }
      if (struct.isSetDlsj()) {
        optionals.set(7);
      }
      if (struct.isSetKlsj()) {
        optionals.set(8);
      }
      if (struct.isSetSjsj()) {
        optionals.set(9);
      }
      if (struct.isSetYdsj()) {
        optionals.set(10);
      }
      if (struct.isSetLinebasesj()) {
        optionals.set(11);
      }
      if (struct.isSetStationbasesj()) {
        optionals.set(12);
      }
      if (struct.isSetRoutbasesj()) {
        optionals.set(13);
      }
      if (struct.isSetYjdsj()) {
        optionals.set(14);
      }
      if (struct.isSetCansj()) {
        optionals.set(15);
      }
      if (struct.isSetKlnewsj()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetDwsj()) {
        struct.dwsj.write(oprot);
      }
      if (struct.isSetDzsj()) {
        struct.dzsj.write(oprot);
      }
      if (struct.isSetLzsj()) {
        struct.lzsj.write(oprot);
      }
      if (struct.isSetScdxsj()) {
        struct.scdxsj.write(oprot);
      }
      if (struct.isSetSksj()) {
        struct.sksj.write(oprot);
      }
      if (struct.isSetGjsj()) {
        struct.gjsj.write(oprot);
      }
      if (struct.isSetLjsj()) {
        struct.ljsj.write(oprot);
      }
      if (struct.isSetDlsj()) {
        struct.dlsj.write(oprot);
      }
      if (struct.isSetKlsj()) {
        struct.klsj.write(oprot);
      }
      if (struct.isSetSjsj()) {
        struct.sjsj.write(oprot);
      }
      if (struct.isSetYdsj()) {
        struct.ydsj.write(oprot);
      }
      if (struct.isSetLinebasesj()) {
        struct.linebasesj.write(oprot);
      }
      if (struct.isSetStationbasesj()) {
        struct.stationbasesj.write(oprot);
      }
      if (struct.isSetRoutbasesj()) {
        struct.routbasesj.write(oprot);
      }
      if (struct.isSetYjdsj()) {
        struct.yjdsj.write(oprot);
      }
      if (struct.isSetCansj()) {
        struct.cansj.write(oprot);
      }
      if (struct.isSetKlnewsj()) {
        struct.klnewsj.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CJSJCCDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.actionCMDType = ActionCMDType.findByValue(iprot.readI32());
      struct.setActionCMDTypeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.dwsj = new DWSJDTO();
        struct.dwsj.read(iprot);
        struct.setDwsjIsSet(true);
      }
      if (incoming.get(1)) {
        struct.dzsj = new DZSJDTO();
        struct.dzsj.read(iprot);
        struct.setDzsjIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lzsj = new LZSJDTO();
        struct.lzsj.read(iprot);
        struct.setLzsjIsSet(true);
      }
      if (incoming.get(3)) {
        struct.scdxsj = new SCDXSJDTO();
        struct.scdxsj.read(iprot);
        struct.setScdxsjIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sksj = new SKSJDTO();
        struct.sksj.read(iprot);
        struct.setSksjIsSet(true);
      }
      if (incoming.get(5)) {
        struct.gjsj = new GJSJDTO();
        struct.gjsj.read(iprot);
        struct.setGjsjIsSet(true);
      }
      if (incoming.get(6)) {
        struct.ljsj = new CLLJSJDTO();
        struct.ljsj.read(iprot);
        struct.setLjsjIsSet(true);
      }
      if (incoming.get(7)) {
        struct.dlsj = new CLDLSJDTO();
        struct.dlsj.read(iprot);
        struct.setDlsjIsSet(true);
      }
      if (incoming.get(8)) {
        struct.klsj = new KLSJDTO();
        struct.klsj.read(iprot);
        struct.setKlsjIsSet(true);
      }
      if (incoming.get(9)) {
        struct.sjsj = new SJJGSJDTO();
        struct.sjsj.read(iprot);
        struct.setSjsjIsSet(true);
      }
      if (incoming.get(10)) {
        struct.ydsj = new SJYDSJDTO();
        struct.ydsj.read(iprot);
        struct.setYdsjIsSet(true);
      }
      if (incoming.get(11)) {
        struct.linebasesj = new LINEBASEDTO();
        struct.linebasesj.read(iprot);
        struct.setLinebasesjIsSet(true);
      }
      if (incoming.get(12)) {
        struct.stationbasesj = new STATIONBASEDTO();
        struct.stationbasesj.read(iprot);
        struct.setStationbasesjIsSet(true);
      }
      if (incoming.get(13)) {
        struct.routbasesj = new ROUTBASEDTO();
        struct.routbasesj.read(iprot);
        struct.setRoutbasesjIsSet(true);
      }
      if (incoming.get(14)) {
        struct.yjdsj = new YJDSJDTO();
        struct.yjdsj.read(iprot);
        struct.setYjdsjIsSet(true);
      }
      if (incoming.get(15)) {
        struct.cansj = new CANSJDTO();
        struct.cansj.read(iprot);
        struct.setCansjIsSet(true);
      }
      if (incoming.get(16)) {
        struct.klnewsj = new KLSJNEWDTO();
        struct.klnewsj.read(iprot);
        struct.setKlnewsjIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

