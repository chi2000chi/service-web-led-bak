package com.framework.webClient.controller;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.servlet.http.HttpSession;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.bind.annotation.RestController;import org.springframework.web.servlet.ModelAndView;import com.framework.thrift.service.gen.JtlSysUser;import com.framework.webClient.entity.LedCsszb;import com.framework.webClient.service.ILedCsszbManageService;import com.framework.webClient.service.ILedSystemParaManageService;import com.framework.webClient.util.ConstantUtil;import com.framework.webClient.util.WebDataUtil;/** * @author 吉庆 * @date Thu Aug 16 00:00:00 CST 2018 */@RestController@ResponseBodypublic class LedCsszbController {	@Autowired	private ILedCsszbManageService ledcsszbmanageservice;		@Autowired	private ILedSystemParaManageService ledSystemParaManageService;	@GetMapping(value = "/LedCsszb")	public ModelAndView ledContentManage() {		ModelAndView mv = new ModelAndView("ledcssz");		return mv;	}	/**	 * 通过Id查询详细信息	 * 	 * @param mbid 模版id	 * @param mbbh 模版编号	 * @param mbmc 模版名称	 * @return 实体model	 */	@PostMapping(value = "/selectLedCsszbByMbinfo")	public List<LedCsszb> selectLedCsszbByMbinfo(@RequestParam Map<String, Object> paramMap) {		List<LedCsszb> ledcsszb = ledcsszbmanageservice.selectLedCsszbByMbinfo(paramMap);		return ledcsszb;	}	/**	 * 通过Id删除该条数据	 * 	 * @param mbid 模版ID	 * @return 1 成功,其余失败	 */	@PostMapping(value = "/deleteLedCsszbById")	public int deleteLedCsszbById(String mbid) {		int result = 0;		try {			result = ledcsszbmanageservice.deleteLedCsszbById(mbid);		} catch (Exception e) {			result = 0;		}		return result;	}	/**	 * 通过Id修改该条数据	 * 	 * @param model 实体封装类	 * @return 1 成功,其余失败	 */	@PostMapping(value = "/updateLedCsszbById")	public Map<String, Object> updateLedCsszbById(@RequestBody LedCsszb ledcsszb, HttpSession session) {		Map<String, Object> resultMap = new HashMap<>();		int result = 0;		try {			//  获取用户信息			JtlSysUser jtlSysUser = WebDataUtil.getSysUserInfo(session);			// 获取用户信息			String code = jtlSysUser.getUserId();			String userName = jtlSysUser.getUserName();			// 先添加修改人			ledcsszb.setXgr(userName);			ledcsszb.setXgrid(code);			// 校验是否存储在相同的模版名称			Map<String, Object> valMap = new HashMap<>();			valMap.put(ConstantUtil.MBMC_KEY, ledcsszb.getMbmc());			List<LedCsszb> valMbmcList = ledcsszbmanageservice.selectLedCsszbByMbinfo(valMap);			if (valMbmcList.size() != 0 && !ledcsszb.getMbid().equals(valMbmcList.get(0).getMbid())) {				resultMap.put(ConstantUtil.STATUS, ConstantUtil.STATUS_ZERO);				resultMap.put(ConstantUtil.MSG, ConstantUtil.MBMC_STRING_HAVE);				return resultMap;			}			// 校验是否存储在相同的模版编号			valMap.clear();			valMap.put(ConstantUtil.MBBH_KEY, ledcsszb.getMbbh());			List<LedCsszb> valMbmcLists = ledcsszbmanageservice.selectLedCsszbByMbinfo(valMap);			if (valMbmcLists.size() != 0 && !ledcsszb.getMbid().equals(valMbmcLists.get(0).getMbid())) {				resultMap.put(ConstantUtil.STATUS, ConstantUtil.STATUS_ZERO);				resultMap.put(ConstantUtil.MSG, ConstantUtil.MBBH_STRING_HAVE);				return resultMap;			}			// 更新模版信息			result = ledcsszbmanageservice.updateLedCsszbById(ledcsszb);			if (result == ConstantUtil.COMMONS_ONE) {				resultMap.put(ConstantUtil.STATUS, ConstantUtil.STATUS_ONE);				resultMap.put(ConstantUtil.MSG, ConstantUtil.COMMON_SUCCESS);			} else {				resultMap.put(ConstantUtil.STATUS, ConstantUtil.STATUS_ZERO);				resultMap.put(ConstantUtil.MSG, ConstantUtil.COMMON_FAILURE);			}		} catch (Exception e) {			resultMap.put(ConstantUtil.STATUS, ConstantUtil.STATUS_ZERO);			resultMap.put(ConstantUtil.MSG, ConstantUtil.COMMON_WZYY_FAILURE);		}		return resultMap;	}	/**	 * 新增一条数据	 * 	 * @param model 实体封装类	 * @return 1 成功,其余失败	 */	@PostMapping(value = "/insertLedCsszb")	public Map<String, Object> insertLedCsszb(@RequestBody LedCsszb ledcsszb, HttpSession session) {		Map<String, Object> resultMap = new HashMap<>();		int result = 0;		try {			//  获取用户信息			JtlSysUser jtlSysUser = WebDataUtil.getSysUserInfo(session);			// 获取用户信息			String code = jtlSysUser.getUserId();			String userName = jtlSysUser.getUserName();			// s添加修改人，创建人			ledcsszb.setXgr(userName);			ledcsszb.setXgrid(code);			ledcsszb.setCjr(userName);			ledcsszb.setCjrid(code);			// 校验是否存储在相同的模版名称			Map<String, Object> valMap = new HashMap<>();			valMap.put(ConstantUtil.MBMC_KEY, ledcsszb.getMbmc());			valMap.put(ConstantUtil.TAG_KEY, ConstantUtil.STATUS_ONE);			List<LedCsszb> valMbmcList = ledcsszbmanageservice.selectLedCsszbByMbinfo(valMap);			if (valMbmcList.size() != 0) {				resultMap.put(ConstantUtil.STATUS, ConstantUtil.STATUS_ZERO);				resultMap.put(ConstantUtil.MSG, ConstantUtil.MBMC_STRING_HAVE);				return resultMap;			}			// 校验是否存储在相同的模版编号			valMap.clear();			valMap.put(ConstantUtil.MBBH_KEY, ledcsszb.getMbbh());			valMap.put(ConstantUtil.TAG_KEY, ConstantUtil.STATUS_ONE);			List<LedCsszb> valMbmcLists = ledcsszbmanageservice.selectLedCsszbByMbinfo(valMap);			if (valMbmcLists.size() != 0) {				resultMap.put(ConstantUtil.STATUS, ConstantUtil.STATUS_ZERO);				resultMap.put(ConstantUtil.MSG, ConstantUtil.MBBH_STRING_HAVE);				return resultMap;			}			result = ledcsszbmanageservice.insertLedCsszb(ledcsszb);			if (result == ConstantUtil.COMMONS_ONE) {				resultMap.put(ConstantUtil.STATUS, ConstantUtil.STATUS_ONE);				resultMap.put(ConstantUtil.MSG, ConstantUtil.COMMON_SUCCESS);			} else {				resultMap.put(ConstantUtil.STATUS, ConstantUtil.STATUS_ZERO);				resultMap.put(ConstantUtil.MSG, ConstantUtil.COMMON_FAILURE);			}		} catch (Exception e) {			resultMap.put(ConstantUtil.STATUS, ConstantUtil.STATUS_ZERO);			resultMap.put(ConstantUtil.MSG, ConstantUtil.COMMON_WZYY_FAILURE);		}		return resultMap;	}	/**	 * 	 * 查询参数模版下拉列表	 * @return	 */	@PostMapping(value = "/selectCsmbCombox")	public List<Map<String, Object>> selectCsmbCombox() {		try {			return ledcsszbmanageservice.selectCsmbCombox();		} catch (Exception e) {			return null;		}	}		/**	 * 	 * 查询系统参数设置	 * @return	 */	@PostMapping(value = "/selectSystemPara")	public Map<String, Object> selectSystemPara(){		Map<String, Object> resultMap = new HashMap<>();		try {			resultMap = ledSystemParaManageService.selectSystemPara();		} catch (Exception e) {			e.printStackTrace();			List<Map<String, Object>> usedXlxxList = new ArrayList<>();			List<Map<String, Object>> xlxxList = new ArrayList<>();			resultMap.put("usedXlxxList", usedXlxxList);			resultMap.put("xlxxList", xlxxList);			resultMap.put("ledAdShowTime", "5");			resultMap.put("ledLineShowTime", "10");		}		return resultMap;	}		/**	 * 	 * 更新系统参数配置	 * @param paramMap	 * @return	 */	@PostMapping(value = "/updateSystemPara")	public Map<String, Object> updateSystemPara(@RequestParam Map<String, Object> paramMap){		Map<String, Object> resultMap = new HashMap<>();		try {			int flag = ledSystemParaManageService.updateSystemPara(paramMap);			if (flag == ConstantUtil.COMMONS_ONE) {				resultMap.put(ConstantUtil.STATUS, ConstantUtil.STATUS_ONE);				resultMap.put(ConstantUtil.MSG, ConstantUtil.COMMON_SUCCESS);			} else {				resultMap.put(ConstantUtil.STATUS, ConstantUtil.STATUS_ZERO);				resultMap.put(ConstantUtil.MSG, ConstantUtil.COMMON_FAILURE);			}		} catch (Exception e) {			e.printStackTrace();			resultMap.put(ConstantUtil.STATUS, ConstantUtil.STATUS_ZERO);			resultMap.put(ConstantUtil.MSG, ConstantUtil.COMMON_WZYY_FAILURE);		}		return resultMap;	}		}