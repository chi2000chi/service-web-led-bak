package com.framework.webClient.controller;import java.io.BufferedReader;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.ArrayList;import java.util.Arrays;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpSession;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.util.ResourceUtils;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.bind.annotation.RestController;import org.springframework.web.multipart.MultipartFile;import org.springframework.web.servlet.ModelAndView;import com.framework.thrift.service.gen.JtlSysUser;import com.framework.webClient.service.ILedLedManageService;import com.framework.webClient.service.ILedMsgManageService;import com.framework.webClient.service.ILedSystemParaManageService;import com.framework.webClient.service.ILedTemplateManageService;import com.framework.webClient.service.ILedTemplateRelationManageService;import com.framework.webClient.util.ConstantUtil;import com.framework.webClient.util.FtpUtil;import com.framework.webClient.util.JsonUtils;import com.framework.webClient.util.StringUtils;import com.framework.webClient.util.UUIDTools;import com.framework.webClient.util.WebDataUtil;import com.framework.webClient.util.XmlFileUtil;/** * @author 吉庆 * @date Fri Aug 17 00:00:00 CST 2018 */@RestController@ResponseBodypublic class LedTemplateController {	// ftp服务器ip地址	@Value("${ftpAddress}")	private String ftpAddress;	// 端口号	@Value("${ftpPort}")	private int ftpPort;	// 用户名	@Value("${ftpName}")	private String ftpName;	// 密码	@Value("${ftpPassWord}")	private String ftpPassWord;	// 图片路径	@Value("${ftpBasePath}")	private String ftpBasePath;	//天气预报xml文件路径	@Value("${ftpWeatherXmlPath}")	private String ftpWeatherXmlPath;		//天气预报xml文件路径	@Value("${ftpWeather22XmlPath}")	private String ftpWeather22XmlPath;	@Autowired	private ILedTemplateManageService ledtemplatemanageservice;		@Autowired	private ILedLedManageService ledLedManageService;	@Autowired	private ILedTemplateRelationManageService ledTemplateRelationManageService; 		@Autowired	private ILedMsgManageService ledMsgManageService;		@Autowired	private ILedSystemParaManageService ledSystemParaManageService;		/**	 * 	 * 初始化页面	 * @return	 */	@GetMapping(value = "/ledtemplate")	public ModelAndView ledContentManage() {		ModelAndView mv = new ModelAndView("ledtemplate");		return mv;	}	/**	 * 通过Id查询详细信息	 * 	 * @param id	 *            id编号	 * @return 实体model	 */	@PostMapping(value = "/selectLedTemplateByInfo")	public List<Map<String, Object>> selectLedTemplateByInfo(@RequestParam Map<String, Object> paramMap) {		List<Map<String, Object>> dataList = new ArrayList<>();		try {			dataList = ledtemplatemanageservice.selectLedTemplateByInfo(paramMap);		} catch (Exception e) {			return dataList;		}		return dataList;	}	/**	 * 	 * 查询分区模版信息详情	 * 	 * @param mbid	 *            模版ID	 * @return	 */	@PostMapping(value = "/selectQyszByMbidAndFqlx")	public Map<String, Object> selectQyszByMbidAndFqlx(@RequestParam Map<String, Object> paramMap) {		Map<String, Object> resultMap = new HashMap<>();		try {			resultMap = ledtemplatemanageservice.selectQyszByMbidAndFqlx(paramMap);			if (resultMap.get(ConstantUtil.STATUS).equals(ConstantUtil.STATUS_ZERO)) {				resultMap.put(ConstantUtil.MSG, ConstantUtil.COMMON_FAILURE);			} else if (resultMap.get(ConstantUtil.STATUS).equals(ConstantUtil.STATUS_ONE)) {				resultMap.put(ConstantUtil.MSG, ConstantUtil.COMMON_SUCCESS);			} else if (resultMap.get(ConstantUtil.STATUS).equals(ConstantUtil.STATUS_FUONE)) {				resultMap.put(ConstantUtil.MSG, ConstantUtil.COMMON_SUCCESS);				resultMap.put(ConstantUtil.STATUS, ConstantUtil.STATUS_ONE);			}		} catch (Exception e) {			e.printStackTrace();			resultMap.put(ConstantUtil.STATUS, ConstantUtil.STATUS_ZERO);			resultMap.put(ConstantUtil.MSG, ConstantUtil.COMMON_WZYY_FAILURE);		}		return resultMap;	}	/**	 * 	 * 上传文件	 * 	 * @param file	 * @param request	 * @return	 * @throws IOException	 */	@PostMapping(value = "/uploadToFtp")	public Map<String, String> uploadImg(@RequestParam("file") MultipartFile file, HttpServletRequest request) throws IOException {		Map<String, String> map = new HashMap<>();		try {			map.put(ConstantUtil.STATUS, ConstantUtil.STATUS_ZERO);			map.put(ConstantUtil.MSG, ConstantUtil.COMMON_UPLOAD_FAILE);			String fileName = file.getOriginalFilename();			fileName = UUIDTools.getUUID() + fileName.substring(fileName.lastIndexOf("."));			InputStream inputStream = file.getInputStream();			String filePath = null;			Boolean flag = FtpUtil.uploadFile(fileName, inputStream, ftpPort, ftpName, ftpPassWord, ftpBasePath);			if (flag == true) {				filePath = "ftp://" + ftpName + ":" + ftpPassWord + "@" + ftpAddress + ":" + ftpPort + ftpBasePath + fileName;				map.put(ConstantUtil.STATUS, ConstantUtil.STATUS_ONE);				map.put(ConstantUtil.MSG, ConstantUtil.COMMON_UPLOAD_SUCCESS);			}			map.put("path", filePath);		} catch (Exception e) {			map.put(ConstantUtil.STATUS, ConstantUtil.STATUS_ZERO);			map.put(ConstantUtil.MSG, ConstantUtil.COMMON_WZYY_FAILURE);		}		return map;	}	/**	 * 	 * 保存数据	 * 	 * @param paramMap	 * @return	 */	@SuppressWarnings("unchecked")	@PostMapping(value = "/saveMbinfo")	public Map<String, Object> saveMbinfo(@RequestParam Map<String, Object> paramMap, HttpSession session) {		Map<String, Object> resultMap = new HashMap<>();		try {			//  获取用户信息			JtlSysUser jtlSysUser = WebDataUtil.getSysUserInfo(session);			// 获取用户信息			String userName = jtlSysUser.getUserName();			String code = jtlSysUser.getUserId();			// 先添加修改人			paramMap.put("cjr", userName);			paramMap.put("cjrid", code);			paramMap.put("xgr", userName);			paramMap.put("xgrid", code);			String mbid = String.valueOf(paramMap.get("mbid"));			if (StringUtils.isEmpty(mbid)) {				mbid = UUIDTools.getUUID(); 				paramMap.put("mbid", mbid);				paramMap.put("template-id", mbid);				paramMap.put("mblj", "ftp://" + ftpName + ":" + ftpPassWord + "@" + ftpAddress + ":" + ftpPort + ftpBasePath + mbid + ".xml");				paramMap.put("addType", "add");			}			// 获取分区数据			String paramString = String.valueOf(paramMap.get("dataList"));			List<Map<String, Object>> paramList = JsonUtils.convertString2Obj(paramString, List.class);			// 遍历分区集合			for (Map<String, Object> temp : paramList) {				if (!temp.containsKey("fqid") || StringUtils.isEmpty(String.valueOf(temp.get("fqid")))) {					temp.put("fqid", UUIDTools.getUUID());				}				// 遍历分区，把fqlx字段值添加到到ledAttr的area-type中，fqlx的类型取决于fqlxmc查询到的中文。				((Map<String, Object>) temp.get("ledAttr")).put("area-type", temp.get("fqlx"));				// 取得文件数据				List<Map<String, Object>> fileList = (List<Map<String, Object>>) temp.get("ledFile");				for (Map<String, Object> fileMap : fileList) {					// 将文本内容上传到ftp服务器					if ((!fileMap.containsKey("fileid") || (fileMap.containsKey("fileid") && StringUtils.isEmpty(String.valueOf(fileMap.get("fileid"))))) && temp.get("fqlx").equals(ConstantUtil.FQLX_TXT_ZERO)) {						// 生成文件ID						String fileid = UUIDTools.getUUID();						fileMap.put("fileid", fileid);						// 整理将文本文件添加到txt文件中并上传到ftp服务器，返回上传路径						creatTxtFile(ConstantUtil.TEXT_KEY);						Map<String, Object> txtMap = writeTxtFile(fileid, String.valueOf(fileMap.get("text")));						if ((boolean) txtMap.get("flag")) {							fileMap.put("file-path", txtMap.get("file-path"));							fileMap.put("fileSize", txtMap.get("fileSize"));						}					} else if (fileMap.containsKey("fileid") && !StringUtils.isEmpty(String.valueOf(fileMap.get("fileid"))) && temp.get("fqlx").equals(ConstantUtil.FQLX_TXT_ZERO)) {						// 更新操作的时候，用来更新html的内容						creatTxtFile(ConstantUtil.TEXT_KEY);						Map<String, Object> txtMap = writeTxtFile(String.valueOf(fileMap.get("fileid")), String.valueOf(fileMap.get("text")));						if ((boolean) txtMap.get("flag")) {							fileMap.put("file-path", txtMap.get("file-path"));							fileMap.put("fileSize", txtMap.get("fileSize"));						}					}				}			}			// 更新传入参数，将新上传到ftp的txt内容填入参数中			paramMap.put("dataList", paramList);			// 根据mbid删除数据，将新数据保存到数据库			Map<String, Object> saveMap = ledtemplatemanageservice.saveMbinfo(paramMap);			if (saveMap.get(ConstantUtil.STATUS).equals(ConstantUtil.STATUS_FUONE)) {				resultMap.put(ConstantUtil.STATUS, ConstantUtil.STATUS_ZERO);				resultMap.put(ConstantUtil.MSG, ConstantUtil.COMMON_WZYY_FAILURE);				return resultMap;			} else if (saveMap.get(ConstantUtil.STATUS).equals(ConstantUtil.STATUS_ZERO)) {				return saveMap;			}			// 生成xml文件上传到ftp服务器			String ledAttr = "ledAttr";			String ledCommonset = "ledCommonset";			String ledFile = "ledFile";			String ledMsg = "ledMsg";			String ledWeather = "ledWeather";			boolean createStatus = true;			// 查询电子站牌消息			List<Map<String, Object>> ledMsgList = ledMsgManageService.selectLedMsgInfo();			paramMap.put(ledMsg, ledMsgList);			// 查询系统参数设置			Map<String, Object> systemParaMap = ledSystemParaManageService.selectSystemPara();			if (systemParaMap != null && !systemParaMap.isEmpty() && systemParaMap.containsKey("ledAdShowTime") && systemParaMap.containsKey("ledLineShowTime")) {				paramMap.put("ledAdShowTime", systemParaMap.get("ledAdShowTime"));				paramMap.put("ledLineShowTime", systemParaMap.get("ledLineShowTime"));			} else {				// 默认时间				paramMap.put("ledAdShowTime", "5");				paramMap.put("ledLineShowTime", "10");			}			// 添加ftp天气路径			paramMap.put(ledWeather, ftpWeather22XmlPath.replace(".xml", ".html"));			// 生成xml文件，上传到FTP			boolean status =  XmlFileUtil.makeXml(ledAttr, ledCommonset, ledFile, ledMsg, ledWeather, createStatus, paramMap, ftpAddress, ftpPort, ftpName, ftpPassWord, ftpBasePath);			if (status) {				resultMap.put(ConstantUtil.STATUS, ConstantUtil.STATUS_ONE);				resultMap.put(ConstantUtil.MSG, ConstantUtil.COMMON_SUCCESS);			} else {				resultMap.put(ConstantUtil.STATUS, ConstantUtil.STATUS_ZERO);				resultMap.put(ConstantUtil.MSG, ConstantUtil.COMMON_FAILURE);			}		} catch (Exception e) {			e.printStackTrace();			resultMap.put(ConstantUtil.STATUS, ConstantUtil.STATUS_ZERO);			resultMap.put(ConstantUtil.MSG, ConstantUtil.COMMON_WZYY_FAILURE);		}		return resultMap;	}	// 消息存储路径	private static String filenameTemp;	/**	 * 	 * 创建写入文本	 * 	 * @param name	 * @return	 * @throws IOException	 */	public boolean creatTxtFile(String name) throws IOException {		File path = new File(ResourceUtils.getURL("classpath:").getPath());		if (!path.exists())			path = new File("");		File upload = new File(path.getAbsolutePath() + "/static/frontend/project/template/");		if (!upload.exists())			upload.mkdirs();		boolean flag = false;		filenameTemp = java.net.URLDecoder.decode(upload.getAbsolutePath().replaceAll("!", ""), "UTF-8") + File.separator + name + ".txt";		File filename = new File(filenameTemp);		if (!filename.exists()) {			filename.createNewFile();			flag = true;		}		return flag;	}	/**	 * 	 * 向文本中写入内容并上传到服务器	 * 	 * @param newStr	 * @return	 * @throws IOException	 */	public Map<String, Object> writeTxtFile(String fileName, String newStr) throws IOException {		Map<String, Object> resultMap = new HashMap<>();		// 先读取原有文件内容，然后进行写入操作		boolean flag = false;		String filein = newStr;		FileInputStream fis = null;		InputStreamReader isr = null;		BufferedReader br = null;		FileOutputStream fos = null;		PrintWriter pw = null;		int fileSize = 0;		try {			// 文件路径			File file = new File(filenameTemp);			// 将文件读入输入流			fis = new FileInputStream(file);			isr = new InputStreamReader(fis);			br = new BufferedReader(isr);			StringBuffer buf = new StringBuffer();			buf.append(filein);			fos = new FileOutputStream(file);			pw = new PrintWriter(fos);			pw.write(buf.toString().toCharArray());			pw.flush();			fileSize = fis.available();			// 上传到FTP			FtpUtil.uploadFile(fileName + ".html", fis, ftpPort, ftpName, ftpPassWord, ftpBasePath);			flag = true;		} catch (IOException e1) {			throw e1;		} finally {			if (pw != null) {				pw.close();			}			if (fos != null) {				fos.close();			}			if (br != null) {				br.close();			}			if (isr != null) {				isr.close();			}			if (fis != null) {				fis.close();			}		}		resultMap.put("flag", flag);		resultMap.put("fileSize", fileSize);		resultMap.put("file-path", "ftp://" + ftpName + ":" + ftpPassWord + "@" + ftpAddress + ":" + ftpPort + ftpBasePath + fileName + ".html");		return resultMap;	}	/**	 * 通过Id删除该条数据	 * 	 * @param id	 *            id编号	 * @return 1 成功,其余失败	 */	@PostMapping(value = "/deleteLedTemplateById")	public Map<String, Object> deleteLedTemplateById(String mbid) {		Map<String, Object> resultMap = new HashMap<>();		try {			int result = ledtemplatemanageservice.deleteLedTemplateById(mbid);			if (result > 0) {				resultMap.put(ConstantUtil.STATUS, ConstantUtil.STATUS_ONE);				resultMap.put(ConstantUtil.MSG, ConstantUtil.COMMON_SUCCESS);			} else {				resultMap.put(ConstantUtil.STATUS, ConstantUtil.STATUS_ZERO);				resultMap.put(ConstantUtil.MSG, ConstantUtil.COMMON_FAILURE);			}		} catch (Exception e) {			e.printStackTrace();			resultMap.put(ConstantUtil.STATUS, ConstantUtil.STATUS_ZERO);			resultMap.put(ConstantUtil.MSG, ConstantUtil.COMMON_WZYY_FAILURE);		}		return resultMap;	}		/**	 * 查询分区模版下拉列表	 */	@PostMapping(value = "/selectTemplateList")	public List<Map<String, Object>> selectTemplateList() {		try {			return ledtemplatemanageservice.selectTemplateList();		} catch (Exception e) {			return null;		}	}		/**	 * 	 * 查询站牌列表和已分配站牌列表	 * @param paramMap	 * @return	 */	@PostMapping(value = "/selectFpzpList")	public Map<String, Object> selectFpzpList(@RequestParam Map<String, Object> paramMap){		Map<String, Object> resultMap = new HashMap<>();		try {			resultMap = ledLedManageService.selectLedidAndLedmcBymcobh(paramMap);		} catch (Exception e) {			e.printStackTrace();			List<Map<String, Object>> ledList = new ArrayList<>();			List<Map<String, Object>> usedLedList = new ArrayList<>();			resultMap.put("ledList", ledList);			resultMap.put("usedLedList", usedLedList);		}		return resultMap;	} 		/**	 * 	 * 保存分区电子模版关联	 * @param paramMap	 * @return	 */	@PostMapping(value = "/saveFpzpToLedTempRel")	public Map<String, Object> saveFpzpToLedTempRel(@RequestParam Map<String, Object> paramMap){		Map<String, Object> resultMap = new HashMap<>();		try {			// 处理数据			String ledListString = String.valueOf(paramMap.get("ledList"));			List<Map<String, Object>> ledList = new ArrayList<>();			String str[] = ledListString.split(",");			List<String> list = new ArrayList<>();			list = Arrays.asList(str);			String error = "";			for (String ledid : list) {								Map<String, Object> temp = new HashMap<>();				temp.put("ledid", ledid);				temp.put("fqmbid", paramMap.get("mbid"));				temp.put("tag", "1");				// 校验是电子站牌是否存在分区模版				List<Map<String, Object>> valLedFqmbList = ledTemplateRelationManageService.selectUsedLedListByLedmcOrLedbh(temp);				if (valLedFqmbList != null && !valLedFqmbList.isEmpty()) {					if (!valLedFqmbList.get(0).get("mbid").equals(paramMap.get("mbid"))) {						error = error + valLedFqmbList.get(0).get("ledmc") + ";";						temp.remove("tag");					}				}				ledList.add(temp);			}			if (error.length() > 0) {				resultMap.put(ConstantUtil.STATUS, ConstantUtil.STATUS_ZERO);				resultMap.put(ConstantUtil.MSG, "以下电子站牌不允许进行分配，如需分配，请移除原有分配，再进行分配。" + error);				return resultMap;			}			// 整合数据			paramMap.put("ledList", ledList);			// 保存			int flag = ledTemplateRelationManageService.saveFpzpToLedTempRel(paramMap);			if (flag > 0) {				resultMap.put(ConstantUtil.STATUS, ConstantUtil.STATUS_ONE);				resultMap.put(ConstantUtil.MSG, ConstantUtil.COMMON_SUCCESS);			} else {				resultMap.put(ConstantUtil.STATUS, ConstantUtil.STATUS_ZERO);				resultMap.put(ConstantUtil.MSG, ConstantUtil.COMMON_FAILURE);			}		} catch (Exception e) {			e.printStackTrace();			resultMap.put(ConstantUtil.STATUS, ConstantUtil.STATUS_ZERO);			resultMap.put(ConstantUtil.MSG, ConstantUtil.COMMON_WZYY_FAILURE);		}		return resultMap;	}}